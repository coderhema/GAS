"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/three-globe";
exports.ids = ["vendor-chunks/three-globe"];
exports.modules = {

/***/ "(ssr)/./node_modules/three-globe/dist/three-globe.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/three-globe/dist/three-globe.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ threeGlobe)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var kapsule__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! kapsule */ \"(ssr)/./node_modules/kapsule/dist/kapsule.mjs\");\n/* harmony import */ var _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tweenjs/tween.js */ \"(ssr)/./node_modules/@tweenjs/tween.js/dist/tween.esm.js\");\n/* harmony import */ var three_slippy_map_globe__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! three-slippy-map-globe */ \"(ssr)/./node_modules/three-slippy-map-globe/dist/three-slippy-map-globe.mjs\");\n/* harmony import */ var three_geojson_geometry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three-geojson-geometry */ \"(ssr)/./node_modules/three-geojson-geometry/dist/three-geojson-geometry.mjs\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! d3-geo */ \"(ssr)/./node_modules/d3-geo/src/graticule.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! d3-geo */ \"(ssr)/./node_modules/d3-geo/src/distance.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! d3-geo */ \"(ssr)/./node_modules/d3-geo/src/interpolate.js\");\n/* harmony import */ var three_examples_jsm_utils_BufferGeometryUtils_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! three/examples/jsm/utils/BufferGeometryUtils.js */ \"(ssr)/./node_modules/three/examples/jsm/utils/BufferGeometryUtils.js\");\n/* harmony import */ var accessor_fn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! accessor-fn */ \"(ssr)/./node_modules/accessor-fn/dist/accessor-fn.mjs\");\n/* harmony import */ var d3_color__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! d3-color */ \"(ssr)/./node_modules/d3-color/src/color.js\");\n/* harmony import */ var tinycolor2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tinycolor2 */ \"(ssr)/./node_modules/tinycolor2/esm/tinycolor.js\");\n/* harmony import */ var data_bind_mapper__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! data-bind-mapper */ \"(ssr)/./node_modules/data-bind-mapper/dist/data-bind-mapper.mjs\");\n/* harmony import */ var frame_ticker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! frame-ticker */ \"(ssr)/./node_modules/frame-ticker/dist/FrameTicker.js\");\n/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! d3-scale */ \"(ssr)/./node_modules/d3-scale/src/linear.js\");\n/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! d3-scale */ \"(ssr)/./node_modules/d3-scale/src/quantize.js\");\n/* harmony import */ var three_conic_polygon_geometry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three-conic-polygon-geometry */ \"(ssr)/./node_modules/three-conic-polygon-geometry/dist/three-conic-polygon-geometry.mjs\");\n/* harmony import */ var index_array_by__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! index-array-by */ \"(ssr)/./node_modules/index-array-by/dist/index-array-by.mjs\");\n/* harmony import */ var h3_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! h3-js */ \"(ssr)/./node_modules/h3-js/dist/h3-js.es.js\");\n/* harmony import */ var d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! d3-scale-chromatic */ \"(ssr)/./node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js\");\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! d3-array */ \"(ssr)/./node_modules/d3-array/src/sum.js\");\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! d3-array */ \"(ssr)/./node_modules/d3-array/src/max.js\");\n/* harmony import */ var yaot__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! yaot */ \"(ssr)/./node_modules/yaot/index.js\");\n/* harmony import */ var three_examples_jsm_lines_Line2_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! three/examples/jsm/lines/Line2.js */ \"(ssr)/./node_modules/three/examples/jsm/lines/Line2.js\");\n/* harmony import */ var three_examples_jsm_lines_LineGeometry_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! three/examples/jsm/lines/LineGeometry.js */ \"(ssr)/./node_modules/three/examples/jsm/lines/LineGeometry.js\");\n/* harmony import */ var three_examples_jsm_lines_LineMaterial_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! three/examples/jsm/lines/LineMaterial.js */ \"(ssr)/./node_modules/three/examples/jsm/lines/LineMaterial.js\");\n/* harmony import */ var d3_interpolate__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! d3-interpolate */ \"(ssr)/./node_modules/d3-interpolate/src/array.js\");\n/* harmony import */ var three_examples_jsm_geometries_TextGeometry_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! three/examples/jsm/geometries/TextGeometry.js */ \"(ssr)/./node_modules/three/examples/jsm/geometries/TextGeometry.js\");\n/* harmony import */ var three_examples_jsm_loaders_FontLoader_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! three/examples/jsm/loaders/FontLoader.js */ \"(ssr)/./node_modules/three/examples/jsm/loaders/FontLoader.js\");\n/* harmony import */ var three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! three/examples/jsm/renderers/CSS2DRenderer.js */ \"(ssr)/./node_modules/three/examples/jsm/renderers/CSS2DRenderer.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];\n    return n;\n}\nfunction _arrayWithHoles(r) {\n    if (Array.isArray(r)) return r;\n}\nfunction _arrayWithoutHoles(r) {\n    if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _assertClassBrand(e, t, n) {\n    if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n    throw new TypeError(\"Private element is not present on this object\");\n}\nfunction _assertThisInitialized(e) {\n    if (undefined === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return e;\n}\nfunction _callSuper(t, o, e) {\n    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _checkPrivateRedeclaration(e, t) {\n    if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _classPrivateFieldGet2(s, a) {\n    return s.get(_assertClassBrand(s, a));\n}\nfunction _classPrivateFieldInitSpec(e, t, a) {\n    _checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nfunction _classPrivateFieldSet2(s, a, r) {\n    return s.set(_assertClassBrand(s, a), r), r;\n}\nfunction _classPrivateMethodInitSpec(e, a) {\n    _checkPrivateRedeclaration(e, a), a.add(e);\n}\nfunction _construct(t, e, r) {\n    if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n    var o = [\n        null\n    ];\n    o.push.apply(o, e);\n    var p = new (t.bind.apply(t, o))();\n    return p;\n}\nfunction _defineProperties(e, r) {\n    for(var t = 0; t < r.length; t++){\n        var o = r[t];\n        o.enumerable = o.enumerable || false, o.configurable = true, \"value\" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n}\nfunction _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), Object.defineProperty(e, \"prototype\", {\n        writable: false\n    }), e;\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    }) : e[r] = t, e;\n}\nfunction _get() {\n    return _get = \"undefined\" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(e, t, r) {\n        var p = _superPropBase(e, t);\n        if (p) {\n            var n = Object.getOwnPropertyDescriptor(p, t);\n            return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;\n        }\n    }, _get.apply(null, arguments);\n}\nfunction _getPrototypeOf(t) {\n    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {\n        return t.__proto__ || Object.getPrototypeOf(t);\n    }, _getPrototypeOf(t);\n}\nfunction _inherits(t, e) {\n    if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n    t.prototype = Object.create(e && e.prototype, {\n        constructor: {\n            value: t,\n            writable: true,\n            configurable: true\n        }\n    }), Object.defineProperty(t, \"prototype\", {\n        writable: false\n    }), e && _setPrototypeOf(t, e);\n}\nfunction _isNativeReflectConstruct() {\n    try {\n        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (t) {}\n    return (_isNativeReflectConstruct = function() {\n        return !!t;\n    })();\n}\nfunction _iterableToArray(r) {\n    if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = true, o = false;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) {\n                if (Object(t) !== t) return;\n                f = !1;\n            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = true, n = r;\n        } finally{\n            try {\n                if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread2(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), true).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _objectWithoutProperties(e, t) {\n    if (null == e) return {};\n    var o, r, i = _objectWithoutPropertiesLoose(e, t);\n    if (Object.getOwnPropertySymbols) {\n        var s = Object.getOwnPropertySymbols(e);\n        for(r = 0; r < s.length; r++)o = s[r], t.includes(o) || ({}).propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n    }\n    return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n    if (null == r) return {};\n    var t = {};\n    for(var n in r)if (({}).hasOwnProperty.call(r, n)) {\n        if (e.includes(n)) continue;\n        t[n] = r[n];\n    }\n    return t;\n}\nfunction _possibleConstructorReturn(t, e) {\n    if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n    if (undefined !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n    return _assertThisInitialized(t);\n}\nfunction _setPrototypeOf(t, e) {\n    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {\n        return t.__proto__ = e, t;\n    }, _setPrototypeOf(t, e);\n}\nfunction _slicedToArray(r, e) {\n    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _superPropBase(t, o) {\n    for(; !({}).hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t)););\n    return t;\n}\nfunction _superPropGet(t, o, e, r) {\n    var p = _get(_getPrototypeOf(t.prototype), o, e);\n    return \"function\" == typeof p ? function(t) {\n        return p.apply(e, t);\n    } : p;\n}\nfunction _toConsumableArray(r) {\n    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (undefined !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _unsupportedIterableToArray(r, a) {\n    if (r) {\n        if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n        var t = ({}).toString.call(r).slice(8, -1);\n        return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : undefined;\n    }\n}\nvar _materialDispose = function materialDispose(material) {\n    if (material instanceof Array) {\n        material.forEach(_materialDispose);\n    } else {\n        if (material.map) {\n            material.map.dispose();\n        }\n        material.dispose();\n    }\n};\nvar _deallocate = function deallocate(obj) {\n    if (obj.geometry) {\n        obj.geometry.dispose();\n    }\n    if (obj.material) {\n        _materialDispose(obj.material);\n    }\n    if (obj.texture) {\n        obj.texture.dispose();\n    }\n    if (obj.children) {\n        obj.children.forEach(_deallocate);\n    }\n};\nvar emptyObject = function emptyObject(obj) {\n    if (obj && obj.children) while(obj.children.length){\n        var childObj = obj.children[0];\n        obj.remove(childObj);\n        _deallocate(childObj);\n    }\n};\nfunction linkKapsule(kapsulePropName, kapsuleType) {\n    var dummyK = new kapsuleType(); // To extract defaults\n    return {\n        linkProp: function linkProp(prop) {\n            // link property config\n            return {\n                \"default\": dummyK[prop](),\n                onChange: function onChange(v, state) {\n                    state[kapsulePropName][prop](v);\n                },\n                triggerUpdate: false\n            };\n        },\n        linkMethod: function linkMethod(method) {\n            // link method pass-through\n            return function(state) {\n                var kapsuleInstance = state[kapsulePropName];\n                for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                    args[_key - 1] = arguments[_key];\n                }\n                var returnVal = kapsuleInstance[method].apply(kapsuleInstance, args);\n                return returnVal === kapsuleInstance ? this // chain based on the parent object, not the inner kapsule\n                 : returnVal;\n            };\n        }\n    };\n}\nvar GLOBE_RADIUS = 100;\nfunction getGlobeRadius() {\n    return GLOBE_RADIUS;\n}\nfunction polar2Cartesian(lat, lng) {\n    var relAltitude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var phi = (90 - lat) * Math.PI / 180;\n    var theta = (90 - lng) * Math.PI / 180;\n    var r = GLOBE_RADIUS * (1 + relAltitude);\n    var phiSin = Math.sin(phi);\n    return {\n        x: r * phiSin * Math.cos(theta),\n        y: r * Math.cos(phi),\n        z: r * phiSin * Math.sin(theta)\n    };\n}\nfunction cartesian2Polar(_ref) {\n    var x = _ref.x, y = _ref.y, z = _ref.z;\n    var r = Math.sqrt(x * x + y * y + z * z);\n    var phi = Math.acos(y / r);\n    var theta = Math.atan2(z, x);\n    return {\n        lat: 90 - phi * 180 / Math.PI,\n        lng: 90 - theta * 180 / Math.PI - (theta < -Math.PI / 2 ? 360 : 0),\n        // keep within [-180, 180] boundaries\n        altitude: r / GLOBE_RADIUS - 1\n    };\n}\nfunction deg2Rad$1(deg) {\n    return deg * Math.PI / 180;\n}\nvar THREE$i = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    BackSide: three__WEBPACK_IMPORTED_MODULE_8__.BackSide,\n    BufferAttribute: three__WEBPACK_IMPORTED_MODULE_8__.BufferAttribute,\n    Color: three__WEBPACK_IMPORTED_MODULE_8__.Color,\n    Mesh: three__WEBPACK_IMPORTED_MODULE_8__.Mesh,\n    ShaderMaterial: three__WEBPACK_IMPORTED_MODULE_8__.ShaderMaterial\n};\nvar vertexShader = \"\\nuniform float hollowRadius;\\n\\nvarying vec3 vVertexWorldPosition;\\nvarying vec3 vVertexNormal;\\nvarying float vCameraDistanceToObjCenter;\\nvarying float vVertexAngularDistanceToHollowRadius;\\n\\nvoid main() {    \\n  vVertexNormal\t= normalize(normalMatrix * normal);\\n  vVertexWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\\n  \\n  vec4 objCenterViewPosition = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\\n  vCameraDistanceToObjCenter = length(objCenterViewPosition);\\n  \\n  float edgeAngle = atan(hollowRadius / vCameraDistanceToObjCenter);\\n  float vertexAngle = acos(dot(normalize(modelViewMatrix * vec4(position, 1.0)), normalize(objCenterViewPosition)));\\n  vVertexAngularDistanceToHollowRadius = vertexAngle - edgeAngle;\\n\\n  gl_Position\t= projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\";\nvar fragmentShader = \"\\nuniform vec3 color;\\nuniform float coefficient;\\nuniform float power;\\nuniform float hollowRadius;\\n\\nvarying vec3 vVertexNormal;\\nvarying vec3 vVertexWorldPosition;\\nvarying float vCameraDistanceToObjCenter;\\nvarying float vVertexAngularDistanceToHollowRadius;\\n\\nvoid main() {\\n  if (vCameraDistanceToObjCenter < hollowRadius) discard; // inside the hollowRadius\\n  if (vVertexAngularDistanceToHollowRadius < 0.0) discard; // frag position is within the hollow radius\\n\\n  vec3 worldCameraToVertex = vVertexWorldPosition - cameraPosition;\\n  vec3 viewCameraToVertex\t= (viewMatrix * vec4(worldCameraToVertex, 0.0)).xyz;\\n  viewCameraToVertex = normalize(viewCameraToVertex);\\n  float intensity\t= pow(\\n    coefficient + dot(vVertexNormal, viewCameraToVertex),\\n    power\\n  );\\n  gl_FragColor = vec4(color, intensity);\\n}\";\n// Based off: http://stemkoski.blogspot.fr/2013/07/shaders-in-threejs-glow-and-halo.html\nfunction createGlowMaterial(coefficient, color, power, hollowRadius) {\n    return new THREE$i.ShaderMaterial({\n        depthWrite: false,\n        transparent: true,\n        vertexShader: vertexShader,\n        fragmentShader: fragmentShader,\n        uniforms: {\n            coefficient: {\n                value: coefficient\n            },\n            color: {\n                value: new THREE$i.Color(color)\n            },\n            power: {\n                value: power\n            },\n            hollowRadius: {\n                value: hollowRadius\n            }\n        }\n    });\n}\nfunction createGlowGeometry(geometry, size) {\n    var glowGeometry = geometry.clone();\n    // Resize vertex positions according to normals\n    var position = new Float32Array(geometry.attributes.position.count * 3);\n    for(var idx = 0, len = position.length; idx < len; idx++){\n        var normal = geometry.attributes.normal.array[idx];\n        var curPos = geometry.attributes.position.array[idx];\n        position[idx] = curPos + normal * size;\n    }\n    glowGeometry.setAttribute(\"position\", new THREE$i.BufferAttribute(position, 3));\n    return glowGeometry;\n}\nvar GlowMesh = /*#__PURE__*/ function(_THREE$Mesh) {\n    function GlowMesh(geometry) {\n        var _this;\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref$color = _ref.color, color = _ref$color === undefined ? \"gold\" : _ref$color, _ref$size = _ref.size, size = _ref$size === undefined ? 2 : _ref$size, _ref$coefficient = _ref.coefficient, coefficient = _ref$coefficient === undefined ? 0.5 : _ref$coefficient, _ref$power = _ref.power, power = _ref$power === undefined ? 1 : _ref$power, _ref$hollowRadius = _ref.hollowRadius, hollowRadius = _ref$hollowRadius === undefined ? 0 : _ref$hollowRadius, _ref$backside = _ref.backside, backside = _ref$backside === undefined ? true : _ref$backside;\n        _classCallCheck(this, GlowMesh);\n        _this = _callSuper(this, GlowMesh);\n        var glowGeometry = createGlowGeometry(geometry, size);\n        var glowMaterial = createGlowMaterial(coefficient, color, power, hollowRadius);\n        backside && (glowMaterial.side = THREE$i.BackSide);\n        _this.geometry = glowGeometry;\n        _this.material = glowMaterial;\n        return _this;\n    }\n    _inherits(GlowMesh, _THREE$Mesh);\n    return _createClass(GlowMesh);\n}(THREE$i.Mesh);\nvar THREE$h = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    Color: three__WEBPACK_IMPORTED_MODULE_8__.Color,\n    Group: three__WEBPACK_IMPORTED_MODULE_8__.Group,\n    LineBasicMaterial: three__WEBPACK_IMPORTED_MODULE_8__.LineBasicMaterial,\n    LineSegments: three__WEBPACK_IMPORTED_MODULE_8__.LineSegments,\n    Mesh: three__WEBPACK_IMPORTED_MODULE_8__.Mesh,\n    MeshPhongMaterial: three__WEBPACK_IMPORTED_MODULE_8__.MeshPhongMaterial,\n    SphereGeometry: three__WEBPACK_IMPORTED_MODULE_8__.SphereGeometry,\n    SRGBColorSpace: three__WEBPACK_IMPORTED_MODULE_8__.SRGBColorSpace,\n    TextureLoader: three__WEBPACK_IMPORTED_MODULE_8__.TextureLoader\n};\n//\nvar GlobeLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        globeImageUrl: {},\n        bumpImageUrl: {},\n        showGlobe: {\n            \"default\": true,\n            onChange: function onChange(showGlobe, state) {\n                state.globeGroup.visible = !!showGlobe;\n            },\n            triggerUpdate: false\n        },\n        showGraticules: {\n            \"default\": false,\n            onChange: function onChange(showGraticules, state) {\n                state.graticulesObj.visible = !!showGraticules;\n            },\n            triggerUpdate: false\n        },\n        showAtmosphere: {\n            \"default\": true,\n            onChange: function onChange(showAtmosphere, state) {\n                state.atmosphereObj && (state.atmosphereObj.visible = !!showAtmosphere);\n            },\n            triggerUpdate: false\n        },\n        atmosphereColor: {\n            \"default\": \"lightskyblue\"\n        },\n        atmosphereAltitude: {\n            \"default\": 0.15\n        },\n        globeTileEngineUrl: {\n            onChange: function onChange(v, state) {\n                state.tileEngine.tileUrl = v;\n            }\n        },\n        globeTileEngineMaxLevel: {\n            \"default\": 17,\n            onChange: function onChange(v, state) {\n                state.tileEngine.maxLevel = v;\n            },\n            triggerUpdate: false\n        },\n        updatePov: {\n            onChange: function onChange(v, state) {\n                state.tileEngine.updatePov(v);\n            },\n            triggerUpdate: false\n        },\n        onReady: {\n            \"default\": function _default() {},\n            triggerUpdate: false\n        }\n    },\n    methods: {\n        globeMaterial: function globeMaterial(state, _globeMaterial) {\n            if (_globeMaterial !== undefined) {\n                state.globeObj.material = _globeMaterial || state.defaultGlobeMaterial;\n                return this;\n            }\n            return state.globeObj.material;\n        },\n        _destructor: function _destructor(state) {\n            emptyObject(state.globeObj);\n            emptyObject(state.tileEngine);\n            emptyObject(state.graticulesObj);\n        }\n    },\n    stateInit: function stateInit() {\n        // create globe\n        var globeGeometry = new THREE$h.SphereGeometry(GLOBE_RADIUS, 75, 75);\n        var defaultGlobeMaterial = new THREE$h.MeshPhongMaterial({\n            color: 0x000000\n        });\n        var globeObj = new THREE$h.Mesh(globeGeometry, defaultGlobeMaterial);\n        globeObj.rotation.y = -Math.PI / 2; // face prime meridian along Z axis\n        // Create empty tile engine\n        var tileEngine = new three_slippy_map_globe__WEBPACK_IMPORTED_MODULE_10__[\"default\"](GLOBE_RADIUS);\n        // Group including globe and tile engine\n        var globeGroup = new THREE$h.Group();\n        globeGroup.__globeObjType = \"globe\"; // Add object type\n        globeGroup.add(globeObj);\n        globeGroup.add(tileEngine);\n        // create graticules\n        var graticulesObj = new THREE$h.LineSegments(new three_geojson_geometry__WEBPACK_IMPORTED_MODULE_1__[\"default\"]((0,d3_geo__WEBPACK_IMPORTED_MODULE_11__.graticule10)(), GLOBE_RADIUS, 2), new THREE$h.LineBasicMaterial({\n            color: \"lightgrey\",\n            transparent: true,\n            opacity: 0.1\n        }));\n        return {\n            globeGroup: globeGroup,\n            globeObj: globeObj,\n            graticulesObj: graticulesObj,\n            defaultGlobeMaterial: defaultGlobeMaterial,\n            tileEngine: tileEngine\n        };\n    },\n    init: function init(threeObj, state) {\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.scene.add(state.globeGroup); // add globe\n        state.scene.add(state.graticulesObj); // add graticules\n        state.ready = false;\n    },\n    update: function update(state, changedProps) {\n        var globeMaterial = state.globeObj.material;\n        // Hide globeObj if it's representing tiles\n        state.tileEngine.visible = !(state.globeObj.visible = !state.globeTileEngineUrl);\n        if (changedProps.hasOwnProperty(\"globeImageUrl\")) {\n            if (!state.globeImageUrl) {\n                // Black globe if no image\n                !globeMaterial.color && (globeMaterial.color = new THREE$h.Color(0x000000));\n            } else {\n                new THREE$h.TextureLoader().load(state.globeImageUrl, function(texture) {\n                    texture.colorSpace = THREE$h.SRGBColorSpace;\n                    globeMaterial.map = texture;\n                    globeMaterial.color = null;\n                    globeMaterial.needsUpdate = true;\n                    // ready when first globe image finishes loading (asynchronously to allow 1 frame to load texture)\n                    !state.ready && (state.ready = true) && setTimeout(state.onReady);\n                });\n            }\n        }\n        if (changedProps.hasOwnProperty(\"bumpImageUrl\")) {\n            if (!state.bumpImageUrl) {\n                globeMaterial.bumpMap = null;\n                globeMaterial.needsUpdate = true;\n            } else {\n                state.bumpImageUrl && new THREE$h.TextureLoader().load(state.bumpImageUrl, function(texture) {\n                    globeMaterial.bumpMap = texture;\n                    globeMaterial.needsUpdate = true;\n                });\n            }\n        }\n        if (changedProps.hasOwnProperty(\"atmosphereColor\") || changedProps.hasOwnProperty(\"atmosphereAltitude\")) {\n            if (state.atmosphereObj) {\n                // recycle previous atmosphere object\n                state.scene.remove(state.atmosphereObj);\n                emptyObject(state.atmosphereObj);\n            }\n            if (state.atmosphereColor && state.atmosphereAltitude) {\n                var obj = state.atmosphereObj = new GlowMesh(state.globeObj.geometry, {\n                    color: state.atmosphereColor,\n                    size: GLOBE_RADIUS * state.atmosphereAltitude,\n                    hollowRadius: GLOBE_RADIUS,\n                    coefficient: 0.1,\n                    power: 3.5 // dispersion\n                });\n                obj.visible = !!state.showAtmosphere;\n                obj.__globeObjType = \"atmosphere\"; // Add object type\n                state.scene.add(obj);\n            }\n        }\n        if (!state.ready && (!state.globeImageUrl || state.globeTileEngineUrl)) {\n            // ready immediately if there's no globe image\n            state.ready = true;\n            state.onReady();\n        }\n    }\n});\nvar colorStr2Hex = function colorStr2Hex(str) {\n    return isNaN(str) ? parseInt((0,tinycolor2__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(str).toHex(), 16) : str;\n};\nvar colorAlpha = function colorAlpha(str) {\n    return str && isNaN(str) ? (0,d3_color__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(str).opacity : 1;\n};\nvar color2ShaderArr = function color2ShaderArr(str) {\n    var includeAlpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var sRGBColorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var color;\n    var alpha = 1;\n    var rgbaMatch = /^rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*([\\d.eE+-]+)\\s*\\)$/.exec(str.trim().toLowerCase());\n    if (rgbaMatch) {\n        var _rgbaMatch$slice = rgbaMatch.slice(1), _rgbaMatch$slice2 = _slicedToArray(_rgbaMatch$slice, 4), r = _rgbaMatch$slice2[0], g = _rgbaMatch$slice2[1], b = _rgbaMatch$slice2[2], a = _rgbaMatch$slice2[3];\n        color = new three__WEBPACK_IMPORTED_MODULE_8__.Color(\"rgb(\".concat(+r, \",\").concat(+g, \",\").concat(+b, \")\"));\n        alpha = Math.min(+a, 1);\n    } else {\n        color = new three__WEBPACK_IMPORTED_MODULE_8__.Color(str);\n    }\n    sRGBColorSpace && color.convertLinearToSRGB(); // vertexColors expects linear, but shaders expect sRGB\n    var rgbArr = color.toArray();\n    return includeAlpha ? [].concat(_toConsumableArray(rgbArr), [\n        alpha\n    ]) : rgbArr;\n};\nfunction setMaterialOpacity(material, opacity, depthWrite) {\n    material.opacity = opacity;\n    material.transparent = opacity < 1;\n    material.depthWrite = opacity >= 1; // depthWrite=false recommended for transparent materials, to prevent transparency issues https://discourse.threejs.org/t/threejs-and-the-transparent-problem/11553/31\n    return material;\n}\nvar THREE$g = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    BufferAttribute: three__WEBPACK_IMPORTED_MODULE_8__.BufferAttribute\n};\nfunction array2BufferAttr(data) {\n    var itemSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var ArrayClass = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Float32Array;\n    if (itemSize === 1) {\n        // edge case handle for improved performance\n        return new THREE$g.BufferAttribute(new ArrayClass(data), itemSize);\n    }\n    var ba = new THREE$g.BufferAttribute(new ArrayClass(data.length * itemSize), itemSize);\n    for(var idx = 0, l = data.length; idx < l; idx++){\n        ba.set(data[idx], idx * itemSize);\n    }\n    return ba;\n}\nfunction bufferAttr2Array(ba) {\n    var itemSize = ba.itemSize;\n    var res = [];\n    for(var i = 0; i < ba.count; i++){\n        res.push(ba.array.slice(i * itemSize, (i + 1) * itemSize));\n    }\n    return res;\n}\nvar _dataBindAttr = /*#__PURE__*/ new WeakMap();\nvar _objBindAttr = /*#__PURE__*/ new WeakMap();\nvar _removeDelay = /*#__PURE__*/ new WeakMap();\nvar ThreeDigest = /*#__PURE__*/ function(_DataBindMapper) {\n    function ThreeDigest(scene) {\n        var _this;\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref$dataBindAttr = _ref.dataBindAttr, dataBindAttr = _ref$dataBindAttr === undefined ? \"__data\" : _ref$dataBindAttr, _ref$objBindAttr = _ref.objBindAttr, objBindAttr = _ref$objBindAttr === undefined ? \"__threeObj\" : _ref$objBindAttr, _ref$removeDelay = _ref.removeDelay, removeDelay = _ref$removeDelay === undefined ? 0 : _ref$removeDelay;\n        _classCallCheck(this, ThreeDigest);\n        _this = _callSuper(this, ThreeDigest);\n        _defineProperty(_this, \"scene\", undefined);\n        _classPrivateFieldInitSpec(_this, _dataBindAttr, undefined);\n        _classPrivateFieldInitSpec(_this, _objBindAttr, undefined);\n        _classPrivateFieldInitSpec(_this, _removeDelay, undefined);\n        _this.scene = scene;\n        _classPrivateFieldSet2(_dataBindAttr, _this, dataBindAttr);\n        _classPrivateFieldSet2(_objBindAttr, _this, objBindAttr);\n        _classPrivateFieldSet2(_removeDelay, _this, removeDelay);\n        _this.onRemoveObj(function() {});\n        return _this;\n    }\n    _inherits(ThreeDigest, _DataBindMapper);\n    return _createClass(ThreeDigest, [\n        {\n            key: \"onCreateObj\",\n            value: function onCreateObj(fn) {\n                var _this2 = this;\n                _superPropGet(ThreeDigest, \"onCreateObj\", this)([\n                    function(d) {\n                        var obj = fn(d);\n                        d[_classPrivateFieldGet2(_objBindAttr, _this2)] = obj;\n                        obj[_classPrivateFieldGet2(_dataBindAttr, _this2)] = d;\n                        _this2.scene.add(obj);\n                        return obj;\n                    }\n                ]);\n                return this;\n            }\n        },\n        {\n            key: \"onRemoveObj\",\n            value: function onRemoveObj(fn) {\n                var _this3 = this;\n                _superPropGet(ThreeDigest, \"onRemoveObj\", this)([\n                    function(obj, dId) {\n                        var d = _superPropGet(ThreeDigest, \"getData\", _this3)([\n                            obj\n                        ]);\n                        fn(obj, dId);\n                        var removeFn = function removeFn() {\n                            _this3.scene.remove(obj);\n                            emptyObject(obj);\n                            delete d[_classPrivateFieldGet2(_objBindAttr, _this3)];\n                        };\n                        _classPrivateFieldGet2(_removeDelay, _this3) ? setTimeout(removeFn, _classPrivateFieldGet2(_removeDelay, _this3)) : removeFn();\n                    }\n                ]);\n                return this;\n            }\n        }\n    ]);\n}(data_bind_mapper__WEBPACK_IMPORTED_MODULE_13__[\"default\"]);\nvar THREE$f = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    BufferGeometry: three__WEBPACK_IMPORTED_MODULE_8__.BufferGeometry,\n    Color: three__WEBPACK_IMPORTED_MODULE_8__.Color,\n    CylinderGeometry: three__WEBPACK_IMPORTED_MODULE_8__.CylinderGeometry,\n    Matrix4: three__WEBPACK_IMPORTED_MODULE_8__.Matrix4,\n    Mesh: three__WEBPACK_IMPORTED_MODULE_8__.Mesh,\n    MeshLambertMaterial: three__WEBPACK_IMPORTED_MODULE_8__.MeshLambertMaterial,\n    Object3D: three__WEBPACK_IMPORTED_MODULE_8__.Object3D,\n    Vector3: three__WEBPACK_IMPORTED_MODULE_8__.Vector3\n};\nvar bfg$2 = Object.assign({}, three_examples_jsm_utils_BufferGeometryUtils_js__WEBPACK_IMPORTED_MODULE_14__);\nvar BufferGeometryUtils$2 = bfg$2.BufferGeometryUtils || bfg$2;\n//\nvar PointsLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        pointsData: {\n            \"default\": []\n        },\n        pointLat: {\n            \"default\": \"lat\"\n        },\n        pointLng: {\n            \"default\": \"lng\"\n        },\n        pointColor: {\n            \"default\": function _default() {\n                return \"#ffffaa\";\n            }\n        },\n        pointAltitude: {\n            \"default\": 0.1\n        },\n        // in units of globe radius\n        pointRadius: {\n            \"default\": 0.25\n        },\n        // in deg\n        pointResolution: {\n            \"default\": 12,\n            triggerUpdate: false\n        },\n        // how many slice segments in the cylinder's circumference\n        pointsMerge: {\n            \"default\": false\n        },\n        // boolean. Whether to merge all points into a single mesh for rendering performance\n        pointsTransitionDuration: {\n            \"default\": 1000,\n            triggerUpdate: false\n        } // ms\n    },\n    init: function init(threeObj, state, _ref) {\n        var tweenGroup = _ref.tweenGroup;\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.tweenGroup = tweenGroup;\n        state.dataMapper = new ThreeDigest(threeObj, {\n            objBindAttr: \"__threeObjPoint\"\n        });\n    },\n    update: function update(state, changedProps) {\n        // Data accessors\n        var latAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pointLat);\n        var lngAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pointLng);\n        var altitudeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pointAltitude);\n        var radiusAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pointRadius);\n        var colorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pointColor);\n        // shared geometry\n        var pointGeometry = new THREE$f.CylinderGeometry(1, 1, 1, state.pointResolution);\n        pointGeometry.applyMatrix4(new THREE$f.Matrix4().makeRotationX(Math.PI / 2));\n        pointGeometry.applyMatrix4(new THREE$f.Matrix4().makeTranslation(0, 0, -0.5));\n        var pxPerDeg = 2 * Math.PI * GLOBE_RADIUS / 360;\n        var pointMaterials = {}; // indexed by color\n        if (!state.pointsMerge && changedProps.hasOwnProperty(\"pointsMerge\")) {\n            emptyObject(state.scene); // Empty trailing merged objects\n        }\n        state.dataMapper.scene = state.pointsMerge ? new THREE$f.Object3D() : state.scene; // use fake scene if merging points\n        state.dataMapper.onCreateObj(createObj).onUpdateObj(updateObj).digest(state.pointsData);\n        if (state.pointsMerge) {\n            // merge points into a single mesh\n            var pointsGeometry = !state.pointsData.length ? new THREE$f.BufferGeometry() : (BufferGeometryUtils$2.mergeGeometries || BufferGeometryUtils$2.mergeBufferGeometries)(state.pointsData.map(function(d) {\n                var obj = state.dataMapper.getObj(d);\n                var geom = obj.geometry.clone();\n                // apply mesh world transform to vertices\n                obj.updateMatrix();\n                geom.applyMatrix4(obj.matrix);\n                // color vertices\n                var color = color2ShaderArr(colorAccessor(d));\n                geom.setAttribute(\"color\", array2BufferAttr(Array(geom.getAttribute(\"position\").count).fill(color), 4));\n                return geom;\n            }));\n            var points = new THREE$f.Mesh(pointsGeometry, new THREE$f.MeshLambertMaterial({\n                color: 0xffffff,\n                transparent: true,\n                vertexColors: true\n            }));\n            points.__globeObjType = \"points\"; // Add object type\n            points.__data = state.pointsData; // Attach obj data\n            state.dataMapper.clear(); // Unbind merged points\n            emptyObject(state.scene);\n            state.scene.add(points);\n        }\n        //\n        function createObj() {\n            var obj = new THREE$f.Mesh(pointGeometry);\n            obj.__globeObjType = \"point\"; // Add object type\n            return obj;\n        }\n        function updateObj(obj, d) {\n            var applyUpdate = function applyUpdate(td) {\n                var _obj$__currentTargetD = obj.__currentTargetD = td, r = _obj$__currentTargetD.r, alt = _obj$__currentTargetD.alt, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng;\n                // position cylinder ground\n                Object.assign(obj.position, polar2Cartesian(lat, lng));\n                // orientate outwards\n                var globeCenter = state.pointsMerge ? new THREE$f.Vector3(0, 0, 0) : state.scene.localToWorld(new THREE$f.Vector3(0, 0, 0)); // translate from local to world coords\n                obj.lookAt(globeCenter);\n                // scale radius and altitude\n                obj.scale.x = obj.scale.y = Math.min(30, r) * pxPerDeg;\n                obj.scale.z = Math.max(alt * GLOBE_RADIUS, 0.1); // avoid non-invertible matrix\n            };\n            var targetD = {\n                alt: +altitudeAccessor(d),\n                r: +radiusAccessor(d),\n                lat: +latAccessor(d),\n                lng: +lngAccessor(d)\n            };\n            var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {\n                alt: -1e-3\n            });\n            if (Object.keys(targetD).some(function(k) {\n                return currentTargetD[k] !== targetD[k];\n            })) {\n                if (state.pointsMerge || !state.pointsTransitionDuration || state.pointsTransitionDuration < 0) {\n                    // set final position\n                    applyUpdate(targetD);\n                } else {\n                    // animate\n                    state.tweenGroup.add(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween(currentTargetD).to(targetD, state.pointsTransitionDuration).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Quadratic.InOut).onUpdate(applyUpdate).start());\n                }\n            }\n            if (!state.pointsMerge) {\n                // Update materials on individual points\n                var color = colorAccessor(d);\n                var opacity = color ? colorAlpha(color) : 0;\n                var showCyl = !!opacity;\n                obj.visible = showCyl;\n                if (showCyl) {\n                    if (!pointMaterials.hasOwnProperty(color)) {\n                        pointMaterials[color] = new THREE$f.MeshLambertMaterial({\n                            color: colorStr2Hex(color),\n                            transparent: opacity < 1,\n                            opacity: opacity\n                        });\n                    }\n                    obj.material = pointMaterials[color];\n                }\n            }\n        }\n    }\n});\nvar dashedLineShaders = function dashedLineShaders() {\n    return {\n        uniforms: {\n            // dash param defaults, all relative to full length\n            dashOffset: {\n                value: 0\n            },\n            dashSize: {\n                value: 1\n            },\n            gapSize: {\n                value: 0\n            },\n            dashTranslate: {\n                value: 0\n            } // used for animating the dash\n        },\n        vertexShader: \"\\n    uniform float dashTranslate; \\n\\n    attribute vec4 color;\\n    varying vec4 vColor;\\n    \\n    attribute float relDistance;\\n    varying float vRelDistance;\\n\\n    void main() {\\n      // pass through colors and distances\\n      vColor = color;\\n      vRelDistance = relDistance + dashTranslate;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n    }\\n  \",\n        fragmentShader: \"\\n    uniform float dashOffset; \\n    uniform float dashSize;\\n    uniform float gapSize; \\n    \\n    varying vec4 vColor;\\n    varying float vRelDistance;\\n    \\n    void main() {\\n      // ignore pixels in the gap\\n      if (vRelDistance < dashOffset) discard;\\n      if (mod(vRelDistance - dashOffset, dashSize + gapSize) > dashSize) discard;\\n    \\n      // set px color: [r, g, b, a], interpolated between vertices \\n      gl_FragColor = vColor; \\n    }\\n  \"\n    };\n};\nvar invisibleUndergroundShaderExtend = function invisibleUndergroundShaderExtend(shader) {\n    shader.uniforms.surfaceRadius = {\n        type: \"float\",\n        value: 0\n    };\n    shader.vertexShader = (\"attribute float surfaceRadius;\\nvarying float vSurfaceRadius;\\nvarying vec3 vPos;\\n\" + shader.vertexShader).replace(\"void main() {\", [\n        \"void main() {\",\n        \"vSurfaceRadius = surfaceRadius;\",\n        \"vPos = position;\"\n    ].join(\"\\n\"));\n    shader.fragmentShader = (\"uniform float surfaceRadius;\\nvarying float vSurfaceRadius;\\nvarying vec3 vPos;\\n\" + shader.fragmentShader).replace(\"void main() {\", [\n        \"void main() {\",\n        \"if (length(vPos) < max(surfaceRadius, vSurfaceRadius)) discard;\"\n    ].join(\"\\n\"));\n    return shader;\n};\nvar setRadiusShaderExtend = function setRadiusShaderExtend(shader) {\n    shader.vertexShader = \"\\n    attribute float r;\\n    \\n    const float PI = 3.1415926535897932384626433832795;\\n    float toRad(in float a) {\\n      return a * PI / 180.0;\\n    }\\n    \\n    vec3 Polar2Cartesian(in vec3 c) { // [lat, lng, r]\\n      float phi = toRad(90.0 - c.x);\\n      float theta = toRad(90.0 - c.y);\\n      float r = c.z;\\n      return vec3( // x,y,z\\n        r * sin(phi) * cos(theta),\\n        r * cos(phi),\\n        r * sin(phi) * sin(theta)\\n      );\\n    }\\n    \\n    vec2 Cartesian2Polar(in vec3 p) {\\n      float r = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\\n      float phi = acos(p.y / r);\\n      float theta = atan(p.z, p.x);\\n      return vec2( // lat,lng\\n        90.0 - phi * 180.0 / PI,\\n        90.0 - theta * 180.0 / PI - (theta < -PI / 2.0 ? 360.0 : 0.0)\\n      );\\n    }\\n    \".concat(shader.vertexShader.replace(\"}\", \"                  \\n        vec3 pos = Polar2Cartesian(vec3(Cartesian2Polar(position), r));\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\\n      }\\n    \"), \"\\n  \");\n    return shader;\n};\n//\nvar applyShaderExtensionToMaterial = function applyShaderExtensionToMaterial(material, extensionFn) {\n    material.onBeforeCompile = function(shader) {\n        material.userData.shader = extensionFn(shader);\n    };\n    return material;\n};\nvar setExtendedMaterialUniforms = function setExtendedMaterialUniforms(material) {\n    var uniformsFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function(u) {\n        return u;\n    };\n    if (material.userData.shader) {\n        uniformsFn(material.userData.shader.uniforms);\n    } else {\n        var curFn = material.onBeforeCompile;\n        material.onBeforeCompile = function(shader) {\n            curFn(shader);\n            uniformsFn(shader.uniforms);\n        };\n    }\n};\nvar _excluded = [\n    \"stroke\"\n];\nvar THREE$e = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    BufferGeometry: three__WEBPACK_IMPORTED_MODULE_8__.BufferGeometry,\n    CubicBezierCurve3: three__WEBPACK_IMPORTED_MODULE_8__.CubicBezierCurve3,\n    Curve: three__WEBPACK_IMPORTED_MODULE_8__.Curve,\n    Group: three__WEBPACK_IMPORTED_MODULE_8__.Group,\n    Line: three__WEBPACK_IMPORTED_MODULE_8__.Line,\n    Mesh: three__WEBPACK_IMPORTED_MODULE_8__.Mesh,\n    NormalBlending: three__WEBPACK_IMPORTED_MODULE_8__.NormalBlending,\n    QuadraticBezierCurve3: three__WEBPACK_IMPORTED_MODULE_8__.QuadraticBezierCurve3,\n    ShaderMaterial: three__WEBPACK_IMPORTED_MODULE_8__.ShaderMaterial,\n    TubeGeometry: three__WEBPACK_IMPORTED_MODULE_8__.TubeGeometry,\n    Vector3: three__WEBPACK_IMPORTED_MODULE_8__.Vector3\n};\nvar FrameTicker$2 = frame_ticker__WEBPACK_IMPORTED_MODULE_4__[\"default\"] || frame_ticker__WEBPACK_IMPORTED_MODULE_4__;\n//\nvar ArcsLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        arcsData: {\n            \"default\": []\n        },\n        arcStartLat: {\n            \"default\": \"startLat\"\n        },\n        arcStartLng: {\n            \"default\": \"startLng\"\n        },\n        arcEndLat: {\n            \"default\": \"endLat\"\n        },\n        arcEndLng: {\n            \"default\": \"endLng\"\n        },\n        arcColor: {\n            \"default\": function _default() {\n                return \"#ffffaa\";\n            }\n        },\n        // single color, array of colors or color interpolation fn\n        arcAltitude: {},\n        // in units of globe radius\n        arcAltitudeAutoScale: {\n            \"default\": 0.5\n        },\n        // scale altitude proportional to great-arc distance between the two points\n        arcStroke: {},\n        // in deg\n        arcCurveResolution: {\n            \"default\": 64,\n            triggerUpdate: false\n        },\n        // how many straight segments in the curve\n        arcCircularResolution: {\n            \"default\": 6,\n            triggerUpdate: false\n        },\n        // how many slice segments in the tube's circumference\n        arcDashLength: {\n            \"default\": 1\n        },\n        // in units of line length\n        arcDashGap: {\n            \"default\": 0\n        },\n        arcDashInitialGap: {\n            \"default\": 0\n        },\n        arcDashAnimateTime: {\n            \"default\": 0\n        },\n        // ms\n        arcsTransitionDuration: {\n            \"default\": 1000,\n            triggerUpdate: false\n        } // ms\n    },\n    methods: {\n        pauseAnimation: function pauseAnimation(state) {\n            var _state$ticker;\n            (_state$ticker = state.ticker) === null || _state$ticker === undefined || _state$ticker.pause();\n        },\n        resumeAnimation: function resumeAnimation(state) {\n            var _state$ticker2;\n            (_state$ticker2 = state.ticker) === null || _state$ticker2 === undefined || _state$ticker2.resume();\n        },\n        _destructor: function _destructor(state) {\n            var _state$ticker3;\n            state.sharedMaterial.dispose();\n            (_state$ticker3 = state.ticker) === null || _state$ticker3 === undefined || _state$ticker3.dispose();\n        }\n    },\n    stateInit: function stateInit(_ref) {\n        var tweenGroup = _ref.tweenGroup;\n        return {\n            tweenGroup: tweenGroup,\n            ticker: new FrameTicker$2(),\n            sharedMaterial: new THREE$e.ShaderMaterial(_objectSpread2(_objectSpread2({}, dashedLineShaders()), {}, {\n                transparent: true,\n                blending: THREE$e.NormalBlending\n            }))\n        };\n    },\n    init: function init(threeObj, state) {\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.dataMapper = new ThreeDigest(threeObj, {\n            objBindAttr: \"__threeObjArc\"\n        }).onCreateObj(function() {\n            var obj = new THREE$e.Group(); // populated in updateObj\n            obj.__globeObjType = \"arc\"; // Add object type\n            return obj;\n        });\n        // Kick-off dash animations\n        state.ticker.onTick.add(function(_, timeDelta) {\n            state.dataMapper.entries().map(function(_ref2) {\n                var _ref3 = _slicedToArray(_ref2, 2), obj = _ref3[1];\n                return obj;\n            }).filter(function(o) {\n                return o.children.length && o.children[0].material && o.children[0].__dashAnimateStep;\n            }).forEach(function(o) {\n                var obj = o.children[0];\n                var step = obj.__dashAnimateStep * timeDelta;\n                var curTranslate = obj.material.uniforms.dashTranslate.value % 1e9; // reset after 1B loops\n                obj.material.uniforms.dashTranslate.value = curTranslate + step;\n            });\n        });\n    },\n    update: function update(state) {\n        // Data accessors\n        var startLatAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.arcStartLat);\n        var startLngAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.arcStartLng);\n        var endLatAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.arcEndLat);\n        var endLngAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.arcEndLng);\n        var altitudeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.arcAltitude);\n        var altitudeAutoScaleAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.arcAltitudeAutoScale);\n        var strokeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.arcStroke);\n        var colorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.arcColor);\n        var dashLengthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.arcDashLength);\n        var dashGapAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.arcDashGap);\n        var dashInitialGapAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.arcDashInitialGap);\n        var dashAnimateTimeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.arcDashAnimateTime);\n        state.dataMapper.onUpdateObj(function(group, arc) {\n            var stroke = strokeAccessor(arc);\n            var useTube = stroke !== null && stroke !== undefined;\n            if (!group.children.length || useTube !== (group.children[0].type === \"Mesh\")) {\n                // create or swap object types\n                emptyObject(group);\n                var _obj = useTube ? new THREE$e.Mesh() : new THREE$e.Line(new THREE$e.BufferGeometry());\n                _obj.material = state.sharedMaterial.clone(); // Separate material instance per object to have dedicated uniforms (but shared shaders)\n                group.add(_obj);\n            }\n            var obj = group.children[0];\n            // set dash uniforms\n            Object.assign(obj.material.uniforms, {\n                dashSize: {\n                    value: dashLengthAccessor(arc)\n                },\n                gapSize: {\n                    value: dashGapAccessor(arc)\n                },\n                dashOffset: {\n                    value: dashInitialGapAccessor(arc)\n                }\n            });\n            // set dash animation step\n            var dashAnimateTime = dashAnimateTimeAccessor(arc);\n            obj.__dashAnimateStep = dashAnimateTime > 0 ? 1000 / dashAnimateTime : 0; // per second\n            // calculate vertex colors (to create gradient)\n            var vertexColorArray = calcColorVertexArray(colorAccessor(arc), // single, array of colors or interpolator\n            state.arcCurveResolution, // numSegments\n            useTube ? state.arcCircularResolution + 1 : 1 // num vertices per segment\n            );\n            // calculate vertex relative distances (for dashed lines)\n            var vertexRelDistanceArray = calcVertexRelDistances(state.arcCurveResolution, // numSegments\n            useTube ? state.arcCircularResolution + 1 : 1, // num vertices per segment\n            true // run from end to start, to animate in the correct direction\n            );\n            obj.geometry.setAttribute(\"color\", vertexColorArray);\n            obj.geometry.setAttribute(\"relDistance\", vertexRelDistanceArray);\n            var applyUpdate = function applyUpdate(td) {\n                var _group$__currentTarge = group.__currentTargetD = td, stroke = _group$__currentTarge.stroke, curveD = _objectWithoutProperties(_group$__currentTarge, _excluded);\n                var curve = calcCurve(curveD);\n                if (useTube) {\n                    obj.geometry && obj.geometry.dispose();\n                    obj.geometry = new THREE$e.TubeGeometry(curve, state.arcCurveResolution, stroke / 2, state.arcCircularResolution);\n                    obj.geometry.setAttribute(\"color\", vertexColorArray);\n                    obj.geometry.setAttribute(\"relDistance\", vertexRelDistanceArray);\n                } else {\n                    obj.geometry.setFromPoints(curve.getPoints(state.arcCurveResolution));\n                }\n            };\n            var targetD = {\n                stroke: stroke,\n                alt: altitudeAccessor(arc),\n                altAutoScale: +altitudeAutoScaleAccessor(arc),\n                startLat: +startLatAccessor(arc),\n                startLng: +startLngAccessor(arc),\n                endLat: +endLatAccessor(arc),\n                endLng: +endLngAccessor(arc)\n            };\n            var currentTargetD = group.__currentTargetD || Object.assign({}, targetD, {\n                altAutoScale: -1e-3\n            });\n            if (Object.keys(targetD).some(function(k) {\n                return currentTargetD[k] !== targetD[k];\n            })) {\n                if (!state.arcsTransitionDuration || state.arcsTransitionDuration < 0) {\n                    // set final position\n                    applyUpdate(targetD);\n                } else {\n                    // animate\n                    state.tweenGroup.add(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween(currentTargetD).to(targetD, state.arcsTransitionDuration).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Quadratic.InOut).onUpdate(applyUpdate).start());\n                }\n            }\n        }).digest(state.arcsData);\n        //\n        function calcCurve(_ref4) {\n            var alt = _ref4.alt, altAutoScale = _ref4.altAutoScale, startLat = _ref4.startLat, startLng = _ref4.startLng, endLat = _ref4.endLat, endLng = _ref4.endLng;\n            var getVec = function getVec(_ref5) {\n                var _ref6 = _slicedToArray(_ref5, 3), lng = _ref6[0], lat = _ref6[1], alt = _ref6[2];\n                var _polar2Cartesian = polar2Cartesian(lat, lng, alt), x = _polar2Cartesian.x, y = _polar2Cartesian.y, z = _polar2Cartesian.z;\n                return new THREE$e.Vector3(x, y, z);\n            };\n            //calculate curve\n            var startPnt = [\n                startLng,\n                startLat\n            ];\n            var endPnt = [\n                endLng,\n                endLat\n            ];\n            var altitude = alt;\n            (altitude === null || altitude === undefined) && // by default set altitude proportional to the great-arc distance\n            (altitude = (0,d3_geo__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(startPnt, endPnt) / 2 * altAutoScale);\n            if (altitude) {\n                var interpolate = (0,d3_geo__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(startPnt, endPnt);\n                var _map = [\n                    0.25,\n                    0.75\n                ].map(function(t) {\n                    return [].concat(_toConsumableArray(interpolate(t)), [\n                        altitude * 1.5\n                    ]);\n                }), _map2 = _slicedToArray(_map, 2), m1Pnt = _map2[0], m2Pnt = _map2[1];\n                var curve = _construct(THREE$e.CubicBezierCurve3, _toConsumableArray([\n                    startPnt,\n                    m1Pnt,\n                    m2Pnt,\n                    endPnt\n                ].map(getVec)));\n                //const mPnt = [...interpolate(0.5), altitude * 2];\n                //curve = new THREE.QuadraticBezierCurve3(...[startPnt, mPnt, endPnt].map(getVec));\n                return curve;\n            } else {\n                // ground line\n                var _alt = 0.001; // slightly above the ground to prevent occlusion\n                return calcSphereArc.apply(undefined, _toConsumableArray([\n                    [].concat(startPnt, [\n                        _alt\n                    ]),\n                    [].concat(endPnt, [\n                        _alt\n                    ])\n                ].map(getVec)));\n            }\n            //\n            function calcSphereArc(startVec, endVec) {\n                var angle = startVec.angleTo(endVec);\n                var getGreatCirclePoint = angle === 0 ? function() {\n                    return startVec.clone();\n                } // points exactly overlap\n                 : function(t) {\n                    return new THREE$e.Vector3().addVectors(startVec.clone().multiplyScalar(Math.sin((1 - t) * angle)), endVec.clone().multiplyScalar(Math.sin(t * angle))).divideScalar(Math.sin(angle));\n                };\n                var sphereArc = new THREE$e.Curve();\n                sphereArc.getPoint = getGreatCirclePoint;\n                return sphereArc;\n            }\n        }\n        function calcColorVertexArray(colors, numSegments) {\n            var numVerticesPerSegment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n            var numVerticesGroup = numSegments + 1; // one between every two segments and two at the ends\n            var getVertexColor;\n            if (colors instanceof Array || colors instanceof Function) {\n                var colorInterpolator = colors instanceof Array ? (0,d3_scale__WEBPACK_IMPORTED_MODULE_17__[\"default\"])() // array of colors, interpolate at each step\n                .domain(colors.map(function(_, idx) {\n                    return idx / (colors.length - 1);\n                })) // same number of stops as colors\n                .range(colors) : colors; // already interpolator fn\n                getVertexColor = function getVertexColor(t) {\n                    return color2ShaderArr(colorInterpolator(t), true, true);\n                };\n            } else {\n                // single color, use constant\n                var vertexColor = color2ShaderArr(colors, true, true);\n                getVertexColor = function getVertexColor() {\n                    return vertexColor;\n                };\n            }\n            var vertexColors = [];\n            for(var v = 0, l = numVerticesGroup; v < l; v++){\n                var _vertexColor = getVertexColor(v / (l - 1));\n                for(var s = 0; s < numVerticesPerSegment; s++){\n                    vertexColors.push(_vertexColor);\n                }\n            }\n            return array2BufferAttr(vertexColors, 4);\n        }\n        function calcVertexRelDistances(numSegments) {\n            var numVerticesPerSegment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n            var invert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            var numVerticesGroup = numSegments + 1; // one between every two segments and two at the ends\n            var vertexDistances = [];\n            for(var v = 0, l = numVerticesGroup; v < l; v++){\n                var relDistance = v / (l - 1);\n                for(var s = 0; s < numVerticesPerSegment; s++){\n                    vertexDistances.push(relDistance);\n                }\n            }\n            invert && vertexDistances.reverse();\n            return array2BufferAttr(vertexDistances, 1);\n        }\n    }\n});\nvar THREE$d = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    BufferGeometry: three__WEBPACK_IMPORTED_MODULE_8__.BufferGeometry,\n    Color: three__WEBPACK_IMPORTED_MODULE_8__.Color,\n    DoubleSide: three__WEBPACK_IMPORTED_MODULE_8__.DoubleSide,\n    Mesh: three__WEBPACK_IMPORTED_MODULE_8__.Mesh,\n    MeshLambertMaterial: three__WEBPACK_IMPORTED_MODULE_8__.MeshLambertMaterial,\n    Object3D: three__WEBPACK_IMPORTED_MODULE_8__.Object3D\n};\nvar bfg$1 = Object.assign({}, three_examples_jsm_utils_BufferGeometryUtils_js__WEBPACK_IMPORTED_MODULE_14__);\nvar BufferGeometryUtils$1 = bfg$1.BufferGeometryUtils || bfg$1;\n//\nvar HexBinLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        hexBinPointsData: {\n            \"default\": []\n        },\n        hexBinPointLat: {\n            \"default\": \"lat\"\n        },\n        hexBinPointLng: {\n            \"default\": \"lng\"\n        },\n        hexBinPointWeight: {\n            \"default\": 1\n        },\n        hexBinResolution: {\n            \"default\": 4\n        },\n        // 0-15. Level 0 partitions the earth in 122 (mostly) hexagonal cells. Each subsequent level sub-divides the previous in roughly 7 hexagons.\n        hexMargin: {\n            \"default\": 0.2\n        },\n        // in fraction of diameter\n        hexTopCurvatureResolution: {\n            \"default\": 5\n        },\n        // in angular degrees\n        hexTopColor: {\n            \"default\": function _default() {\n                return \"#ffffaa\";\n            }\n        },\n        hexSideColor: {\n            \"default\": function _default() {\n                return \"#ffffaa\";\n            }\n        },\n        hexAltitude: {\n            \"default\": function _default(_ref) {\n                var sumWeight = _ref.sumWeight;\n                return sumWeight * 0.01;\n            }\n        },\n        // in units of globe radius\n        hexBinMerge: {\n            \"default\": false\n        },\n        // boolean. Whether to merge all hex geometries into a single mesh for rendering performance\n        hexTransitionDuration: {\n            \"default\": 1000,\n            triggerUpdate: false\n        } // ms\n    },\n    init: function init(threeObj, state, _ref2) {\n        var tweenGroup = _ref2.tweenGroup;\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.tweenGroup = tweenGroup;\n        state.dataMapper = new ThreeDigest(threeObj, {\n            objBindAttr: \"__threeObjHexbin\"\n        });\n    },\n    update: function update(state, changedProps) {\n        // Accessors\n        var latAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexBinPointLat);\n        var lngAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexBinPointLng);\n        var weightAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexBinPointWeight);\n        var altitudeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexAltitude);\n        var topColorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexTopColor);\n        var sideColorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexSideColor);\n        var marginAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexMargin);\n        var byH3Idx = (0,index_array_by__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(state.hexBinPointsData.map(function(d) {\n            return _objectSpread2(_objectSpread2({}, d), {}, {\n                h3Idx: (0,h3_js__WEBPACK_IMPORTED_MODULE_6__.latLngToCell)(latAccessor(d), lngAccessor(d), state.hexBinResolution)\n            });\n        }), \"h3Idx\");\n        var hexBins = Object.entries(byH3Idx).map(function(_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2), h3Idx = _ref4[0], points = _ref4[1];\n            return {\n                h3Idx: h3Idx,\n                points: points,\n                sumWeight: points.reduce(function(agg, d) {\n                    return agg + +weightAccessor(d);\n                }, 0)\n            };\n        });\n        var hexMaterials = {}; // indexed by color\n        if (!state.hexBinMerge && changedProps.hasOwnProperty(\"hexBinMerge\")) {\n            emptyObject(state.scene); // Empty trailing merged objects\n        }\n        state.dataMapper.scene = state.hexBinMerge ? new THREE$d.Object3D() : state.scene; // use fake scene if merging hex points\n        state.dataMapper.id(function(d) {\n            return d.h3Idx;\n        }).onCreateObj(createObj).onUpdateObj(updateObj).digest(hexBins);\n        if (state.hexBinMerge) {\n            // merge points into a single mesh\n            var hexPointsGeometry = !hexBins.length ? new THREE$d.BufferGeometry() : (BufferGeometryUtils$1.mergeGeometries || BufferGeometryUtils$1.mergeBufferGeometries)(hexBins.map(function(d) {\n                var obj = state.dataMapper.getObj(d);\n                // use non-indexed geometry so that groups can be colored separately, otherwise different groups share vertices\n                var geom = obj.geometry.toNonIndexed();\n                // apply mesh world transform to vertices\n                obj.updateMatrix();\n                geom.applyMatrix4(obj.matrix);\n                // color vertices\n                var topColor = color2ShaderArr(topColorAccessor(d));\n                var sideColor = color2ShaderArr(sideColorAccessor(d));\n                var nVertices = geom.getAttribute(\"position\").count;\n                var topFaceIdx = geom.groups[0].count; // starting vertex index of top group\n                geom.setAttribute(\"color\", array2BufferAttr(_toConsumableArray(new Array(nVertices)).map(function(_, idx) {\n                    return idx >= topFaceIdx ? topColor : sideColor;\n                }), 4));\n                return geom;\n            }));\n            var hexMaterial = new THREE$d.MeshLambertMaterial({\n                color: 0xffffff,\n                transparent: true,\n                vertexColors: true,\n                side: THREE$d.DoubleSide\n            });\n            hexMaterial.onBeforeCompile = function(shader) {\n                hexMaterial.userData.shader = invisibleUndergroundShaderExtend(shader);\n            };\n            var hexPoints = new THREE$d.Mesh(hexPointsGeometry, hexMaterial);\n            hexPoints.__globeObjType = \"hexBinPoints\"; // Add object type\n            hexPoints.__data = hexBins; // Attach obj data\n            state.dataMapper.clear(); // Unbind merged points\n            emptyObject(state.scene);\n            state.scene.add(hexPoints);\n        }\n        //\n        function createObj(d) {\n            var obj = new THREE$d.Mesh();\n            obj.__hexCenter = (0,h3_js__WEBPACK_IMPORTED_MODULE_6__.cellToLatLng)(d.h3Idx);\n            obj.__hexGeoJson = (0,h3_js__WEBPACK_IMPORTED_MODULE_6__.cellToBoundary)(d.h3Idx, true).reverse(); // correct polygon winding\n            // stitch longitudes at the anti-meridian\n            var centerLng = obj.__hexCenter[1];\n            obj.__hexGeoJson.forEach(function(d) {\n                var edgeLng = d[0];\n                if (Math.abs(centerLng - edgeLng) > 170) {\n                    // normalize large lng distances\n                    d[0] += centerLng > edgeLng ? 360 : -360;\n                }\n            });\n            obj.__globeObjType = \"hexbin\"; // Add object type\n            return obj;\n        }\n        function updateObj(obj, d) {\n            // compute new geojson with relative margin\n            var relNum = function relNum(st, end, rat) {\n                return st - (st - end) * rat;\n            };\n            var margin = Math.max(0, Math.min(1, +marginAccessor(d)));\n            var _obj$__hexCenter = _slicedToArray(obj.__hexCenter, 2), clat = _obj$__hexCenter[0], clng = _obj$__hexCenter[1];\n            var geoJson = margin === 0 ? obj.__hexGeoJson : obj.__hexGeoJson.map(function(_ref5) {\n                var _ref6 = _slicedToArray(_ref5, 2), elng = _ref6[0], elat = _ref6[1];\n                return [\n                    [\n                        elng,\n                        clng\n                    ],\n                    [\n                        elat,\n                        clat\n                    ]\n                ].map(function(_ref7) {\n                    var _ref8 = _slicedToArray(_ref7, 2), st = _ref8[0], end = _ref8[1];\n                    return relNum(st, end, margin);\n                });\n            });\n            var topCurvatureResolution = state.hexTopCurvatureResolution;\n            obj.geometry && obj.geometry.dispose();\n            obj.geometry = new three_conic_polygon_geometry__WEBPACK_IMPORTED_MODULE_5__[\"default\"]([\n                geoJson\n            ], 0, GLOBE_RADIUS, false, true, true, topCurvatureResolution);\n            var targetD = {\n                alt: +altitudeAccessor(d)\n            };\n            var applyUpdate = function applyUpdate(td) {\n                var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt;\n                obj.scale.x = obj.scale.y = obj.scale.z = 1 + alt; // scale according to altitude\n                // update surfaceRadius per vertex\n                var vertexSurfaceRadius = GLOBE_RADIUS / (alt + 1);\n                obj.geometry.setAttribute(\"surfaceRadius\", array2BufferAttr(Array(obj.geometry.getAttribute(\"position\").count).fill(vertexSurfaceRadius), 1));\n            };\n            var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {\n                alt: -1e-3\n            });\n            if (Object.keys(targetD).some(function(k) {\n                return currentTargetD[k] !== targetD[k];\n            })) {\n                if (state.hexBinMerge || !state.hexTransitionDuration || state.hexTransitionDuration < 0) {\n                    // set final position\n                    applyUpdate(targetD);\n                } else {\n                    // animate\n                    state.tweenGroup.add(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween(currentTargetD).to(targetD, state.hexTransitionDuration).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Quadratic.InOut).onUpdate(applyUpdate).start());\n                }\n            }\n            if (!state.hexBinMerge) {\n                // Update materials on individual hex points\n                var sideColor = sideColorAccessor(d);\n                var topColor = topColorAccessor(d);\n                [\n                    sideColor,\n                    topColor\n                ].forEach(function(color) {\n                    if (!hexMaterials.hasOwnProperty(color)) {\n                        var opacity = colorAlpha(color);\n                        hexMaterials[color] = applyShaderExtensionToMaterial(new THREE$d.MeshLambertMaterial({\n                            color: colorStr2Hex(color),\n                            transparent: opacity < 1,\n                            opacity: opacity,\n                            side: THREE$d.DoubleSide\n                        }), invisibleUndergroundShaderExtend);\n                    }\n                });\n                obj.material = [\n                    sideColor,\n                    topColor\n                ].map(function(color) {\n                    return hexMaterials[color];\n                });\n            }\n        }\n    }\n});\nvar sq = function sq(x) {\n    return x * x;\n};\nfunction geoDistance(a, b) {\n    // on sphere surface, in radians\n    var sqrt = Math.sqrt;\n    var cos = Math.cos;\n    var toRad = function toRad(x) {\n        return x * Math.PI / 180;\n    };\n    var hav = function hav(x) {\n        return sq(Math.sin(x / 2));\n    };\n    var latA = toRad(a[1]);\n    var latB = toRad(b[1]);\n    var lngA = toRad(a[0]);\n    var lngB = toRad(b[0]);\n    // Haversine formula\n    return 2 * Math.asin(sqrt(hav(latB - latA) + cos(latA) * cos(latB) * hav(lngB - lngA)));\n}\nvar sqrt2PI = Math.sqrt(2 * Math.PI);\nfunction gaussianKernel(x, bw) {\n    return Math.exp(-sq(x / bw) / 2) / (bw * sqrt2PI);\n}\nvar getGeoKDE = function getGeoKDE(_ref) {\n    var _ref2 = _slicedToArray(_ref, 2), lng = _ref2[0], lat = _ref2[1];\n    var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, _ref3$lngAccessor = _ref3.lngAccessor, lngAccessor = _ref3$lngAccessor === undefined ? function(d) {\n        return d[0];\n    } : _ref3$lngAccessor, _ref3$latAccessor = _ref3.latAccessor, latAccessor = _ref3$latAccessor === undefined ? function(d) {\n        return d[1];\n    } : _ref3$latAccessor, _ref3$weightAccessor = _ref3.weightAccessor, weightAccessor = _ref3$weightAccessor === undefined ? function() {\n        return 1;\n    } : _ref3$weightAccessor, bandwidth = _ref3.bandwidth;\n    var pnt = [\n        lng,\n        lat\n    ];\n    var bwRad = bandwidth * Math.PI / 180;\n    return (0,d3_array__WEBPACK_IMPORTED_MODULE_19__[\"default\"])(data.map(function(d) {\n        var weight = weightAccessor(d);\n        if (!weight) return 0;\n        var dist = geoDistance(pnt, [\n            lngAccessor(d),\n            latAccessor(d)\n        ]);\n        return gaussianKernel(dist, bwRad) * weight;\n    }));\n};\nvar THREE$c = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    Mesh: three__WEBPACK_IMPORTED_MODULE_8__.Mesh,\n    MeshLambertMaterial: three__WEBPACK_IMPORTED_MODULE_8__.MeshLambertMaterial,\n    SphereGeometry: three__WEBPACK_IMPORTED_MODULE_8__.SphereGeometry\n};\n//\nvar RES_BW_FACTOR = 3.5; // divider of bandwidth to use in geometry resolution\nvar MIN_RESOLUTION = 0.1; // degrees\nvar BW_RADIUS_INFLUENCE = 3.5; // multiplier of bandwidth to use in octree for max radius of point influence\nvar NUM_COLORS = 100; // to sample in shader\nvar _PointsOctree_brand = /*#__PURE__*/ new WeakSet();\nvar _points = /*#__PURE__*/ new WeakMap();\nvar _pntOctree = /*#__PURE__*/ new WeakMap();\nvar _distance = /*#__PURE__*/ new WeakMap();\nvar PointsOctree = /*#__PURE__*/ function() {\n    function PointsOctree(points, neighborhoodAngularDistance) {\n        _classCallCheck(this, PointsOctree);\n        _classPrivateMethodInitSpec(this, _PointsOctree_brand);\n        _classPrivateFieldInitSpec(this, _points, undefined);\n        _classPrivateFieldInitSpec(this, _pntOctree, undefined);\n        _classPrivateFieldInitSpec(this, _distance, undefined);\n        _classPrivateFieldSet2(_points, this, points);\n        _classPrivateFieldSet2(_pntOctree, this, yaot__WEBPACK_IMPORTED_MODULE_7__());\n        _classPrivateFieldGet2(_pntOctree, this).init(points.map(function(d) {\n            return [\n                d.x,\n                d.y,\n                d.z\n            ];\n        }).flat());\n        _classPrivateFieldSet2(_distance, this, _assertClassBrand(_PointsOctree_brand, this, _getDistance).call(this, polar2Cartesian(0, 0), polar2Cartesian(0, Math.min(180, neighborhoodAngularDistance))));\n    }\n    return _createClass(PointsOctree, [\n        {\n            key: \"getNearPoints\",\n            value: function getNearPoints(x, y, z) {\n                var _this = this;\n                return _classPrivateFieldGet2(_pntOctree, this).intersectSphere(x, y, z, _classPrivateFieldGet2(_distance, this)).map(function(idx) {\n                    return _classPrivateFieldGet2(_points, _this)[idx / 3];\n                });\n            }\n        }\n    ]);\n}();\nfunction _getDistance(a, b) {\n    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) + Math.pow(a.z - b.z, 2));\n}\nvar defaultColorInterpolator = function defaultColorInterpolator(t) {\n    var c = (0,d3_color__WEBPACK_IMPORTED_MODULE_12__[\"default\"])((0,d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_20__[\"default\"])(t)); // turbo, inferno\n    c.opacity = Math.cbrt(t);\n    return c.formatRgb();\n};\nvar HeatmapsLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        heatmapsData: {\n            \"default\": []\n        },\n        heatmapPoints: {\n            \"default\": function _default(pnts) {\n                return pnts;\n            }\n        },\n        heatmapPointLat: {\n            \"default\": function _default(d) {\n                return d[0];\n            }\n        },\n        heatmapPointLng: {\n            \"default\": function _default(d) {\n                return d[1];\n            }\n        },\n        heatmapPointWeight: {\n            \"default\": 1\n        },\n        heatmapBandwidth: {\n            \"default\": 2.5\n        },\n        // Gaussian kernel bandwidth, in angular degrees\n        heatmapColorFn: {\n            \"default\": function _default() {\n                return defaultColorInterpolator;\n            }\n        },\n        heatmapColorSaturation: {\n            \"default\": 1.5\n        },\n        // multiplier for color scale max\n        heatmapBaseAltitude: {\n            \"default\": 0.01\n        },\n        // in units of globe radius\n        heatmapTopAltitude: {},\n        // in units of globe radius\n        heatmapsTransitionDuration: {\n            \"default\": 0,\n            triggerUpdate: false\n        } // ms\n    },\n    init: function init(threeObj, state, _ref) {\n        var tweenGroup = _ref.tweenGroup;\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.tweenGroup = tweenGroup;\n        state.dataMapper = new ThreeDigest(threeObj, {\n            objBindAttr: \"__threeObjHeatmap\"\n        }).onCreateObj(function() {\n            var obj = new THREE$c.Mesh(new THREE$c.SphereGeometry(GLOBE_RADIUS), applyShaderExtensionToMaterial(new THREE$c.MeshLambertMaterial({\n                vertexColors: true,\n                transparent: true\n            }), setRadiusShaderExtend));\n            obj.__globeObjType = \"heatmap\"; // Add object type\n            return obj;\n        });\n    },\n    update: function update(state) {\n        // Accessors\n        var pointsAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.heatmapPoints);\n        var latPntAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.heatmapPointLat);\n        var lngPntAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.heatmapPointLng);\n        var weightPntAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.heatmapPointWeight);\n        var bandwidthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.heatmapBandwidth);\n        var colorFnAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.heatmapColorFn);\n        var saturationAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.heatmapColorSaturation);\n        var baseAltitudeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.heatmapBaseAltitude);\n        var topAltitudeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.heatmapTopAltitude);\n        state.dataMapper.onUpdateObj(function(obj, d) {\n            // Accessors\n            var bandwidth = bandwidthAccessor(d);\n            var colorFn = colorFnAccessor(d);\n            var saturation = saturationAccessor(d);\n            var baseAlt = baseAltitudeAccessor(d);\n            var topAlt = topAltitudeAccessor(d);\n            var pnts = pointsAccessor(d).map(function(pnt) {\n                var lat = latPntAccessor(pnt);\n                var lng = lngPntAccessor(pnt);\n                var _polar2Cartesian = polar2Cartesian(lat, lng), x = _polar2Cartesian.x, y = _polar2Cartesian.y, z = _polar2Cartesian.z;\n                return {\n                    x: x,\n                    y: y,\n                    z: z,\n                    lat: lat,\n                    lng: lng,\n                    weight: weightPntAccessor(pnt)\n                };\n            });\n            // Check resolution\n            var resolution = Math.max(MIN_RESOLUTION, bandwidth / RES_BW_FACTOR);\n            var equatorNumSegments = Math.ceil(360 / (resolution || -1));\n            if (obj.geometry.parameters.widthSegments !== equatorNumSegments) {\n                obj.geometry.dispose();\n                obj.geometry = new THREE$c.SphereGeometry(GLOBE_RADIUS, equatorNumSegments, equatorNumSegments / 2);\n            }\n            // Get vertex polar coordinates\n            var vertexCoords = bufferAttr2Array(obj.geometry.getAttribute(\"position\"));\n            var vertexGeoCoords = vertexCoords.map(function(_ref2) {\n                var _ref3 = _slicedToArray(_ref2, 3), x = _ref3[0], y = _ref3[1], z = _ref3[2];\n                var _cartesian2Polar = cartesian2Polar({\n                    x: x,\n                    y: y,\n                    z: z\n                }), lng = _cartesian2Polar.lng, lat = _cartesian2Polar.lat;\n                return [\n                    lng,\n                    lat\n                ];\n            });\n            // Compute KDE\n            var pntsOctree = new PointsOctree(pnts, bandwidth * BW_RADIUS_INFLUENCE);\n            var kdeVals = vertexGeoCoords.map(function(vxCoords, idx) {\n                var _vertexCoords$idx = _slicedToArray(vertexCoords[idx], 3), x = _vertexCoords$idx[0], y = _vertexCoords$idx[1], z = _vertexCoords$idx[2];\n                return getGeoKDE(vxCoords, pntsOctree.getNearPoints(x, y, z), {\n                    latAccessor: function latAccessor(d) {\n                        return d.lat;\n                    },\n                    lngAccessor: function lngAccessor(d) {\n                        return d.lng;\n                    },\n                    weightAccessor: function weightAccessor(d) {\n                        return d.weight;\n                    },\n                    bandwidth: bandwidth\n                });\n            });\n            // Animations\n            var colors = _toConsumableArray(new Array(NUM_COLORS)).map(function(_, idx) {\n                return color2ShaderArr(colorFn(idx / (NUM_COLORS - 1)));\n            });\n            var applyUpdate = function applyUpdate(td) {\n                var _obj$__currentTargetD = obj.__currentTargetD = td, kdeVals = _obj$__currentTargetD.kdeVals, topAlt = _obj$__currentTargetD.topAlt, saturation = _obj$__currentTargetD.saturation;\n                var maxVal = (0,d3_array__WEBPACK_IMPORTED_MODULE_21__[\"default\"])(kdeVals.map(Math.abs)) || 1e-15;\n                // Set vertex colors\n                var colorScale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_22__[\"default\"])([\n                    0,\n                    maxVal / saturation\n                ], colors);\n                obj.geometry.setAttribute(\"color\", array2BufferAttr(kdeVals.map(function(v) {\n                    return colorScale(Math.abs(v));\n                }), 4));\n                // Set altitudes\n                var rScale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_17__[\"default\"])([\n                    0,\n                    maxVal\n                ], [\n                    GLOBE_RADIUS * (1 + baseAlt),\n                    GLOBE_RADIUS * (1 + (topAlt || baseAlt))\n                ]);\n                obj.geometry.setAttribute(\"r\", array2BufferAttr(kdeVals.map(rScale)));\n            };\n            var targetD = {\n                kdeVals: kdeVals,\n                topAlt: topAlt,\n                saturation: saturation\n            };\n            var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {\n                kdeVals: kdeVals.map(function() {\n                    return 0;\n                }),\n                topAlt: !topAlt ? topAlt : baseAlt,\n                saturation: 0.5\n            });\n            // do not interpolate between different length arrays\n            currentTargetD.kdeVals.length !== kdeVals.length && (currentTargetD.kdeVals = kdeVals.slice());\n            if (Object.keys(targetD).some(function(k) {\n                return currentTargetD[k] !== targetD[k];\n            })) {\n                if (!state.heatmapsTransitionDuration || state.heatmapsTransitionDuration < 0) {\n                    // set final position\n                    applyUpdate(targetD);\n                } else {\n                    // animate\n                    state.tweenGroup.add(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween(currentTargetD).to(targetD, state.heatmapsTransitionDuration).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Quadratic.InOut).onUpdate(applyUpdate).start());\n                }\n            }\n        }).digest(state.heatmapsData);\n    }\n});\nvar THREE$b = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    DoubleSide: three__WEBPACK_IMPORTED_MODULE_8__.DoubleSide,\n    Group: three__WEBPACK_IMPORTED_MODULE_8__.Group,\n    LineBasicMaterial: three__WEBPACK_IMPORTED_MODULE_8__.LineBasicMaterial,\n    LineSegments: three__WEBPACK_IMPORTED_MODULE_8__.LineSegments,\n    Mesh: three__WEBPACK_IMPORTED_MODULE_8__.Mesh,\n    MeshBasicMaterial: three__WEBPACK_IMPORTED_MODULE_8__.MeshBasicMaterial\n};\n//\nvar PolygonsLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        polygonsData: {\n            \"default\": []\n        },\n        polygonGeoJsonGeometry: {\n            \"default\": \"geometry\"\n        },\n        polygonSideColor: {\n            \"default\": function _default() {\n                return \"#ffffaa\";\n            }\n        },\n        polygonSideMaterial: {},\n        polygonCapColor: {\n            \"default\": function _default() {\n                return \"#ffffaa\";\n            }\n        },\n        polygonCapMaterial: {},\n        polygonStrokeColor: {},\n        polygonAltitude: {\n            \"default\": 0.01\n        },\n        // in units of globe radius\n        polygonCapCurvatureResolution: {\n            \"default\": 5\n        },\n        // in angular degrees\n        polygonsTransitionDuration: {\n            \"default\": 1000,\n            triggerUpdate: false\n        } // ms\n    },\n    init: function init(threeObj, state, _ref) {\n        var tweenGroup = _ref.tweenGroup;\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.tweenGroup = tweenGroup;\n        state.dataMapper = new ThreeDigest(threeObj, {\n            objBindAttr: \"__threeObjPolygon\"\n        }).id(function(d) {\n            return d.id;\n        }).onCreateObj(function() {\n            var obj = new THREE$b.Group();\n            obj.__defaultSideMaterial = applyShaderExtensionToMaterial(new THREE$b.MeshBasicMaterial({\n                side: THREE$b.DoubleSide,\n                depthWrite: true\n            }), invisibleUndergroundShaderExtend);\n            obj.__defaultCapMaterial = new THREE$b.MeshBasicMaterial({\n                side: THREE$b.DoubleSide,\n                depthWrite: true\n            });\n            // conic geometry\n            obj.add(new THREE$b.Mesh(undefined, [\n                obj.__defaultSideMaterial,\n                // side material\n                obj.__defaultCapMaterial // cap material\n            ]));\n            // polygon stroke\n            obj.add(new THREE$b.LineSegments(undefined, new THREE$b.LineBasicMaterial()));\n            obj.__globeObjType = \"polygon\"; // Add object type\n            return obj;\n        });\n    },\n    update: function update(state) {\n        // Data accessors\n        var geoJsonAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.polygonGeoJsonGeometry);\n        var altitudeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.polygonAltitude);\n        var capCurvatureResolutionAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.polygonCapCurvatureResolution);\n        var capColorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.polygonCapColor);\n        var capMaterialAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.polygonCapMaterial);\n        var sideColorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.polygonSideColor);\n        var sideMaterialAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.polygonSideMaterial);\n        var strokeColorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.polygonStrokeColor);\n        var singlePolygons = [];\n        state.polygonsData.forEach(function(polygon) {\n            var objAttrs = {\n                data: polygon,\n                capColor: capColorAccessor(polygon),\n                capMaterial: capMaterialAccessor(polygon),\n                sideColor: sideColorAccessor(polygon),\n                sideMaterial: sideMaterialAccessor(polygon),\n                strokeColor: strokeColorAccessor(polygon),\n                altitude: +altitudeAccessor(polygon),\n                capCurvatureResolution: +capCurvatureResolutionAccessor(polygon)\n            };\n            var geoJson = geoJsonAccessor(polygon);\n            var geoId = polygon.__id || \"\".concat(Math.round(Math.random() * 1e9)); // generate and stamp polygon ids to keep track in digest\n            polygon.__id = geoId;\n            if (geoJson.type === \"Polygon\") {\n                singlePolygons.push(_objectSpread2({\n                    id: \"\".concat(geoId, \"_0\"),\n                    coords: geoJson.coordinates\n                }, objAttrs));\n            } else if (geoJson.type === \"MultiPolygon\") {\n                singlePolygons.push.apply(singlePolygons, _toConsumableArray(geoJson.coordinates.map(function(coords, idx) {\n                    return _objectSpread2({\n                        id: \"\".concat(geoId, \"_\").concat(idx),\n                        coords: coords\n                    }, objAttrs);\n                })));\n            } else {\n                console.warn(\"Unsupported GeoJson geometry type: \".concat(geoJson.type, \". Skipping geometry...\"));\n            }\n        });\n        state.dataMapper.onUpdateObj(function(obj, _ref2) {\n            var coords = _ref2.coords, capColor = _ref2.capColor, capMaterial = _ref2.capMaterial, sideColor = _ref2.sideColor, sideMaterial = _ref2.sideMaterial, strokeColor = _ref2.strokeColor, altitude = _ref2.altitude, capCurvatureResolution = _ref2.capCurvatureResolution;\n            var _obj$children = _slicedToArray(obj.children, 2), conicObj = _obj$children[0], strokeObj = _obj$children[1];\n            // hide stroke if no color set\n            var addStroke = !!strokeColor;\n            strokeObj.visible = addStroke;\n            // regenerate geometries if needed\n            if (!objMatch(conicObj.geometry.parameters || {}, {\n                polygonGeoJson: coords,\n                curvatureResolution: capCurvatureResolution\n            })) {\n                conicObj.geometry && conicObj.geometry.dispose();\n                conicObj.geometry = new three_conic_polygon_geometry__WEBPACK_IMPORTED_MODULE_5__[\"default\"](coords, 0, GLOBE_RADIUS, false, true, true, capCurvatureResolution);\n            }\n            if (addStroke && (!strokeObj.geometry.parameters || strokeObj.geometry.parameters.geoJson.coordinates !== coords || strokeObj.geometry.parameters.resolution !== capCurvatureResolution)) {\n                strokeObj.geometry && strokeObj.geometry.dispose();\n                strokeObj.geometry = new three_geojson_geometry__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n                    type: \"Polygon\",\n                    coordinates: coords\n                }, GLOBE_RADIUS, capCurvatureResolution);\n            }\n            // replace side/cap materials if defined\n            conicObj.material[0] = sideMaterial || obj.__defaultSideMaterial;\n            conicObj.material[1] = capMaterial || obj.__defaultCapMaterial;\n            // update default material colors\n            [\n                !sideMaterial && sideColor,\n                !capMaterial && capColor\n            ].forEach(function(color, materialIdx) {\n                if (!color) return; // skip custom materials\n                // conic object\n                var material = conicObj.material[materialIdx];\n                var opacity = colorAlpha(color);\n                material.color.set(colorStr2Hex(color));\n                material.transparent = opacity < 1;\n                material.opacity = opacity;\n            });\n            if (addStroke) {\n                // stroke object\n                var material = strokeObj.material;\n                var opacity = colorAlpha(strokeColor);\n                material.color.set(colorStr2Hex(strokeColor));\n                material.transparent = opacity < 1;\n                material.opacity = opacity;\n            }\n            var targetD = {\n                alt: altitude\n            };\n            var applyUpdate = function applyUpdate(td) {\n                var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt;\n                conicObj.scale.x = conicObj.scale.y = conicObj.scale.z = 1 + alt;\n                addStroke && (strokeObj.scale.x = strokeObj.scale.y = strokeObj.scale.z = 1 + alt + 1e-4); // stroke slightly above the conic mesh\n                setExtendedMaterialUniforms(obj.__defaultSideMaterial, function(uniforms) {\n                    return uniforms.surfaceRadius.value = GLOBE_RADIUS / (alt + 1);\n                }); // update side material scale uniform\n            };\n            var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {\n                alt: -1e-3\n            });\n            if (Object.keys(targetD).some(function(k) {\n                return currentTargetD[k] !== targetD[k];\n            })) {\n                if (!state.polygonsTransitionDuration || state.polygonsTransitionDuration < 0 || currentTargetD.alt === targetD.alt) {\n                    // set final position\n                    applyUpdate(targetD);\n                } else {\n                    // animate\n                    state.tweenGroup.add(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween(currentTargetD).to(targetD, state.polygonsTransitionDuration).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Quadratic.InOut).onUpdate(applyUpdate).start());\n                }\n            }\n        }).digest(singlePolygons);\n    }\n});\nfunction objMatch(obj, attrs) {\n    var compFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function() {\n        return function(a, b) {\n            return a === b;\n        };\n    };\n    return Object.entries(attrs).every(function(_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2), k = _ref4[0], v = _ref4[1];\n        return obj.hasOwnProperty(k) && compFn(k)(obj[k], v);\n    });\n}\nvar THREE$a = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    BufferGeometry: three__WEBPACK_IMPORTED_MODULE_8__.BufferGeometry,\n    CircleGeometry: three__WEBPACK_IMPORTED_MODULE_8__.CircleGeometry,\n    DoubleSide: three__WEBPACK_IMPORTED_MODULE_8__.DoubleSide,\n    Mesh: three__WEBPACK_IMPORTED_MODULE_8__.Mesh,\n    MeshLambertMaterial: three__WEBPACK_IMPORTED_MODULE_8__.MeshLambertMaterial,\n    Vector3: three__WEBPACK_IMPORTED_MODULE_8__.Vector3\n};\nvar bfg = Object.assign({}, three_examples_jsm_utils_BufferGeometryUtils_js__WEBPACK_IMPORTED_MODULE_14__);\nvar BufferGeometryUtils = bfg.BufferGeometryUtils || bfg;\n//\nvar HexedPolygonsLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        hexPolygonsData: {\n            \"default\": []\n        },\n        hexPolygonGeoJsonGeometry: {\n            \"default\": \"geometry\"\n        },\n        hexPolygonColor: {\n            \"default\": function _default() {\n                return \"#ffffaa\";\n            }\n        },\n        hexPolygonAltitude: {\n            \"default\": 0.001\n        },\n        // in units of globe radius\n        hexPolygonResolution: {\n            \"default\": 3\n        },\n        // 0-15. Level 0 partitions the earth in 122 (mostly) hexagonal cells. Each subsequent level sub-divides the previous in roughly 7 hexagons.\n        hexPolygonMargin: {\n            \"default\": 0.2\n        },\n        // in fraction of hex diameter\n        hexPolygonUseDots: {\n            \"default\": false\n        },\n        // if points should be circular instead of hexagonal\n        hexPolygonCurvatureResolution: {\n            \"default\": 5\n        },\n        // in angular degrees, only relevant for hex tops\n        hexPolygonDotResolution: {\n            \"default\": 12\n        },\n        // how many slice segments in the dot circle's circumference\n        hexPolygonsTransitionDuration: {\n            \"default\": 0,\n            triggerUpdate: false\n        } // ms\n    },\n    init: function init(threeObj, state, _ref) {\n        var tweenGroup = _ref.tweenGroup;\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.tweenGroup = tweenGroup;\n        state.dataMapper = new ThreeDigest(threeObj, {\n            objBindAttr: \"__threeObjHexPolygon\"\n        }).onCreateObj(function() {\n            var obj = new THREE$a.Mesh(undefined, new THREE$a.MeshLambertMaterial({\n                side: THREE$a.DoubleSide\n            }));\n            obj.__globeObjType = \"hexPolygon\"; // Add object type\n            return obj;\n        });\n    },\n    update: function update(state) {\n        // Accessors\n        var geoJsonAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexPolygonGeoJsonGeometry);\n        var colorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexPolygonColor);\n        var altitudeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexPolygonAltitude);\n        var resolutionAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexPolygonResolution);\n        var marginAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexPolygonMargin);\n        var useDotsAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexPolygonUseDots);\n        var curvatureResolutionAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexPolygonCurvatureResolution);\n        var dotResolutionAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.hexPolygonDotResolution);\n        state.dataMapper.onUpdateObj(function(obj, d) {\n            var geoJson = geoJsonAccessor(d);\n            var h3Res = resolutionAccessor(d);\n            var alt = altitudeAccessor(d);\n            var margin = Math.max(0, Math.min(1, +marginAccessor(d)));\n            var useDots = useDotsAccessor(d);\n            var curvatureResolution = curvatureResolutionAccessor(d);\n            var dotResolution = dotResolutionAccessor(d);\n            // update material\n            var color = colorAccessor(d);\n            var opacity = colorAlpha(color);\n            obj.material.color.set(colorStr2Hex(color));\n            obj.material.transparent = opacity < 1;\n            obj.material.opacity = opacity;\n            var targetD = {\n                alt: alt,\n                margin: margin,\n                curvatureResolution: curvatureResolution\n            };\n            var memD = {\n                geoJson: geoJson,\n                h3Res: h3Res\n            };\n            var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {\n                alt: -1e-3\n            });\n            var currentMemD = obj.__currentMemD || memD;\n            if (Object.keys(targetD).some(function(k) {\n                return currentTargetD[k] !== targetD[k];\n            }) || Object.keys(memD).some(function(k) {\n                return currentMemD[k] !== memD[k];\n            })) {\n                obj.__currentMemD = memD;\n                var h3Idxs = [];\n                if (geoJson.type === \"Polygon\") {\n                    (0,h3_js__WEBPACK_IMPORTED_MODULE_6__.polygonToCells)(geoJson.coordinates, h3Res, true).forEach(function(idx) {\n                        return h3Idxs.push(idx);\n                    });\n                } else if (geoJson.type === \"MultiPolygon\") {\n                    geoJson.coordinates.forEach(function(coords) {\n                        return (0,h3_js__WEBPACK_IMPORTED_MODULE_6__.polygonToCells)(coords, h3Res, true).forEach(function(idx) {\n                            return h3Idxs.push(idx);\n                        });\n                    });\n                } else {\n                    console.warn(\"Unsupported GeoJson geometry type: \".concat(geoJson.type, \". Skipping geometry...\"));\n                }\n                var hexBins = h3Idxs.map(function(h3Idx) {\n                    var hexCenter = (0,h3_js__WEBPACK_IMPORTED_MODULE_6__.cellToLatLng)(h3Idx);\n                    var hexGeoJson = (0,h3_js__WEBPACK_IMPORTED_MODULE_6__.cellToBoundary)(h3Idx, true).reverse(); // correct polygon winding\n                    // stitch longitudes at the anti-meridian\n                    var centerLng = hexCenter[1];\n                    hexGeoJson.forEach(function(d) {\n                        var edgeLng = d[0];\n                        if (Math.abs(centerLng - edgeLng) > 170) {\n                            // normalize large lng distances\n                            d[0] += centerLng > edgeLng ? 360 : -360;\n                        }\n                    });\n                    return {\n                        h3Idx: h3Idx,\n                        hexCenter: hexCenter,\n                        hexGeoJson: hexGeoJson\n                    };\n                });\n                var applyUpdate = function applyUpdate(td) {\n                    var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt, margin = _obj$__currentTargetD.margin, curvatureResolution = _obj$__currentTargetD.curvatureResolution;\n                    obj.geometry && obj.geometry.dispose();\n                    obj.geometry = !hexBins.length ? new THREE$a.BufferGeometry() : (BufferGeometryUtils.mergeGeometries || BufferGeometryUtils.mergeBufferGeometries)(hexBins.map(function(h) {\n                        var _h$hexCenter = _slicedToArray(h.hexCenter, 2), clat = _h$hexCenter[0], clng = _h$hexCenter[1];\n                        if (useDots) {\n                            var centerPos = polar2Cartesian(clat, clng, alt);\n                            var edgePos = polar2Cartesian(h.hexGeoJson[0][1], h.hexGeoJson[0][0], alt);\n                            var r = 0.85 * (1 - margin) * new THREE$a.Vector3(centerPos.x, centerPos.y, centerPos.z).distanceTo(new THREE$a.Vector3(edgePos.x, edgePos.y, edgePos.z));\n                            var geometry = new three__WEBPACK_IMPORTED_MODULE_8__.CircleGeometry(r, dotResolution);\n                            geometry.rotateX(deg2Rad$1(-clat));\n                            geometry.rotateY(deg2Rad$1(clng));\n                            geometry.translate(centerPos.x, centerPos.y, centerPos.z);\n                            return geometry;\n                        } else {\n                            var relNum = function relNum(st, end, rat) {\n                                return st - (st - end) * rat;\n                            };\n                            // compute new geojson with relative margin\n                            var _geoJson = margin === 0 ? h.hexGeoJson : h.hexGeoJson.map(function(_ref2) {\n                                var _ref3 = _slicedToArray(_ref2, 2), elng = _ref3[0], elat = _ref3[1];\n                                return [\n                                    [\n                                        elng,\n                                        clng\n                                    ],\n                                    [\n                                        elat,\n                                        clat\n                                    ]\n                                ].map(function(_ref4) {\n                                    var _ref5 = _slicedToArray(_ref4, 2), st = _ref5[0], end = _ref5[1];\n                                    return relNum(st, end, margin);\n                                });\n                            });\n                            return new three_conic_polygon_geometry__WEBPACK_IMPORTED_MODULE_5__[\"default\"]([\n                                _geoJson\n                            ], GLOBE_RADIUS, GLOBE_RADIUS * (1 + alt), false, true, false, curvatureResolution);\n                        }\n                    }));\n                };\n                if (!state.hexPolygonsTransitionDuration || state.hexPolygonsTransitionDuration < 0) {\n                    // set final position\n                    applyUpdate(targetD);\n                } else {\n                    // animate\n                    state.tweenGroup.add(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween(currentTargetD).to(targetD, state.hexPolygonsTransitionDuration).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Quadratic.InOut).onUpdate(applyUpdate).start());\n                }\n            }\n        }).digest(state.hexPolygonsData);\n    }\n});\nvar THREE$9 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    Vector3: three__WEBPACK_IMPORTED_MODULE_8__.Vector3\n};\nfunction interpolateVectors(fromPnts, toPnts) {\n    var extendArr = function extendArr(arr, length) {\n        var repeatItem = arr[arr.length - 1];\n        return [].concat(_toConsumableArray(arr), _toConsumableArray(Array(length - arr.length).fill(repeatItem)));\n    };\n    var arrLength = Math.max(fromPnts.length, toPnts.length);\n    var interpolator = d3_interpolate__WEBPACK_IMPORTED_MODULE_23__[\"default\"].apply(undefined, _toConsumableArray([\n        fromPnts,\n        toPnts\n    ].map(function(pnts) {\n        return pnts.map(function(_ref) {\n            var x = _ref.x, y = _ref.y, z = _ref.z;\n            return [\n                x,\n                y,\n                z\n            ];\n        });\n    }).map(function(arr) {\n        return extendArr(arr, arrLength);\n    })));\n    return function(k) {\n        return k === 0 ? fromPnts : k === 1 ? toPnts : interpolator(k).map(function(_ref2) {\n            var _ref3 = _slicedToArray(_ref2, 3), x = _ref3[0], y = _ref3[1], z = _ref3[2];\n            return new THREE$9.Vector3(x, y, z);\n        });\n    };\n}\nvar THREE$8 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    BufferGeometry: three__WEBPACK_IMPORTED_MODULE_8__.BufferGeometry,\n    Color: three__WEBPACK_IMPORTED_MODULE_8__.Color,\n    Group: three__WEBPACK_IMPORTED_MODULE_8__.Group,\n    Line: three__WEBPACK_IMPORTED_MODULE_8__.Line,\n    NormalBlending: three__WEBPACK_IMPORTED_MODULE_8__.NormalBlending,\n    ShaderMaterial: three__WEBPACK_IMPORTED_MODULE_8__.ShaderMaterial,\n    Vector3: three__WEBPACK_IMPORTED_MODULE_8__.Vector3\n};\nvar FrameTicker$1 = frame_ticker__WEBPACK_IMPORTED_MODULE_4__[\"default\"] || frame_ticker__WEBPACK_IMPORTED_MODULE_4__;\n//\nvar PathsLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        pathsData: {\n            \"default\": []\n        },\n        pathPoints: {\n            \"default\": function _default(pnts) {\n                return pnts;\n            }\n        },\n        pathPointLat: {\n            \"default\": function _default(arr) {\n                return arr[0];\n            }\n        },\n        pathPointLng: {\n            \"default\": function _default(arr) {\n                return arr[1];\n            }\n        },\n        pathPointAlt: {\n            \"default\": 1e-3\n        },\n        pathResolution: {\n            \"default\": 2\n        },\n        // in deg\n        pathColor: {\n            \"default\": function _default() {\n                return \"#ffffaa\";\n            }\n        },\n        // single color, array of colors or color interpolation fn\n        pathStroke: {},\n        // in deg\n        pathDashLength: {\n            \"default\": 1\n        },\n        // in units of line length\n        pathDashGap: {\n            \"default\": 0\n        },\n        pathDashInitialGap: {\n            \"default\": 0\n        },\n        pathDashAnimateTime: {\n            \"default\": 0\n        },\n        // ms\n        pathTransitionDuration: {\n            \"default\": 1000,\n            triggerUpdate: false\n        },\n        // ms\n        rendererSize: {} // necessary to set correct fatline proportions\n    },\n    methods: {\n        pauseAnimation: function pauseAnimation(state) {\n            var _state$ticker;\n            (_state$ticker = state.ticker) === null || _state$ticker === undefined || _state$ticker.pause();\n        },\n        resumeAnimation: function resumeAnimation(state) {\n            var _state$ticker2;\n            (_state$ticker2 = state.ticker) === null || _state$ticker2 === undefined || _state$ticker2.resume();\n        },\n        _destructor: function _destructor(state) {\n            var _state$ticker3;\n            (_state$ticker3 = state.ticker) === null || _state$ticker3 === undefined || _state$ticker3.dispose();\n        }\n    },\n    stateInit: function stateInit(_ref) {\n        var tweenGroup = _ref.tweenGroup;\n        return {\n            tweenGroup: tweenGroup,\n            ticker: new FrameTicker$1(),\n            sharedMaterial: new THREE$8.ShaderMaterial(_objectSpread2(_objectSpread2({}, dashedLineShaders()), {}, {\n                transparent: true,\n                blending: THREE$8.NormalBlending\n            }))\n        };\n    },\n    init: function init(threeObj, state) {\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.dataMapper = new ThreeDigest(threeObj, {\n            objBindAttr: \"__threeObjPath\"\n        }).onCreateObj(function() {\n            var obj = new THREE$8.Group(); // populated in updateObj\n            obj.__globeObjType = \"path\"; // Add object type\n            return obj;\n        });\n        // Kick-off dash animations\n        state.ticker.onTick.add(function(_, timeDelta) {\n            state.dataMapper.entries().map(function(_ref2) {\n                var _ref3 = _slicedToArray(_ref2, 2), obj = _ref3[1];\n                return obj;\n            }).filter(function(o) {\n                return o.children.length && o.children[0].material && o.children[0].__dashAnimateStep;\n            }).forEach(function(o) {\n                var obj = o.children[0];\n                var step = obj.__dashAnimateStep * timeDelta;\n                if (obj.type === \"Line\") {\n                    var curTranslate = obj.material.uniforms.dashTranslate.value % 1e9; // reset after 1B loops\n                    obj.material.uniforms.dashTranslate.value = curTranslate + step;\n                } else if (obj.type === \"Line2\") {\n                    // fatline\n                    var offset = obj.material.dashOffset - step;\n                    var dashLength = obj.material.dashSize + obj.material.gapSize;\n                    while(offset <= -dashLength)offset += dashLength; // cycle within dash length\n                    obj.material.dashOffset = offset;\n                }\n            });\n        });\n    },\n    update: function update(state) {\n        // Data accessors\n        var pointsAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pathPoints);\n        var pointLatAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pathPointLat);\n        var pointLngAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pathPointLng);\n        var pointAltAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pathPointAlt);\n        var strokeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pathStroke);\n        var colorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pathColor);\n        var dashLengthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pathDashLength);\n        var dashGapAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pathDashGap);\n        var dashInitialGapAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pathDashInitialGap);\n        var dashAnimateTimeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.pathDashAnimateTime);\n        state.dataMapper.onUpdateObj(function(group, path) {\n            var stroke = strokeAccessor(path);\n            var useFatLine = stroke !== null && stroke !== undefined;\n            if (!group.children.length || useFatLine === (group.children[0].type === \"Line\")) {\n                // create or swap object types\n                emptyObject(group);\n                var _obj = useFatLine ? new three_examples_jsm_lines_Line2_js__WEBPACK_IMPORTED_MODULE_24__.Line2(new three_examples_jsm_lines_LineGeometry_js__WEBPACK_IMPORTED_MODULE_25__.LineGeometry(), new three_examples_jsm_lines_LineMaterial_js__WEBPACK_IMPORTED_MODULE_26__.LineMaterial()) : new THREE$8.Line(new THREE$8.BufferGeometry(), state.sharedMaterial.clone() // Separate material instance per object to have dedicated uniforms (but shared shaders)\n                );\n                group.add(_obj);\n            }\n            var obj = group.children[0];\n            var points = calcPath(pointsAccessor(path), pointLatAccessor, pointLngAccessor, pointAltAccessor, state.pathResolution);\n            // set dash animation step\n            var dashAnimateTime = dashAnimateTimeAccessor(path);\n            obj.__dashAnimateStep = dashAnimateTime > 0 ? 1000 / dashAnimateTime : 0; // per second\n            if (!useFatLine) {\n                // set dash uniforms\n                Object.assign(obj.material.uniforms, {\n                    dashSize: {\n                        value: dashLengthAccessor(path)\n                    },\n                    gapSize: {\n                        value: dashGapAccessor(path)\n                    },\n                    dashOffset: {\n                        value: dashInitialGapAccessor(path)\n                    }\n                });\n                // calculate vertex colors (to create gradient)\n                var vertexColorArray = calcColorVertexArray(colorAccessor(path), // single, array of colors or interpolator\n                points.length // numSegments\n                );\n                // calculate vertex relative distances (for dashed lines)\n                var vertexRelDistanceArray = calcVertexRelDistances(points.length, // numSegments\n                1, // num vertices per segment\n                true // run from end to start, to animate in the correct direction\n                );\n                obj.geometry.setAttribute(\"color\", vertexColorArray);\n                obj.geometry.setAttribute(\"relDistance\", vertexRelDistanceArray);\n            } else {\n                // fat lines\n                obj.material.resolution = state.rendererSize;\n                {\n                    // set dash styling\n                    var dashLength = dashLengthAccessor(path);\n                    var dashGap = dashGapAccessor(path);\n                    var dashInitialGap = dashInitialGapAccessor(path);\n                    obj.material.dashed = dashGap > 0;\n                    // temp hack to activate line dashes\n                    obj.material.dashed ? obj.material.defines.USE_DASH = \"\" : delete obj.material.defines.USE_DASH;\n                    if (obj.material.dashed) {\n                        obj.material.dashScale = 1 / calcLineDistance(points); // dash sizes relative to full line length\n                        obj.material.dashSize = dashLength;\n                        obj.material.gapSize = dashGap;\n                        obj.material.dashOffset = -dashInitialGap;\n                    }\n                }\n                {\n                    // set line colors\n                    var colors = colorAccessor(path);\n                    if (colors instanceof Array) {\n                        // calculate vertex colors (to create gradient)\n                        var _vertexColorArray = calcColorVertexArray(colorAccessor(path), // single, array of colors or interpolator\n                        points.length - 1, // numSegments\n                        1, // num vertices per segment\n                        false);\n                        obj.geometry.setColors(_vertexColorArray.array);\n                        obj.material.vertexColors = true;\n                    } else {\n                        // single color\n                        var color = colors;\n                        var opacity = colorAlpha(color);\n                        obj.material.color = new THREE$8.Color(colorStr2Hex(color));\n                        obj.material.transparent = opacity < 1;\n                        obj.material.opacity = opacity;\n                        obj.material.vertexColors = false;\n                    }\n                }\n                obj.material.needsUpdate = true;\n            }\n            // animate from start to finish by default\n            var pointsInterpolator = interpolateVectors(group.__currentTargetD && group.__currentTargetD.points || [\n                points[0]\n            ], points);\n            var applyUpdate = function applyUpdate(td) {\n                var _group$__currentTarge = group.__currentTargetD = td, stroke = _group$__currentTarge.stroke, interpolK = _group$__currentTarge.interpolK;\n                var kPoints = group.__currentTargetD.points = pointsInterpolator(interpolK);\n                if (useFatLine) {\n                    var _ref4;\n                    obj.geometry.setPositions((_ref4 = []).concat.apply(_ref4, _toConsumableArray(kPoints.map(function(_ref5) {\n                        var x = _ref5.x, y = _ref5.y, z = _ref5.z;\n                        return [\n                            x,\n                            y,\n                            z\n                        ];\n                    }))));\n                    obj.material.linewidth = stroke;\n                    // necessary for dashed lines\n                    obj.material.dashed && obj.computeLineDistances();\n                } else {\n                    obj.geometry.setFromPoints(kPoints);\n                    obj.geometry.computeBoundingSphere();\n                }\n            };\n            var targetD = {\n                stroke: stroke,\n                interpolK: 1\n            };\n            var currentTargetD = Object.assign({}, group.__currentTargetD || targetD, {\n                interpolK: 0\n            });\n            if (Object.keys(targetD).some(function(k) {\n                return currentTargetD[k] !== targetD[k];\n            })) {\n                if (!state.pathTransitionDuration || state.pathTransitionDuration < 0) {\n                    // set final position\n                    applyUpdate(targetD);\n                } else {\n                    // animate\n                    state.tweenGroup.add(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween(currentTargetD).to(targetD, state.pathTransitionDuration).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Quadratic.InOut).onUpdate(applyUpdate).start());\n                }\n            }\n        }).digest(state.pathsData);\n        //\n        function calcLineDistance(pnts) {\n            var totalDist = 0;\n            var prevPnt;\n            pnts.forEach(function(pnt) {\n                prevPnt && (totalDist += prevPnt.distanceTo(pnt));\n                prevPnt = pnt;\n            });\n            return totalDist;\n        }\n        function calcPath(points, latAccessor, lngAccessor, altAccessor, angularResolution) {\n            var getInterpolatedVals = function getInterpolatedVals(start, end, numPnts) {\n                var result = [];\n                for(var i = 1; i <= numPnts; i++){\n                    result.push(start + (end - start) * i / (numPnts + 1));\n                }\n                return result;\n            };\n            var interpolateLine = function interpolateLine() {\n                var lineCoords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n                var maxDegDistance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n                var result = [];\n                var prevPnt = null;\n                lineCoords.forEach(function(pnt) {\n                    if (prevPnt) {\n                        // cross the anti-meridian if that's the closest distance between points\n                        while(Math.abs(prevPnt[1] - pnt[1]) > 180)prevPnt[1] += 360 * (prevPnt[1] < pnt[1] ? 1 : -1);\n                        var dist = Math.sqrt(Math.pow(pnt[0] - prevPnt[0], 2) + Math.pow(pnt[1] - prevPnt[1], 2));\n                        if (dist > maxDegDistance) {\n                            var numAdditionalPnts = Math.floor(dist / maxDegDistance);\n                            var lats = getInterpolatedVals(prevPnt[0], pnt[0], numAdditionalPnts);\n                            var lngs = getInterpolatedVals(prevPnt[1], pnt[1], numAdditionalPnts);\n                            var alts = getInterpolatedVals(prevPnt[2], pnt[2], numAdditionalPnts);\n                            for(var i = 0, len = lats.length; i < len; i++){\n                                result.push([\n                                    lats[i],\n                                    lngs[i],\n                                    alts[i]\n                                ]);\n                            }\n                        }\n                    }\n                    result.push(prevPnt = pnt);\n                });\n                return result;\n            };\n            var getVec = function getVec(_ref6) {\n                var _ref7 = _slicedToArray(_ref6, 3), lat = _ref7[0], lng = _ref7[1], alt = _ref7[2];\n                var _polar2Cartesian = polar2Cartesian(lat, lng, alt), x = _polar2Cartesian.x, y = _polar2Cartesian.y, z = _polar2Cartesian.z;\n                return new THREE$8.Vector3(x, y, z);\n            };\n            return interpolateLine(points.map(function(pnt) {\n                return [\n                    latAccessor(pnt),\n                    lngAccessor(pnt),\n                    altAccessor(pnt)\n                ];\n            }), angularResolution).map(getVec);\n        }\n        function calcColorVertexArray(colors, numSegments) {\n            var numVerticesPerSegment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n            var includeAlpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n            var numVerticesGroup = numSegments + 1; // one between every two segments and two at the ends\n            var getVertexColor;\n            if (colors instanceof Array || colors instanceof Function) {\n                var colorInterpolator = colors instanceof Array ? (0,d3_scale__WEBPACK_IMPORTED_MODULE_17__[\"default\"])() // array of colors, interpolate at each step\n                .domain(colors.map(function(_, idx) {\n                    return idx / (colors.length - 1);\n                })) // same number of stops as colors\n                .range(colors) : colors; // already interpolator fn\n                getVertexColor = function getVertexColor(t) {\n                    return color2ShaderArr(colorInterpolator(t), includeAlpha, true);\n                };\n            } else {\n                // single color, use constant\n                var vertexColor = color2ShaderArr(colors, includeAlpha, true);\n                getVertexColor = function getVertexColor() {\n                    return vertexColor;\n                };\n            }\n            var vertexColors = [];\n            for(var v = 0, l = numVerticesGroup; v < l; v++){\n                var _vertexColor = getVertexColor(v / (l - 1));\n                for(var s = 0; s < numVerticesPerSegment; s++){\n                    vertexColors.push(_vertexColor);\n                }\n            }\n            return array2BufferAttr(vertexColors, includeAlpha ? 4 : 3);\n        }\n        function calcVertexRelDistances(numSegments) {\n            var numVerticesPerSegment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n            var invert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            var numVerticesGroup = numSegments + 1; // one between every two segments and two at the ends\n            var vertexDistances = [];\n            for(var v = 0, l = numVerticesGroup; v < l; v++){\n                var relDistance = v / (l - 1);\n                for(var s = 0; s < numVerticesPerSegment; s++){\n                    vertexDistances.push(relDistance);\n                }\n            }\n            invert && vertexDistances.reverse();\n            return array2BufferAttr(vertexDistances, 1);\n        }\n    }\n});\nvar THREE$7 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    Euler: three__WEBPACK_IMPORTED_MODULE_8__.Euler,\n    Mesh: three__WEBPACK_IMPORTED_MODULE_8__.Mesh,\n    MeshLambertMaterial: three__WEBPACK_IMPORTED_MODULE_8__.MeshLambertMaterial,\n    SphereGeometry: three__WEBPACK_IMPORTED_MODULE_8__.SphereGeometry\n};\n//\nvar TilesLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        tilesData: {\n            \"default\": []\n        },\n        tileLat: {\n            \"default\": \"lat\"\n        },\n        // tile centroid\n        tileLng: {\n            \"default\": \"lng\"\n        },\n        tileAltitude: {\n            \"default\": 0.01\n        },\n        // in units of globe radius\n        tileWidth: {\n            \"default\": 1\n        },\n        // in lng degrees\n        tileHeight: {\n            \"default\": 1\n        },\n        // in lat degrees\n        tileUseGlobeProjection: {\n            \"default\": true\n        },\n        // whether to size tiles relative to the globe coordinate system, or independently\n        tileMaterial: {\n            \"default\": function _default() {\n                return new THREE$7.MeshLambertMaterial({\n                    color: \"#ffbb88\",\n                    opacity: 0.4,\n                    transparent: true\n                });\n            }\n        },\n        tileCurvatureResolution: {\n            \"default\": 5\n        },\n        // in angular degrees\n        tilesTransitionDuration: {\n            \"default\": 1000,\n            triggerUpdate: false\n        } // ms\n    },\n    init: function init(threeObj, state, _ref) {\n        var tweenGroup = _ref.tweenGroup;\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.tweenGroup = tweenGroup;\n        state.dataMapper = new ThreeDigest(threeObj, {\n            objBindAttr: \"__threeObjTile\"\n        }).onCreateObj(function() {\n            var obj = new THREE$7.Mesh();\n            obj.__globeObjType = \"tile\"; // Add object type\n            return obj;\n        });\n    },\n    update: function update(state) {\n        // Data accessors\n        var latAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.tileLat);\n        var lngAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.tileLng);\n        var altitudeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.tileAltitude);\n        var widthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.tileWidth);\n        var heightAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.tileHeight);\n        var useGlobeProjectionAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.tileUseGlobeProjection);\n        var materialAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.tileMaterial);\n        var curvatureResolutionAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.tileCurvatureResolution);\n        state.dataMapper.onUpdateObj(function(obj, d) {\n            obj.material = materialAccessor(d); // set material\n            var useGlobeProjection = useGlobeProjectionAccessor(d);\n            var curvatureResolution = curvatureResolutionAccessor(d);\n            // animations\n            var applyPosition = function applyPosition(td) {\n                var _obj$__currentTargetD = obj.__currentTargetD = td, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng, alt = _obj$__currentTargetD.alt, width = _obj$__currentTargetD.width, height = _obj$__currentTargetD.height;\n                var rotLng = deg2Rad(lng);\n                var rotLat = deg2Rad(-lat);\n                obj.geometry && obj.geometry.dispose();\n                obj.geometry = new THREE$7.SphereGeometry(GLOBE_RADIUS * (1 + alt), Math.ceil(width / (curvatureResolution || -1)), Math.ceil(height / (curvatureResolution || -1)), deg2Rad(90 - width / 2) + (useGlobeProjection ? rotLng : 0), deg2Rad(width), deg2Rad(90 - height / 2) + (useGlobeProjection ? rotLat : 0), deg2Rad(height));\n                if (!useGlobeProjection) {\n                    // rotate obj instead. order matters, rotate longitudinally first.\n                    obj.setRotationFromEuler(new THREE$7.Euler(rotLat, rotLng, 0, \"YXZ\"));\n                }\n            };\n            var targetD = {\n                lat: +latAccessor(d),\n                lng: +lngAccessor(d),\n                alt: +altitudeAccessor(d),\n                width: +widthAccessor(d),\n                height: +heightAccessor(d)\n            };\n            var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {\n                width: 0,\n                height: 0\n            });\n            if (Object.keys(targetD).some(function(k) {\n                return currentTargetD[k] !== targetD[k];\n            })) {\n                if (!state.tilesTransitionDuration || state.tilesTransitionDuration < 0) {\n                    // set final position\n                    applyPosition(targetD);\n                } else {\n                    // animate\n                    state.tweenGroup.add(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween(currentTargetD).to(targetD, state.tilesTransitionDuration).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Quadratic.InOut).onUpdate(applyPosition).start());\n                }\n            }\n        }).digest(state.tilesData);\n    }\n});\nvar deg2Rad = function deg2Rad(deg) {\n    return deg * Math.PI / 180;\n};\nvar THREE$6 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    BufferGeometry: three__WEBPACK_IMPORTED_MODULE_8__.BufferGeometry,\n    Color: three__WEBPACK_IMPORTED_MODULE_8__.Color,\n    Points: three__WEBPACK_IMPORTED_MODULE_8__.Points,\n    PointsMaterial: three__WEBPACK_IMPORTED_MODULE_8__.PointsMaterial\n};\n//\nvar ParticlesLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        particlesData: {\n            \"default\": []\n        },\n        particlesList: {\n            \"default\": function _default(d) {\n                return d;\n            }\n        },\n        // arrays of arrays\n        particleLat: {\n            \"default\": \"lat\"\n        },\n        particleLng: {\n            \"default\": \"lng\"\n        },\n        particleAltitude: {\n            \"default\": 0.01\n        },\n        // in units of globe radius\n        particlesSize: {\n            \"default\": 0.5\n        },\n        particlesSizeAttenuation: {\n            \"default\": true\n        },\n        particlesColor: {\n            \"default\": function _default() {\n                return \"white\";\n            }\n        },\n        particlesTexture: {}\n    },\n    init: function init(threeObj, state) {\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.dataMapper = new ThreeDigest(threeObj, {\n            objBindAttr: \"__threeObjParticles\"\n        }).onCreateObj(function() {\n            var obj = new THREE$6.Points(new THREE$6.BufferGeometry(), new THREE$6.PointsMaterial());\n            obj.__globeObjType = \"particles\"; // Add object type\n            return obj;\n        }).onUpdateObj(function(obj, d) {\n            // Data accessors\n            var particlesListAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.particlesList);\n            var latAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.particleLat);\n            var lngAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.particleLng);\n            var altitudeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.particleAltitude);\n            obj.geometry.setAttribute(\"position\", array2BufferAttr(particlesListAccessor(d).map(function(p) {\n                return Object.values(polar2Cartesian(latAccessor(p), lngAccessor(p), altitudeAccessor(p)));\n            }), 3));\n        });\n    },\n    update: function update(state, changedProps) {\n        if ([\n            \"particlesData\",\n            \"particlesList\",\n            \"particleLat\",\n            \"particleLng\",\n            \"particleAltitude\"\n        ].some(function(p) {\n            return changedProps.hasOwnProperty(p);\n        })) {\n            state.dataMapper.digest(state.particlesData);\n        }\n        // Data accessors\n        var colorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.particlesColor);\n        var sizeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.particlesSize);\n        var sizeAttenuationAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.particlesSizeAttenuation);\n        var textureAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.particlesTexture);\n        state.dataMapper.entries().forEach(function(_ref) {\n            var _ref2 = _slicedToArray(_ref, 2), d = _ref2[0], obj = _ref2[1];\n            obj.material.size = sizeAccessor(d);\n            obj.material.sizeAttenuation = sizeAttenuationAccessor(d);\n            if (!state.particlesTexture) {\n                // Plain color\n                var color = colorAccessor(d);\n                var opacity = colorAlpha(color);\n                obj.material.color = new THREE$6.Color(colorStr2Hex(color));\n                obj.material.transparent = opacity < 1;\n                obj.material.opacity = opacity;\n            } else {\n                obj.material.map = textureAccessor(d);\n                obj.material.color = null;\n                obj.material.opacity = 1;\n                obj.material.needsUpdate = true;\n            }\n        });\n    }\n});\nvar THREE$5 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    BufferGeometry: three__WEBPACK_IMPORTED_MODULE_8__.BufferGeometry\n};\nvar CircleLineGeometry = /*#__PURE__*/ function(_THREE$BufferGeometry) {\n    function CircleLineGeometry() {\n        var _this;\n        var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        var segmentCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n        _classCallCheck(this, CircleLineGeometry);\n        _this = _callSuper(this, CircleLineGeometry);\n        _this.type = \"CircleLineGeometry\";\n        _this.parameters = {\n            radius: radius,\n            segmentCount: segmentCount\n        };\n        var points = [];\n        for(var i = 0; i <= segmentCount; i++){\n            var theta = (i / segmentCount - 0.25) * Math.PI * 2;\n            points.push({\n                x: Math.cos(theta) * radius,\n                y: Math.sin(theta) * radius,\n                z: 0\n            });\n        }\n        _this.setFromPoints(points);\n        return _this;\n    }\n    _inherits(CircleLineGeometry, _THREE$BufferGeometry);\n    return _createClass(CircleLineGeometry);\n}(THREE$5.BufferGeometry);\nvar THREE$4 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    Color: three__WEBPACK_IMPORTED_MODULE_8__.Color,\n    Group: three__WEBPACK_IMPORTED_MODULE_8__.Group,\n    Line: three__WEBPACK_IMPORTED_MODULE_8__.Line,\n    LineBasicMaterial: three__WEBPACK_IMPORTED_MODULE_8__.LineBasicMaterial,\n    Vector3: three__WEBPACK_IMPORTED_MODULE_8__.Vector3\n};\nvar FrameTicker = frame_ticker__WEBPACK_IMPORTED_MODULE_4__[\"default\"] || frame_ticker__WEBPACK_IMPORTED_MODULE_4__;\nvar RingsLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        ringsData: {\n            \"default\": []\n        },\n        ringLat: {\n            \"default\": \"lat\"\n        },\n        ringLng: {\n            \"default\": \"lng\"\n        },\n        ringAltitude: {\n            \"default\": 1.5e-3\n        },\n        ringColor: {\n            \"default\": function _default() {\n                return \"#ffffaa\";\n            },\n            triggerUpdate: false\n        },\n        // single color, array of colors or color interpolation fn\n        ringResolution: {\n            \"default\": 64,\n            triggerUpdate: false\n        },\n        // how many slice segments in each circle's circumference\n        ringMaxRadius: {\n            \"default\": 2,\n            triggerUpdate: false\n        },\n        // degrees\n        ringPropagationSpeed: {\n            \"default\": 1,\n            triggerUpdate: false\n        },\n        // degrees/s\n        ringRepeatPeriod: {\n            \"default\": 700,\n            triggerUpdate: false\n        } // ms\n    },\n    methods: {\n        pauseAnimation: function pauseAnimation(state) {\n            var _state$ticker;\n            (_state$ticker = state.ticker) === null || _state$ticker === undefined || _state$ticker.pause();\n        },\n        resumeAnimation: function resumeAnimation(state) {\n            var _state$ticker2;\n            (_state$ticker2 = state.ticker) === null || _state$ticker2 === undefined || _state$ticker2.resume();\n        },\n        _destructor: function _destructor(state) {\n            var _state$ticker3;\n            (_state$ticker3 = state.ticker) === null || _state$ticker3 === undefined || _state$ticker3.dispose();\n        }\n    },\n    init: function init(threeObj, state, _ref) {\n        var tweenGroup = _ref.tweenGroup;\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.tweenGroup = tweenGroup;\n        state.dataMapper = new ThreeDigest(threeObj, {\n            objBindAttr: \"__threeObjRing\",\n            removeDelay: 30000 // wait until all rings are gone\n        }).onCreateObj(function() {\n            var obj = new THREE$4.Group();\n            obj.__globeObjType = \"ring\"; // Add object type\n            return obj;\n        });\n        state.ticker = new FrameTicker();\n        state.ticker.onTick.add(function(time) {\n            if (!state.ringsData.length) return;\n            // Data accessors\n            var colorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.ringColor);\n            var altitudeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.ringAltitude);\n            var maxRadiusAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.ringMaxRadius);\n            var propagationSpeedAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.ringPropagationSpeed);\n            var repeatPeriodAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.ringRepeatPeriod);\n            state.dataMapper.entries().filter(function(_ref2) {\n                var _ref3 = _slicedToArray(_ref2, 2), o = _ref3[1];\n                return o;\n            }).forEach(function(_ref4) {\n                var _ref5 = _slicedToArray(_ref4, 2), d = _ref5[0], obj = _ref5[1];\n                if ((obj.__nextRingTime || 0) <= time) {\n                    // time to add a new ring\n                    var periodSecs = repeatPeriodAccessor(d) / 1000;\n                    obj.__nextRingTime = time + (periodSecs <= 0 ? Infinity : periodSecs);\n                    var circleObj = new THREE$4.Line(new CircleLineGeometry(1, state.ringResolution), new THREE$4.LineBasicMaterial());\n                    var colors = colorAccessor(d);\n                    var isMultiColor = colors instanceof Array || colors instanceof Function;\n                    var colorInterpolator;\n                    if (!isMultiColor) {\n                        // set only once\n                        circleObj.material.color = new THREE$4.Color(colorStr2Hex(colors));\n                        setMaterialOpacity(circleObj.material, colorAlpha(colors));\n                    } else {\n                        if (colors instanceof Array) {\n                            colorInterpolator = (0,d3_scale__WEBPACK_IMPORTED_MODULE_17__[\"default\"])().domain(colors.map(function(_, idx) {\n                                return idx / (colors.length - 1);\n                            })) // same number of stops as colors\n                            .range(colors);\n                            circleObj.material.transparent = colors.some(function(c) {\n                                return colorAlpha(c) < 1;\n                            });\n                        } else {\n                            colorInterpolator = colors;\n                            circleObj.material.transparent = true;\n                        }\n                    }\n                    var curveR = GLOBE_RADIUS * (1 + altitudeAccessor(d));\n                    var maxRadius = maxRadiusAccessor(d); // in degrees\n                    var maxAngle = maxRadius * Math.PI / 180; // in radians\n                    var propagationSpeed = propagationSpeedAccessor(d);\n                    var isReverse = propagationSpeed <= 0;\n                    var updateFn = function updateFn(_ref6) {\n                        var t = _ref6.t;\n                        var ang = (isReverse ? 1 - t : t) * maxAngle;\n                        circleObj.scale.x = circleObj.scale.y = curveR * Math.sin(ang);\n                        circleObj.position.z = curveR * (1 - Math.cos(ang));\n                        if (isMultiColor) {\n                            var color = colorInterpolator(t);\n                            circleObj.material.color = new THREE$4.Color(colorStr2Hex(color));\n                            circleObj.material.transparent && (circleObj.material.opacity = colorAlpha(color));\n                        }\n                    };\n                    if (propagationSpeed === 0) {\n                        updateFn({\n                            t: 0\n                        });\n                        obj.add(circleObj);\n                    } else {\n                        var transitionTime = Math.abs(maxRadius / propagationSpeed) * 1000;\n                        state.tweenGroup.add(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween({\n                            t: 0\n                        }).to({\n                            t: 1\n                        }, transitionTime).onUpdate(updateFn).onStart(function() {\n                            return obj.add(circleObj);\n                        }).onComplete(function() {\n                            obj.remove(circleObj);\n                            _deallocate(circleObj);\n                        }).start());\n                    }\n                }\n            });\n        });\n    },\n    update: function update(state) {\n        // Data accessors\n        var latAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.ringLat);\n        var lngAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.ringLng);\n        var altitudeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.ringAltitude);\n        var globeCenter = state.scene.localToWorld(new THREE$4.Vector3(0, 0, 0)); // translate from local to world coords\n        state.dataMapper.onUpdateObj(function(obj, d) {\n            var lat = latAccessor(d);\n            var lng = lngAccessor(d);\n            var alt = altitudeAccessor(d);\n            // position & orientate inwards\n            Object.assign(obj.position, polar2Cartesian(lat, lng, alt));\n            obj.lookAt(globeCenter);\n        }).digest(state.ringsData);\n    }\n});\nvar glyphs = {\n    \"0\": {\n        x_min: 73,\n        x_max: 715,\n        ha: 792,\n        o: \"m 394 -29 q 153 129 242 -29 q 73 479 73 272 q 152 829 73 687 q 394 989 241 989 q 634 829 545 989 q 715 479 715 684 q 635 129 715 270 q 394 -29 546 -29 m 394 89 q 546 211 489 89 q 598 479 598 322 q 548 748 598 640 q 394 871 491 871 q 241 748 298 871 q 190 479 190 637 q 239 211 190 319 q 394 89 296 89 \"\n    },\n    \"1\": {\n        x_min: 215.671875,\n        x_max: 574,\n        ha: 792,\n        o: \"m 574 0 l 442 0 l 442 697 l 215 697 l 215 796 q 386 833 330 796 q 475 986 447 875 l 574 986 l 574 0 \"\n    },\n    \"2\": {\n        x_min: 59,\n        x_max: 731,\n        ha: 792,\n        o: \"m 731 0 l 59 0 q 197 314 59 188 q 457 487 199 315 q 598 691 598 580 q 543 819 598 772 q 411 867 488 867 q 272 811 328 867 q 209 630 209 747 l 81 630 q 182 901 81 805 q 408 986 271 986 q 629 909 536 986 q 731 694 731 826 q 613 449 731 541 q 378 316 495 383 q 201 122 235 234 l 731 122 l 731 0 \"\n    },\n    \"3\": {\n        x_min: 54,\n        x_max: 737,\n        ha: 792,\n        o: \"m 737 284 q 635 55 737 141 q 399 -25 541 -25 q 156 52 248 -25 q 54 308 54 140 l 185 308 q 245 147 185 202 q 395 96 302 96 q 539 140 484 96 q 602 280 602 190 q 510 429 602 390 q 324 454 451 454 l 324 565 q 487 584 441 565 q 565 719 565 617 q 515 835 565 791 q 395 879 466 879 q 255 824 307 879 q 203 661 203 769 l 78 661 q 166 909 78 822 q 387 992 250 992 q 603 921 513 992 q 701 723 701 844 q 669 607 701 656 q 578 524 637 558 q 696 434 655 499 q 737 284 737 369 \"\n    },\n    \"4\": {\n        x_min: 48,\n        x_max: 742.453125,\n        ha: 792,\n        o: \"m 742 243 l 602 243 l 602 0 l 476 0 l 476 243 l 48 243 l 48 368 l 476 958 l 602 958 l 602 354 l 742 354 l 742 243 m 476 354 l 476 792 l 162 354 l 476 354 \"\n    },\n    \"5\": {\n        x_min: 54.171875,\n        x_max: 738,\n        ha: 792,\n        o: \"m 738 314 q 626 60 738 153 q 382 -23 526 -23 q 155 47 248 -23 q 54 256 54 125 l 183 256 q 259 132 204 174 q 382 91 314 91 q 533 149 471 91 q 602 314 602 213 q 538 469 602 411 q 386 528 475 528 q 284 506 332 528 q 197 439 237 484 l 81 439 l 159 958 l 684 958 l 684 840 l 254 840 l 214 579 q 306 627 258 612 q 407 643 354 643 q 636 552 540 643 q 738 314 738 457 \"\n    },\n    \"6\": {\n        x_min: 53,\n        x_max: 739,\n        ha: 792,\n        o: \"m 739 312 q 633 62 739 162 q 400 -31 534 -31 q 162 78 257 -31 q 53 439 53 206 q 178 859 53 712 q 441 986 284 986 q 643 912 559 986 q 732 713 732 833 l 601 713 q 544 830 594 786 q 426 875 494 875 q 268 793 331 875 q 193 517 193 697 q 301 597 240 570 q 427 624 362 624 q 643 540 552 624 q 739 312 739 451 m 603 298 q 540 461 603 400 q 404 516 484 516 q 268 461 323 516 q 207 300 207 401 q 269 137 207 198 q 405 83 325 83 q 541 137 486 83 q 603 298 603 197 \"\n    },\n    \"7\": {\n        x_min: 58.71875,\n        x_max: 730.953125,\n        ha: 792,\n        o: \"m 730 839 q 469 448 560 641 q 335 0 378 255 l 192 0 q 328 441 235 252 q 593 830 421 630 l 58 830 l 58 958 l 730 958 l 730 839 \"\n    },\n    \"8\": {\n        x_min: 55,\n        x_max: 736,\n        ha: 792,\n        o: \"m 571 527 q 694 424 652 491 q 736 280 736 358 q 648 71 736 158 q 395 -26 551 -26 q 142 69 238 -26 q 55 279 55 157 q 96 425 55 359 q 220 527 138 491 q 120 615 153 562 q 88 726 88 668 q 171 904 88 827 q 395 986 261 986 q 618 905 529 986 q 702 727 702 830 q 670 616 702 667 q 571 527 638 565 m 394 565 q 519 610 475 565 q 563 717 563 655 q 521 823 563 781 q 392 872 474 872 q 265 824 312 872 q 224 720 224 783 q 265 613 224 656 q 394 565 312 565 m 395 91 q 545 150 488 91 q 597 280 597 204 q 546 408 597 355 q 395 465 492 465 q 244 408 299 465 q 194 280 194 356 q 244 150 194 203 q 395 91 299 91 \"\n    },\n    \"9\": {\n        x_min: 53,\n        x_max: 739,\n        ha: 792,\n        o: \"m 739 524 q 619 94 739 241 q 362 -32 516 -32 q 150 47 242 -32 q 59 244 59 126 l 191 244 q 246 129 191 176 q 373 82 301 82 q 526 161 466 82 q 597 440 597 255 q 363 334 501 334 q 130 432 216 334 q 53 650 53 521 q 134 880 53 786 q 383 986 226 986 q 659 841 566 986 q 739 524 739 719 m 388 449 q 535 514 480 449 q 585 658 585 573 q 535 805 585 744 q 388 873 480 873 q 242 809 294 873 q 191 658 191 745 q 239 514 191 572 q 388 449 292 449 \"\n    },\n    \"ο\": {\n        x_min: 0,\n        x_max: 712,\n        ha: 815,\n        o: \"m 356 -25 q 96 88 192 -25 q 0 368 0 201 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 \"\n    },\n    S: {\n        x_min: 0,\n        x_max: 788,\n        ha: 890,\n        o: \"m 788 291 q 662 54 788 144 q 397 -26 550 -26 q 116 68 226 -26 q 0 337 0 168 l 131 337 q 200 152 131 220 q 384 85 269 85 q 557 129 479 85 q 650 270 650 183 q 490 429 650 379 q 194 513 341 470 q 33 739 33 584 q 142 964 33 881 q 388 1041 242 1041 q 644 957 543 1041 q 756 716 756 867 l 625 716 q 561 874 625 816 q 395 933 497 933 q 243 891 309 933 q 164 759 164 841 q 325 609 164 656 q 625 526 475 568 q 788 291 788 454 \"\n    },\n    \"\\xa6\": {\n        x_min: 343,\n        x_max: 449,\n        ha: 792,\n        o: \"m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 \"\n    },\n    \"/\": {\n        x_min: 183.25,\n        x_max: 608.328125,\n        ha: 792,\n        o: \"m 608 1041 l 266 -129 l 183 -129 l 520 1041 l 608 1041 \"\n    },\n    \"Τ\": {\n        x_min: -0.4375,\n        x_max: 777.453125,\n        ha: 839,\n        o: \"m 777 893 l 458 893 l 458 0 l 319 0 l 319 892 l 0 892 l 0 1013 l 777 1013 l 777 893 \"\n    },\n    y: {\n        x_min: 0,\n        x_max: 684.78125,\n        ha: 771,\n        o: \"m 684 738 l 388 -83 q 311 -216 356 -167 q 173 -279 252 -279 q 97 -266 133 -279 l 97 -149 q 132 -155 109 -151 q 168 -160 155 -160 q 240 -114 213 -160 q 274 -26 248 -98 l 0 738 l 137 737 l 341 139 l 548 737 l 684 738 \"\n    },\n    \"Π\": {\n        x_min: 0,\n        x_max: 803,\n        ha: 917,\n        o: \"m 803 0 l 667 0 l 667 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 803 1012 l 803 0 \"\n    },\n    \"ΐ\": {\n        x_min: -111,\n        x_max: 339,\n        ha: 361,\n        o: \"m 339 800 l 229 800 l 229 925 l 339 925 l 339 800 m -1 800 l -111 800 l -111 925 l -1 925 l -1 800 m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 m 302 1040 l 113 819 l 30 819 l 165 1040 l 302 1040 \"\n    },\n    g: {\n        x_min: 0,\n        x_max: 686,\n        ha: 838,\n        o: \"m 686 34 q 586 -213 686 -121 q 331 -306 487 -306 q 131 -252 216 -306 q 31 -84 31 -190 l 155 -84 q 228 -174 166 -138 q 345 -207 284 -207 q 514 -109 454 -207 q 564 89 564 -27 q 461 6 521 36 q 335 -23 401 -23 q 88 100 184 -23 q 0 370 0 215 q 87 634 0 522 q 330 758 183 758 q 457 728 398 758 q 564 644 515 699 l 564 737 l 686 737 l 686 34 m 582 367 q 529 560 582 481 q 358 652 468 652 q 189 561 250 652 q 135 369 135 482 q 189 176 135 255 q 361 85 251 85 q 529 176 468 85 q 582 367 582 255 \"\n    },\n    \"\\xb2\": {\n        x_min: 0,\n        x_max: 442,\n        ha: 539,\n        o: \"m 442 383 l 0 383 q 91 566 0 492 q 260 668 176 617 q 354 798 354 727 q 315 875 354 845 q 227 905 277 905 q 136 869 173 905 q 99 761 99 833 l 14 761 q 82 922 14 864 q 232 974 141 974 q 379 926 316 974 q 442 797 442 878 q 351 635 442 704 q 183 539 321 611 q 92 455 92 491 l 442 455 l 442 383 \"\n    },\n    \"–\": {\n        x_min: 0,\n        x_max: 705.5625,\n        ha: 803,\n        o: \"m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 \"\n    },\n    \"Κ\": {\n        x_min: 0,\n        x_max: 819.5625,\n        ha: 893,\n        o: \"m 819 0 l 650 0 l 294 509 l 139 356 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 \"\n    },\n    \"ƒ\": {\n        x_min: -46.265625,\n        x_max: 392,\n        ha: 513,\n        o: \"m 392 651 l 259 651 l 79 -279 l -46 -278 l 134 651 l 14 651 l 14 751 l 135 751 q 151 948 135 900 q 304 1041 185 1041 q 334 1040 319 1041 q 392 1034 348 1039 l 392 922 q 337 931 360 931 q 271 883 287 931 q 260 793 260 853 l 260 751 l 392 751 l 392 651 \"\n    },\n    e: {\n        x_min: 0,\n        x_max: 714,\n        ha: 813,\n        o: \"m 714 326 l 140 326 q 200 157 140 227 q 359 87 260 87 q 488 130 431 87 q 561 245 545 174 l 697 245 q 577 48 670 123 q 358 -26 484 -26 q 97 85 195 -26 q 0 363 0 197 q 94 642 0 529 q 358 765 195 765 q 626 627 529 765 q 714 326 714 503 m 576 429 q 507 583 564 522 q 355 650 445 650 q 206 583 266 650 q 140 429 152 522 l 576 429 \"\n    },\n    \"ό\": {\n        x_min: 0,\n        x_max: 712,\n        ha: 815,\n        o: \"m 356 -25 q 94 91 194 -25 q 0 368 0 202 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 m 576 1040 l 387 819 l 303 819 l 438 1040 l 576 1040 \"\n    },\n    J: {\n        x_min: 0,\n        x_max: 588,\n        ha: 699,\n        o: \"m 588 279 q 287 -26 588 -26 q 58 73 126 -26 q 0 327 0 158 l 133 327 q 160 172 133 227 q 288 96 198 96 q 426 171 391 96 q 449 336 449 219 l 449 1013 l 588 1013 l 588 279 \"\n    },\n    \"\\xbb\": {\n        x_min: -1,\n        x_max: 503,\n        ha: 601,\n        o: \"m 503 302 l 280 136 l 281 256 l 429 373 l 281 486 l 280 608 l 503 440 l 503 302 m 221 302 l 0 136 l 0 255 l 145 372 l 0 486 l -1 608 l 221 440 l 221 302 \"\n    },\n    \"\\xa9\": {\n        x_min: -3,\n        x_max: 1008,\n        ha: 1106,\n        o: \"m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 741 394 q 661 246 731 302 q 496 190 591 190 q 294 285 369 190 q 228 497 228 370 q 295 714 228 625 q 499 813 370 813 q 656 762 588 813 q 733 625 724 711 l 634 625 q 589 704 629 673 q 498 735 550 735 q 377 666 421 735 q 334 504 334 597 q 374 340 334 408 q 490 272 415 272 q 589 304 549 272 q 638 394 628 337 l 741 394 \"\n    },\n    \"ώ\": {\n        x_min: 0,\n        x_max: 922,\n        ha: 1030,\n        o: \"m 687 1040 l 498 819 l 415 819 l 549 1040 l 687 1040 m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 338 0 202 q 45 551 0 444 q 161 737 84 643 l 302 737 q 175 552 219 647 q 124 336 124 446 q 155 179 124 248 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 341 797 257 q 745 555 797 450 q 619 737 705 637 l 760 737 q 874 551 835 640 q 922 339 922 444 \"\n    },\n    \"^\": {\n        x_min: 193.0625,\n        x_max: 598.609375,\n        ha: 792,\n        o: \"m 598 772 l 515 772 l 395 931 l 277 772 l 193 772 l 326 1013 l 462 1013 l 598 772 \"\n    },\n    \"\\xab\": {\n        x_min: 0,\n        x_max: 507.203125,\n        ha: 604,\n        o: \"m 506 136 l 284 302 l 284 440 l 506 608 l 507 485 l 360 371 l 506 255 l 506 136 m 222 136 l 0 302 l 0 440 l 222 608 l 221 486 l 73 373 l 222 256 l 222 136 \"\n    },\n    D: {\n        x_min: 0,\n        x_max: 828,\n        ha: 935,\n        o: \"m 389 1013 q 714 867 593 1013 q 828 521 828 729 q 712 161 828 309 q 382 0 587 0 l 0 0 l 0 1013 l 389 1013 m 376 124 q 607 247 523 124 q 681 510 681 355 q 607 771 681 662 q 376 896 522 896 l 139 896 l 139 124 l 376 124 \"\n    },\n    \"∙\": {\n        x_min: 0,\n        x_max: 142,\n        ha: 239,\n        o: \"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 \"\n    },\n    \"\\xff\": {\n        x_min: 0,\n        x_max: 47,\n        ha: 125,\n        o: \"m 47 3 q 37 -7 47 -7 q 28 0 30 -7 q 39 -4 32 -4 q 45 3 45 -1 l 37 0 q 28 9 28 0 q 39 19 28 19 l 47 16 l 47 19 l 47 3 m 37 1 q 44 8 44 1 q 37 16 44 16 q 30 8 30 16 q 37 1 30 1 m 26 1 l 23 22 l 14 0 l 3 22 l 3 3 l 0 25 l 13 1 l 22 25 l 26 1 \"\n    },\n    w: {\n        x_min: 0,\n        x_max: 1009.71875,\n        ha: 1100,\n        o: \"m 1009 738 l 783 0 l 658 0 l 501 567 l 345 0 l 222 0 l 0 738 l 130 738 l 284 174 l 432 737 l 576 738 l 721 173 l 881 737 l 1009 738 \"\n    },\n    $: {\n        x_min: 0,\n        x_max: 700,\n        ha: 793,\n        o: \"m 664 717 l 542 717 q 490 825 531 785 q 381 872 450 865 l 381 551 q 620 446 540 522 q 700 241 700 370 q 618 45 700 116 q 381 -25 536 -25 l 381 -152 l 307 -152 l 307 -25 q 81 62 162 -25 q 0 297 0 149 l 124 297 q 169 146 124 204 q 307 81 215 89 l 307 441 q 80 536 148 469 q 13 725 13 603 q 96 910 13 839 q 307 982 180 982 l 307 1077 l 381 1077 l 381 982 q 574 917 494 982 q 664 717 664 845 m 307 565 l 307 872 q 187 831 233 872 q 142 724 142 791 q 180 618 142 656 q 307 565 218 580 m 381 76 q 562 237 562 96 q 517 361 562 313 q 381 423 472 409 l 381 76 \"\n    },\n    \"\\\\\": {\n        x_min: -0.015625,\n        x_max: 425.0625,\n        ha: 522,\n        o: \"m 425 -129 l 337 -129 l 0 1041 l 83 1041 l 425 -129 \"\n    },\n    \"\\xb5\": {\n        x_min: 0,\n        x_max: 697.21875,\n        ha: 747,\n        o: \"m 697 -4 q 629 -14 658 -14 q 498 97 513 -14 q 422 9 470 41 q 313 -23 374 -23 q 207 4 258 -23 q 119 81 156 32 l 119 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 173 124 246 q 308 83 216 83 q 452 178 402 83 q 493 359 493 255 l 493 738 l 617 738 l 617 214 q 623 136 617 160 q 673 92 637 92 q 697 96 684 92 l 697 -4 \"\n    },\n    \"Ι\": {\n        x_min: 42,\n        x_max: 181,\n        ha: 297,\n        o: \"m 181 0 l 42 0 l 42 1013 l 181 1013 l 181 0 \"\n    },\n    \"Ύ\": {\n        x_min: 0,\n        x_max: 1144.5,\n        ha: 1214,\n        o: \"m 1144 1012 l 807 416 l 807 0 l 667 0 l 667 416 l 325 1012 l 465 1012 l 736 533 l 1004 1012 l 1144 1012 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 \"\n    },\n    \"’\": {\n        x_min: 0,\n        x_max: 139,\n        ha: 236,\n        o: \"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 \"\n    },\n    \"Ν\": {\n        x_min: 0,\n        x_max: 801,\n        ha: 915,\n        o: \"m 801 0 l 651 0 l 131 822 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 191 l 670 1013 l 801 1013 l 801 0 \"\n    },\n    \"-\": {\n        x_min: 8.71875,\n        x_max: 350.390625,\n        ha: 478,\n        o: \"m 350 317 l 8 317 l 8 428 l 350 428 l 350 317 \"\n    },\n    Q: {\n        x_min: 0,\n        x_max: 968,\n        ha: 1072,\n        o: \"m 954 5 l 887 -79 l 744 35 q 622 -11 687 2 q 483 -26 556 -26 q 127 130 262 -26 q 0 504 0 279 q 127 880 0 728 q 484 1041 262 1041 q 841 884 708 1041 q 968 507 968 735 q 933 293 968 398 q 832 104 899 188 l 954 5 m 723 191 q 802 330 777 248 q 828 499 828 412 q 744 790 828 673 q 483 922 650 922 q 228 791 322 922 q 142 505 142 673 q 227 221 142 337 q 487 91 323 91 q 632 123 566 91 l 520 215 l 587 301 l 723 191 \"\n    },\n    \"ς\": {\n        x_min: 1,\n        x_max: 676.28125,\n        ha: 740,\n        o: \"m 676 460 l 551 460 q 498 595 542 546 q 365 651 448 651 q 199 578 263 651 q 136 401 136 505 q 266 178 136 241 q 508 106 387 142 q 640 -50 640 62 q 625 -158 640 -105 q 583 -278 611 -211 l 465 -278 q 498 -182 490 -211 q 515 -80 515 -126 q 381 12 515 -15 q 134 91 197 51 q 1 388 1 179 q 100 651 1 542 q 354 761 199 761 q 587 680 498 761 q 676 460 676 599 \"\n    },\n    M: {\n        x_min: 0,\n        x_max: 954,\n        ha: 1067,\n        o: \"m 954 0 l 819 0 l 819 869 l 537 0 l 405 0 l 128 866 l 128 0 l 0 0 l 0 1013 l 200 1013 l 472 160 l 757 1013 l 954 1013 l 954 0 \"\n    },\n    \"Ψ\": {\n        x_min: 0,\n        x_max: 1006,\n        ha: 1094,\n        o: \"m 1006 678 q 914 319 1006 429 q 571 200 814 200 l 571 0 l 433 0 l 433 200 q 92 319 194 200 q 0 678 0 429 l 0 1013 l 139 1013 l 139 679 q 191 417 139 492 q 433 326 255 326 l 433 1013 l 571 1013 l 571 326 l 580 326 q 813 423 747 326 q 868 679 868 502 l 868 1013 l 1006 1013 l 1006 678 \"\n    },\n    C: {\n        x_min: 0,\n        x_max: 886,\n        ha: 944,\n        o: \"m 886 379 q 760 87 886 201 q 455 -26 634 -26 q 112 136 236 -26 q 0 509 0 283 q 118 882 0 737 q 469 1041 245 1041 q 748 955 630 1041 q 879 708 879 859 l 745 708 q 649 862 724 805 q 473 920 573 920 q 219 791 312 920 q 136 509 136 675 q 217 229 136 344 q 470 99 311 99 q 672 179 591 99 q 753 379 753 259 l 886 379 \"\n    },\n    \"!\": {\n        x_min: 0,\n        x_max: 138,\n        ha: 236,\n        o: \"m 138 684 q 116 409 138 629 q 105 244 105 299 l 33 244 q 16 465 33 313 q 0 684 0 616 l 0 1013 l 138 1013 l 138 684 m 138 0 l 0 0 l 0 151 l 138 151 l 138 0 \"\n    },\n    \"{\": {\n        x_min: 0,\n        x_max: 480.5625,\n        ha: 578,\n        o: \"m 480 -286 q 237 -213 303 -286 q 187 -45 187 -159 q 194 48 187 -15 q 201 141 201 112 q 164 264 201 225 q 0 314 118 314 l 0 417 q 164 471 119 417 q 201 605 201 514 q 199 665 201 644 q 193 772 193 769 q 241 941 193 887 q 480 1015 308 1015 l 480 915 q 336 866 375 915 q 306 742 306 828 q 310 662 306 717 q 314 577 314 606 q 288 452 314 500 q 176 365 256 391 q 289 275 257 337 q 314 143 314 226 q 313 84 314 107 q 310 -11 310 -5 q 339 -131 310 -94 q 480 -182 377 -182 l 480 -286 \"\n    },\n    X: {\n        x_min: -0.015625,\n        x_max: 854.15625,\n        ha: 940,\n        o: \"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 428 637 l 675 1013 l 836 1013 l 504 520 l 854 0 \"\n    },\n    \"#\": {\n        x_min: 0,\n        x_max: 963.890625,\n        ha: 1061,\n        o: \"m 963 690 l 927 590 l 719 590 l 655 410 l 876 410 l 840 310 l 618 310 l 508 -3 l 393 -2 l 506 309 l 329 310 l 215 -2 l 102 -3 l 212 310 l 0 310 l 36 410 l 248 409 l 312 590 l 86 590 l 120 690 l 347 690 l 459 1006 l 573 1006 l 462 690 l 640 690 l 751 1006 l 865 1006 l 754 690 l 963 690 m 606 590 l 425 590 l 362 410 l 543 410 l 606 590 \"\n    },\n    \"ι\": {\n        x_min: 42,\n        x_max: 284,\n        ha: 361,\n        o: \"m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 738 l 167 738 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 \"\n    },\n    \"Ά\": {\n        x_min: 0,\n        x_max: 906.953125,\n        ha: 982,\n        o: \"m 283 1040 l 88 799 l 5 799 l 145 1040 l 283 1040 m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1012 l 529 1012 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 \"\n    },\n    \")\": {\n        x_min: 0,\n        x_max: 318,\n        ha: 415,\n        o: \"m 318 365 q 257 25 318 191 q 87 -290 197 -141 l 0 -290 q 140 21 93 -128 q 193 360 193 189 q 141 704 193 537 q 0 1024 97 850 l 87 1024 q 257 706 197 871 q 318 365 318 542 \"\n    },\n    \"ε\": {\n        x_min: 0,\n        x_max: 634.71875,\n        ha: 714,\n        o: \"m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 314 0 265 q 128 390 67 353 q 56 460 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 \"\n    },\n    \"Δ\": {\n        x_min: 0,\n        x_max: 952.78125,\n        ha: 1028,\n        o: \"m 952 0 l 0 0 l 400 1013 l 551 1013 l 952 0 m 762 124 l 476 867 l 187 124 l 762 124 \"\n    },\n    \"}\": {\n        x_min: 0,\n        x_max: 481,\n        ha: 578,\n        o: \"m 481 314 q 318 262 364 314 q 282 136 282 222 q 284 65 282 97 q 293 -58 293 -48 q 241 -217 293 -166 q 0 -286 174 -286 l 0 -182 q 143 -130 105 -182 q 171 -2 171 -93 q 168 81 171 22 q 165 144 165 140 q 188 275 165 229 q 306 365 220 339 q 191 455 224 391 q 165 588 165 505 q 168 681 165 624 q 171 742 171 737 q 141 865 171 827 q 0 915 102 915 l 0 1015 q 243 942 176 1015 q 293 773 293 888 q 287 675 293 741 q 282 590 282 608 q 318 466 282 505 q 481 417 364 417 l 481 314 \"\n    },\n    \"‰\": {\n        x_min: -3,\n        x_max: 1672,\n        ha: 1821,\n        o: \"m 846 0 q 664 76 732 0 q 603 244 603 145 q 662 412 603 344 q 846 489 729 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 846 0 962 0 m 845 103 q 945 143 910 103 q 981 243 981 184 q 947 340 981 301 q 845 385 910 385 q 745 342 782 385 q 709 243 709 300 q 742 147 709 186 q 845 103 781 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 m 1428 0 q 1246 76 1314 0 q 1185 244 1185 145 q 1244 412 1185 344 q 1428 489 1311 489 q 1610 412 1542 489 q 1672 244 1672 343 q 1612 76 1672 144 q 1428 0 1545 0 m 1427 103 q 1528 143 1492 103 q 1564 243 1564 184 q 1530 340 1564 301 q 1427 385 1492 385 q 1327 342 1364 385 q 1291 243 1291 300 q 1324 147 1291 186 q 1427 103 1363 103 \"\n    },\n    a: {\n        x_min: 0,\n        x_max: 698.609375,\n        ha: 794,\n        o: \"m 698 0 q 661 -12 679 -7 q 615 -17 643 -17 q 536 12 564 -17 q 500 96 508 41 q 384 6 456 37 q 236 -25 312 -25 q 65 31 130 -25 q 0 194 0 88 q 118 390 0 334 q 328 435 180 420 q 488 483 476 451 q 495 523 495 504 q 442 619 495 584 q 325 654 389 654 q 209 617 257 654 q 152 513 161 580 l 33 513 q 123 705 33 633 q 332 772 207 772 q 528 712 448 772 q 617 531 617 645 l 617 163 q 624 108 617 126 q 664 90 632 90 l 698 94 l 698 0 m 491 262 l 491 372 q 272 329 350 347 q 128 201 128 294 q 166 113 128 144 q 264 83 205 83 q 414 130 346 83 q 491 262 491 183 \"\n    },\n    \"—\": {\n        x_min: 0,\n        x_max: 941.671875,\n        ha: 1039,\n        o: \"m 941 334 l 0 334 l 0 410 l 941 410 l 941 334 \"\n    },\n    \"=\": {\n        x_min: 8.71875,\n        x_max: 780.953125,\n        ha: 792,\n        o: \"m 780 510 l 8 510 l 8 606 l 780 606 l 780 510 m 780 235 l 8 235 l 8 332 l 780 332 l 780 235 \"\n    },\n    N: {\n        x_min: 0,\n        x_max: 801,\n        ha: 914,\n        o: \"m 801 0 l 651 0 l 131 823 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 193 l 670 1013 l 801 1013 l 801 0 \"\n    },\n    \"ρ\": {\n        x_min: 0,\n        x_max: 712,\n        ha: 797,\n        o: \"m 712 369 q 620 94 712 207 q 362 -26 521 -26 q 230 2 292 -26 q 119 83 167 30 l 119 -278 l 0 -278 l 0 362 q 91 643 0 531 q 355 764 190 764 q 617 647 517 764 q 712 369 712 536 m 583 366 q 530 559 583 480 q 359 651 469 651 q 190 562 252 651 q 135 370 135 483 q 189 176 135 257 q 359 85 250 85 q 528 175 466 85 q 583 366 583 254 \"\n    },\n    \"\\xaf\": {\n        x_min: 0,\n        x_max: 941.671875,\n        ha: 938,\n        o: \"m 941 1033 l 0 1033 l 0 1109 l 941 1109 l 941 1033 \"\n    },\n    Z: {\n        x_min: 0,\n        x_max: 779,\n        ha: 849,\n        o: \"m 779 0 l 0 0 l 0 113 l 621 896 l 40 896 l 40 1013 l 779 1013 l 778 887 l 171 124 l 779 124 l 779 0 \"\n    },\n    u: {\n        x_min: 0,\n        x_max: 617,\n        ha: 729,\n        o: \"m 617 0 l 499 0 l 499 110 q 391 10 460 45 q 246 -25 322 -25 q 61 58 127 -25 q 0 258 0 136 l 0 738 l 125 738 l 125 284 q 156 148 125 202 q 273 82 197 82 q 433 165 369 82 q 493 340 493 243 l 493 738 l 617 738 l 617 0 \"\n    },\n    k: {\n        x_min: 0,\n        x_max: 612.484375,\n        ha: 697,\n        o: \"m 612 738 l 338 465 l 608 0 l 469 0 l 251 382 l 121 251 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 402 l 456 738 l 612 738 \"\n    },\n    \"Η\": {\n        x_min: 0,\n        x_max: 803,\n        ha: 917,\n        o: \"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 \"\n    },\n    \"Α\": {\n        x_min: 0,\n        x_max: 906.953125,\n        ha: 985,\n        o: \"m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 \"\n    },\n    s: {\n        x_min: 0,\n        x_max: 604,\n        ha: 697,\n        o: \"m 604 217 q 501 36 604 104 q 292 -23 411 -23 q 86 43 166 -23 q 0 238 0 114 l 121 237 q 175 122 121 164 q 300 85 223 85 q 415 112 363 85 q 479 207 479 147 q 361 309 479 276 q 140 372 141 370 q 21 544 21 426 q 111 708 21 647 q 298 761 190 761 q 492 705 413 761 q 583 531 583 643 l 462 531 q 412 625 462 594 q 298 657 363 657 q 199 636 242 657 q 143 558 143 608 q 262 454 143 486 q 484 394 479 397 q 604 217 604 341 \"\n    },\n    B: {\n        x_min: 0,\n        x_max: 778,\n        ha: 876,\n        o: \"m 580 546 q 724 469 670 535 q 778 311 778 403 q 673 83 778 171 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 892 q 691 633 732 693 q 580 546 650 572 m 393 899 l 139 899 l 139 588 l 379 588 q 521 624 462 588 q 592 744 592 667 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 303 635 219 q 559 436 635 389 q 402 477 494 477 l 139 477 l 139 124 l 419 124 \"\n    },\n    \"…\": {\n        x_min: 0,\n        x_max: 614,\n        ha: 708,\n        o: \"m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 m 378 0 l 236 0 l 236 151 l 378 151 l 378 0 m 614 0 l 472 0 l 472 151 l 614 151 l 614 0 \"\n    },\n    \"?\": {\n        x_min: 0,\n        x_max: 607,\n        ha: 704,\n        o: \"m 607 777 q 543 599 607 674 q 422 474 482 537 q 357 272 357 391 l 236 272 q 297 487 236 395 q 411 619 298 490 q 474 762 474 691 q 422 885 474 838 q 301 933 371 933 q 179 880 228 933 q 124 706 124 819 l 0 706 q 94 963 0 872 q 302 1044 177 1044 q 511 973 423 1044 q 607 777 607 895 m 370 0 l 230 0 l 230 151 l 370 151 l 370 0 \"\n    },\n    H: {\n        x_min: 0,\n        x_max: 803,\n        ha: 915,\n        o: \"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 \"\n    },\n    \"ν\": {\n        x_min: 0,\n        x_max: 675,\n        ha: 761,\n        o: \"m 675 738 l 404 0 l 272 0 l 0 738 l 133 738 l 340 147 l 541 738 l 675 738 \"\n    },\n    c: {\n        x_min: 1,\n        x_max: 701.390625,\n        ha: 775,\n        o: \"m 701 264 q 584 53 681 133 q 353 -26 487 -26 q 91 91 188 -26 q 1 370 1 201 q 92 645 1 537 q 353 761 190 761 q 572 688 479 761 q 690 493 666 615 l 556 493 q 487 606 545 562 q 356 650 428 650 q 186 563 246 650 q 134 372 134 487 q 188 179 134 258 q 359 88 250 88 q 492 136 437 88 q 566 264 548 185 l 701 264 \"\n    },\n    \"\\xb6\": {\n        x_min: 0,\n        x_max: 566.671875,\n        ha: 678,\n        o: \"m 21 892 l 52 892 l 98 761 l 145 892 l 176 892 l 178 741 l 157 741 l 157 867 l 108 741 l 88 741 l 40 871 l 40 741 l 21 741 l 21 892 m 308 854 l 308 731 q 252 691 308 691 q 227 691 240 691 q 207 696 213 695 l 207 712 l 253 706 q 288 733 288 706 l 288 763 q 244 741 279 741 q 193 797 193 741 q 261 860 193 860 q 287 860 273 860 q 308 854 302 855 m 288 842 l 263 843 q 213 796 213 843 q 248 756 213 756 q 288 796 288 756 l 288 842 m 566 988 l 502 988 l 502 -1 l 439 -1 l 439 988 l 317 988 l 317 -1 l 252 -1 l 252 602 q 81 653 155 602 q 0 805 0 711 q 101 989 0 918 q 309 1053 194 1053 l 566 1053 l 566 988 \"\n    },\n    \"β\": {\n        x_min: 0,\n        x_max: 660,\n        ha: 745,\n        o: \"m 471 550 q 610 450 561 522 q 660 280 660 378 q 578 64 660 151 q 367 -22 497 -22 q 239 5 299 -22 q 126 82 178 32 l 126 -278 l 0 -278 l 0 593 q 54 903 0 801 q 318 1042 127 1042 q 519 964 436 1042 q 603 771 603 887 q 567 644 603 701 q 471 550 532 586 m 337 79 q 476 138 418 79 q 535 279 535 198 q 427 437 535 386 q 226 477 344 477 l 226 583 q 398 620 329 583 q 486 762 486 668 q 435 884 486 833 q 312 935 384 935 q 169 861 219 935 q 126 698 126 797 l 126 362 q 170 169 126 242 q 337 79 224 79 \"\n    },\n    \"Μ\": {\n        x_min: 0,\n        x_max: 954,\n        ha: 1068,\n        o: \"m 954 0 l 819 0 l 819 868 l 537 0 l 405 0 l 128 865 l 128 0 l 0 0 l 0 1013 l 199 1013 l 472 158 l 758 1013 l 954 1013 l 954 0 \"\n    },\n    \"Ό\": {\n        x_min: 0.109375,\n        x_max: 1120,\n        ha: 1217,\n        o: \"m 1120 505 q 994 132 1120 282 q 642 -29 861 -29 q 290 130 422 -29 q 167 505 167 280 q 294 883 167 730 q 650 1046 430 1046 q 999 882 868 1046 q 1120 505 1120 730 m 977 504 q 896 784 977 669 q 644 915 804 915 q 391 785 484 915 q 307 504 307 669 q 391 224 307 339 q 644 95 486 95 q 894 224 803 95 q 977 504 977 339 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 \"\n    },\n    \"Ή\": {\n        x_min: 0,\n        x_max: 1158,\n        ha: 1275,\n        o: \"m 1158 0 l 1022 0 l 1022 475 l 496 475 l 496 0 l 356 0 l 356 1012 l 496 1012 l 496 599 l 1022 599 l 1022 1012 l 1158 1012 l 1158 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 \"\n    },\n    \"•\": {\n        x_min: 0,\n        x_max: 663.890625,\n        ha: 775,\n        o: \"m 663 529 q 566 293 663 391 q 331 196 469 196 q 97 294 194 196 q 0 529 0 393 q 96 763 0 665 q 331 861 193 861 q 566 763 469 861 q 663 529 663 665 \"\n    },\n    \"\\xa5\": {\n        x_min: 0.1875,\n        x_max: 819.546875,\n        ha: 886,\n        o: \"m 563 561 l 697 561 l 696 487 l 520 487 l 482 416 l 482 380 l 697 380 l 695 308 l 482 308 l 482 0 l 342 0 l 342 308 l 125 308 l 125 380 l 342 380 l 342 417 l 303 487 l 125 487 l 125 561 l 258 561 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 l 563 561 \"\n    },\n    \"(\": {\n        x_min: 0,\n        x_max: 318.0625,\n        ha: 415,\n        o: \"m 318 -290 l 230 -290 q 61 23 122 -142 q 0 365 0 190 q 62 712 0 540 q 230 1024 119 869 l 318 1024 q 175 705 219 853 q 125 360 125 542 q 176 22 125 187 q 318 -290 223 -127 \"\n    },\n    U: {\n        x_min: 0,\n        x_max: 796,\n        ha: 904,\n        o: \"m 796 393 q 681 93 796 212 q 386 -25 566 -25 q 101 95 208 -25 q 0 393 0 211 l 0 1013 l 138 1013 l 138 391 q 204 191 138 270 q 394 107 276 107 q 586 191 512 107 q 656 391 656 270 l 656 1013 l 796 1013 l 796 393 \"\n    },\n    \"γ\": {\n        x_min: 0.5,\n        x_max: 744.953125,\n        ha: 822,\n        o: \"m 744 737 l 463 54 l 463 -278 l 338 -278 l 338 54 l 154 495 q 104 597 124 569 q 13 651 67 651 l 0 651 l 0 751 l 39 753 q 168 711 121 753 q 242 594 207 676 l 403 208 l 617 737 l 744 737 \"\n    },\n    \"α\": {\n        x_min: 0,\n        x_max: 765.5625,\n        ha: 809,\n        o: \"m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 728 407 760 q 563 637 524 696 l 563 739 l 685 739 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 96 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 \"\n    },\n    F: {\n        x_min: 0,\n        x_max: 683.328125,\n        ha: 717,\n        o: \"m 683 888 l 140 888 l 140 583 l 613 583 l 613 458 l 140 458 l 140 0 l 0 0 l 0 1013 l 683 1013 l 683 888 \"\n    },\n    \"\\xad\": {\n        x_min: 0,\n        x_max: 705.5625,\n        ha: 803,\n        o: \"m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 \"\n    },\n    \":\": {\n        x_min: 0,\n        x_max: 142,\n        ha: 239,\n        o: \"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 \"\n    },\n    \"Χ\": {\n        x_min: 0,\n        x_max: 854.171875,\n        ha: 935,\n        o: \"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 427 637 l 675 1013 l 836 1013 l 504 521 l 854 0 \"\n    },\n    \"*\": {\n        x_min: 116,\n        x_max: 674,\n        ha: 792,\n        o: \"m 674 768 l 475 713 l 610 544 l 517 477 l 394 652 l 272 478 l 178 544 l 314 713 l 116 766 l 153 876 l 341 812 l 342 1013 l 446 1013 l 446 811 l 635 874 l 674 768 \"\n    },\n    \"†\": {\n        x_min: 0,\n        x_max: 777,\n        ha: 835,\n        o: \"m 458 804 l 777 804 l 777 683 l 458 683 l 458 0 l 319 0 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 \"\n    },\n    \"\\xb0\": {\n        x_min: 0,\n        x_max: 347,\n        ha: 444,\n        o: \"m 173 802 q 43 856 91 802 q 0 977 0 905 q 45 1101 0 1049 q 173 1153 90 1153 q 303 1098 255 1153 q 347 977 347 1049 q 303 856 347 905 q 173 802 256 802 m 173 884 q 238 910 214 884 q 262 973 262 937 q 239 1038 262 1012 q 173 1064 217 1064 q 108 1037 132 1064 q 85 973 85 1010 q 108 910 85 937 q 173 884 132 884 \"\n    },\n    V: {\n        x_min: 0,\n        x_max: 862.71875,\n        ha: 940,\n        o: \"m 862 1013 l 505 0 l 361 0 l 0 1013 l 143 1013 l 434 165 l 718 1012 l 862 1013 \"\n    },\n    \"Ξ\": {\n        x_min: 0,\n        x_max: 734.71875,\n        ha: 763,\n        o: \"m 723 889 l 9 889 l 9 1013 l 723 1013 l 723 889 m 673 463 l 61 463 l 61 589 l 673 589 l 673 463 m 734 0 l 0 0 l 0 124 l 734 124 l 734 0 \"\n    },\n    \"\\xa0\": {\n        x_min: 0,\n        x_max: 0,\n        ha: 853\n    },\n    \"Ϋ\": {\n        x_min: 0.328125,\n        x_max: 819.515625,\n        ha: 889,\n        o: \"m 588 1046 l 460 1046 l 460 1189 l 588 1189 l 588 1046 m 360 1046 l 232 1046 l 232 1189 l 360 1189 l 360 1046 m 819 1012 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1012 l 140 1012 l 411 533 l 679 1012 l 819 1012 \"\n    },\n    \"”\": {\n        x_min: 0,\n        x_max: 347,\n        ha: 454,\n        o: \"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 m 347 851 q 310 737 347 784 q 208 669 273 690 l 208 734 q 267 787 250 741 q 280 873 280 821 l 208 873 l 208 1013 l 347 1013 l 347 851 \"\n    },\n    \"@\": {\n        x_min: 0,\n        x_max: 1260,\n        ha: 1357,\n        o: \"m 1098 -45 q 877 -160 1001 -117 q 633 -203 752 -203 q 155 -29 327 -203 q 0 360 0 127 q 176 802 0 616 q 687 1008 372 1008 q 1123 854 969 1008 q 1260 517 1260 718 q 1155 216 1260 341 q 868 82 1044 82 q 772 106 801 82 q 737 202 737 135 q 647 113 700 144 q 527 82 594 82 q 367 147 420 82 q 314 312 314 212 q 401 565 314 452 q 639 690 498 690 q 810 588 760 690 l 849 668 l 938 668 q 877 441 900 532 q 833 226 833 268 q 853 182 833 198 q 902 167 873 167 q 1088 272 1012 167 q 1159 512 1159 372 q 1051 793 1159 681 q 687 925 925 925 q 248 747 415 925 q 97 361 97 586 q 226 26 97 159 q 627 -122 370 -122 q 856 -87 737 -122 q 1061 8 976 -53 l 1098 -45 m 786 488 q 738 580 777 545 q 643 615 700 615 q 483 517 548 615 q 425 322 425 430 q 457 203 425 250 q 552 156 490 156 q 722 273 665 156 q 786 488 738 309 \"\n    },\n    \"Ί\": {\n        x_min: 0,\n        x_max: 499,\n        ha: 613,\n        o: \"m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 m 499 0 l 360 0 l 360 1012 l 499 1012 l 499 0 \"\n    },\n    i: {\n        x_min: 14,\n        x_max: 136,\n        ha: 275,\n        o: \"m 136 873 l 14 873 l 14 1013 l 136 1013 l 136 873 m 136 0 l 14 0 l 14 737 l 136 737 l 136 0 \"\n    },\n    \"Β\": {\n        x_min: 0,\n        x_max: 778,\n        ha: 877,\n        o: \"m 580 545 q 724 468 671 534 q 778 310 778 402 q 673 83 778 170 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 891 q 691 632 732 692 q 580 545 650 571 m 393 899 l 139 899 l 139 587 l 379 587 q 521 623 462 587 q 592 744 592 666 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 302 635 219 q 559 435 635 388 q 402 476 494 476 l 139 476 l 139 124 l 419 124 \"\n    },\n    \"υ\": {\n        x_min: 0,\n        x_max: 617,\n        ha: 725,\n        o: \"m 617 352 q 540 94 617 199 q 308 -24 455 -24 q 76 94 161 -24 q 0 352 0 199 l 0 739 l 126 739 l 126 355 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 355 492 257 l 492 739 l 617 739 l 617 352 \"\n    },\n    \"]\": {\n        x_min: 0,\n        x_max: 275,\n        ha: 372,\n        o: \"m 275 -281 l 0 -281 l 0 -187 l 151 -187 l 151 920 l 0 920 l 0 1013 l 275 1013 l 275 -281 \"\n    },\n    m: {\n        x_min: 0,\n        x_max: 1019,\n        ha: 1128,\n        o: \"m 1019 0 l 897 0 l 897 454 q 860 591 897 536 q 739 660 816 660 q 613 586 659 660 q 573 436 573 522 l 573 0 l 447 0 l 447 455 q 412 591 447 535 q 294 657 372 657 q 165 586 213 657 q 122 437 122 521 l 122 0 l 0 0 l 0 738 l 117 738 l 117 640 q 202 730 150 697 q 316 763 254 763 q 437 730 381 763 q 525 642 494 697 q 621 731 559 700 q 753 763 682 763 q 943 694 867 763 q 1019 512 1019 625 l 1019 0 \"\n    },\n    \"χ\": {\n        x_min: 8.328125,\n        x_max: 780.5625,\n        ha: 815,\n        o: \"m 780 -278 q 715 -294 747 -294 q 616 -257 663 -294 q 548 -175 576 -227 l 379 133 l 143 -277 l 9 -277 l 313 254 l 163 522 q 127 586 131 580 q 36 640 91 640 q 8 637 27 640 l 8 752 l 52 757 q 162 719 113 757 q 236 627 200 690 l 383 372 l 594 737 l 726 737 l 448 250 l 625 -69 q 670 -153 647 -110 q 743 -188 695 -188 q 780 -184 759 -188 l 780 -278 \"\n    },\n    \"ί\": {\n        x_min: 42,\n        x_max: 326.71875,\n        ha: 361,\n        o: \"m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 102 239 101 q 284 112 257 104 l 284 3 m 326 1040 l 137 819 l 54 819 l 189 1040 l 326 1040 \"\n    },\n    \"Ζ\": {\n        x_min: 0,\n        x_max: 779.171875,\n        ha: 850,\n        o: \"m 779 0 l 0 0 l 0 113 l 620 896 l 40 896 l 40 1013 l 779 1013 l 779 887 l 170 124 l 779 124 l 779 0 \"\n    },\n    R: {\n        x_min: 0,\n        x_max: 781.953125,\n        ha: 907,\n        o: \"m 781 0 l 623 0 q 587 242 590 52 q 407 433 585 433 l 138 433 l 138 0 l 0 0 l 0 1013 l 396 1013 q 636 946 539 1013 q 749 731 749 868 q 711 597 749 659 q 608 502 674 534 q 718 370 696 474 q 729 207 722 352 q 781 26 736 62 l 781 0 m 373 551 q 533 594 465 551 q 614 731 614 645 q 532 859 614 815 q 373 896 465 896 l 138 896 l 138 551 l 373 551 \"\n    },\n    o: {\n        x_min: 0,\n        x_max: 713,\n        ha: 821,\n        o: \"m 357 -25 q 94 91 194 -25 q 0 368 0 202 q 93 642 0 533 q 357 761 193 761 q 618 644 518 761 q 713 368 713 533 q 619 91 713 201 q 357 -25 521 -25 m 357 85 q 528 175 465 85 q 584 369 584 255 q 529 562 584 484 q 357 651 467 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 357 85 250 85 \"\n    },\n    K: {\n        x_min: 0,\n        x_max: 819.46875,\n        ha: 906,\n        o: \"m 819 0 l 649 0 l 294 509 l 139 355 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 \"\n    },\n    \",\": {\n        x_min: 0,\n        x_max: 142,\n        ha: 239,\n        o: \"m 142 -12 q 105 -132 142 -82 q 0 -205 68 -182 l 0 -138 q 57 -82 40 -124 q 70 0 70 -51 l 0 0 l 0 151 l 142 151 l 142 -12 \"\n    },\n    d: {\n        x_min: 0,\n        x_max: 683,\n        ha: 796,\n        o: \"m 683 0 l 564 0 l 564 93 q 456 6 516 38 q 327 -25 395 -25 q 87 100 181 -25 q 0 365 0 215 q 90 639 0 525 q 343 763 187 763 q 564 647 486 763 l 564 1013 l 683 1013 l 683 0 m 582 373 q 529 562 582 484 q 361 653 468 653 q 190 561 253 653 q 135 365 135 479 q 189 175 135 254 q 358 85 251 85 q 529 178 468 85 q 582 373 582 258 \"\n    },\n    \"\\xa8\": {\n        x_min: -109,\n        x_max: 247,\n        ha: 232,\n        o: \"m 247 1046 l 119 1046 l 119 1189 l 247 1189 l 247 1046 m 19 1046 l -109 1046 l -109 1189 l 19 1189 l 19 1046 \"\n    },\n    E: {\n        x_min: 0,\n        x_max: 736.109375,\n        ha: 789,\n        o: \"m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 \"\n    },\n    Y: {\n        x_min: 0,\n        x_max: 820,\n        ha: 886,\n        o: \"m 820 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 534 l 679 1012 l 820 1013 \"\n    },\n    '\"': {\n        x_min: 0,\n        x_max: 299,\n        ha: 396,\n        o: \"m 299 606 l 203 606 l 203 988 l 299 988 l 299 606 m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 \"\n    },\n    \"‹\": {\n        x_min: 17.984375,\n        x_max: 773.609375,\n        ha: 792,\n        o: \"m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 \"\n    },\n    \"„\": {\n        x_min: 0,\n        x_max: 364,\n        ha: 467,\n        o: \"m 141 -12 q 104 -132 141 -82 q 0 -205 67 -182 l 0 -138 q 56 -82 40 -124 q 69 0 69 -51 l 0 0 l 0 151 l 141 151 l 141 -12 m 364 -12 q 327 -132 364 -82 q 222 -205 290 -182 l 222 -138 q 279 -82 262 -124 q 292 0 292 -51 l 222 0 l 222 151 l 364 151 l 364 -12 \"\n    },\n    \"δ\": {\n        x_min: 1,\n        x_max: 710,\n        ha: 810,\n        o: \"m 710 360 q 616 87 710 196 q 356 -28 518 -28 q 99 82 197 -28 q 1 356 1 192 q 100 606 1 509 q 355 703 199 703 q 180 829 288 754 q 70 903 124 866 l 70 1012 l 643 1012 l 643 901 l 258 901 q 462 763 422 794 q 636 592 577 677 q 710 360 710 485 m 584 365 q 552 501 584 447 q 451 602 521 555 q 372 611 411 611 q 197 541 258 611 q 136 355 136 472 q 190 171 136 245 q 358 85 252 85 q 528 173 465 85 q 584 365 584 252 \"\n    },\n    \"έ\": {\n        x_min: 0,\n        x_max: 634.71875,\n        ha: 714,\n        o: \"m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 313 0 265 q 128 390 67 352 q 56 459 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 m 520 1040 l 331 819 l 248 819 l 383 1040 l 520 1040 \"\n    },\n    \"ω\": {\n        x_min: 0,\n        x_max: 922,\n        ha: 1031,\n        o: \"m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 339 0 203 q 45 551 0 444 q 161 738 84 643 l 302 738 q 175 553 219 647 q 124 336 124 446 q 155 179 124 249 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 342 797 257 q 745 556 797 450 q 619 738 705 638 l 760 738 q 874 551 835 640 q 922 339 922 444 \"\n    },\n    \"\\xb4\": {\n        x_min: 0,\n        x_max: 96,\n        ha: 251,\n        o: \"m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 \"\n    },\n    \"\\xb1\": {\n        x_min: 11,\n        x_max: 781,\n        ha: 792,\n        o: \"m 781 490 l 446 490 l 446 255 l 349 255 l 349 490 l 11 490 l 11 586 l 349 586 l 349 819 l 446 819 l 446 586 l 781 586 l 781 490 m 781 21 l 11 21 l 11 115 l 781 115 l 781 21 \"\n    },\n    \"|\": {\n        x_min: 343,\n        x_max: 449,\n        ha: 792,\n        o: \"m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 \"\n    },\n    \"ϋ\": {\n        x_min: 0,\n        x_max: 617,\n        ha: 725,\n        o: \"m 482 800 l 372 800 l 372 925 l 482 925 l 482 800 m 239 800 l 129 800 l 129 925 l 239 925 l 239 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 \"\n    },\n    \"\\xa7\": {\n        x_min: 0,\n        x_max: 593,\n        ha: 690,\n        o: \"m 593 425 q 554 312 593 369 q 467 233 516 254 q 537 83 537 172 q 459 -74 537 -12 q 288 -133 387 -133 q 115 -69 184 -133 q 47 96 47 -6 l 166 96 q 199 7 166 40 q 288 -26 232 -26 q 371 -5 332 -26 q 420 60 420 21 q 311 201 420 139 q 108 309 210 255 q 0 490 0 383 q 33 602 0 551 q 124 687 66 654 q 75 743 93 712 q 58 812 58 773 q 133 984 58 920 q 300 1043 201 1043 q 458 987 394 1043 q 529 814 529 925 l 411 814 q 370 908 404 877 q 289 939 336 939 q 213 911 246 939 q 180 841 180 883 q 286 720 180 779 q 484 612 480 615 q 593 425 593 534 m 467 409 q 355 544 467 473 q 196 630 228 612 q 146 587 162 609 q 124 525 124 558 q 239 387 124 462 q 398 298 369 315 q 448 345 429 316 q 467 409 467 375 \"\n    },\n    b: {\n        x_min: 0,\n        x_max: 685,\n        ha: 783,\n        o: \"m 685 372 q 597 99 685 213 q 347 -25 501 -25 q 219 5 277 -25 q 121 93 161 36 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 634 q 214 723 157 692 q 341 754 272 754 q 591 637 493 754 q 685 372 685 526 m 554 356 q 499 550 554 470 q 328 644 437 644 q 162 556 223 644 q 108 369 108 478 q 160 176 108 256 q 330 83 221 83 q 498 169 435 83 q 554 356 554 245 \"\n    },\n    q: {\n        x_min: 0,\n        x_max: 683,\n        ha: 876,\n        o: \"m 683 -278 l 564 -278 l 564 97 q 474 8 533 39 q 345 -23 415 -23 q 91 93 188 -23 q 0 364 0 203 q 87 635 0 522 q 337 760 184 760 q 466 727 408 760 q 564 637 523 695 l 564 737 l 683 737 l 683 -278 m 582 375 q 527 564 582 488 q 358 652 466 652 q 190 565 253 652 q 135 377 135 488 q 189 179 135 261 q 361 84 251 84 q 530 179 469 84 q 582 375 582 260 \"\n    },\n    \"Ω\": {\n        x_min: -0.171875,\n        x_max: 969.5625,\n        ha: 1068,\n        o: \"m 969 0 l 555 0 l 555 123 q 744 308 675 194 q 814 558 814 423 q 726 812 814 709 q 484 922 633 922 q 244 820 334 922 q 154 567 154 719 q 223 316 154 433 q 412 123 292 199 l 412 0 l 0 0 l 0 124 l 217 124 q 68 327 122 210 q 15 572 15 444 q 144 911 15 781 q 484 1041 274 1041 q 822 909 691 1041 q 953 569 953 777 q 899 326 953 443 q 750 124 846 210 l 969 124 l 969 0 \"\n    },\n    \"ύ\": {\n        x_min: 0,\n        x_max: 617,\n        ha: 725,\n        o: \"m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 535 1040 l 346 819 l 262 819 l 397 1040 l 535 1040 \"\n    },\n    z: {\n        x_min: -0.015625,\n        x_max: 613.890625,\n        ha: 697,\n        o: \"m 613 0 l 0 0 l 0 100 l 433 630 l 20 630 l 20 738 l 594 738 l 593 636 l 163 110 l 613 110 l 613 0 \"\n    },\n    \"™\": {\n        x_min: 0,\n        x_max: 894,\n        ha: 1000,\n        o: \"m 389 951 l 229 951 l 229 503 l 160 503 l 160 951 l 0 951 l 0 1011 l 389 1011 l 389 951 m 894 503 l 827 503 l 827 939 l 685 503 l 620 503 l 481 937 l 481 503 l 417 503 l 417 1011 l 517 1011 l 653 580 l 796 1010 l 894 1011 l 894 503 \"\n    },\n    \"ή\": {\n        x_min: 0.78125,\n        x_max: 697,\n        ha: 810,\n        o: \"m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 721 124 755 q 200 630 193 687 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 m 479 1040 l 290 819 l 207 819 l 341 1040 l 479 1040 \"\n    },\n    \"Θ\": {\n        x_min: 0,\n        x_max: 960,\n        ha: 1056,\n        o: \"m 960 507 q 833 129 960 280 q 476 -32 698 -32 q 123 129 255 -32 q 0 507 0 280 q 123 883 0 732 q 476 1045 255 1045 q 832 883 696 1045 q 960 507 960 732 m 817 500 q 733 789 817 669 q 476 924 639 924 q 223 792 317 924 q 142 507 142 675 q 222 222 142 339 q 476 89 315 89 q 730 218 636 89 q 817 500 817 334 m 716 449 l 243 449 l 243 571 l 716 571 l 716 449 \"\n    },\n    \"\\xae\": {\n        x_min: -3,\n        x_max: 1008,\n        ha: 1106,\n        o: \"m 503 532 q 614 562 566 532 q 672 658 672 598 q 614 747 672 716 q 503 772 569 772 l 338 772 l 338 532 l 503 532 m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 788 146 l 678 146 q 653 316 655 183 q 527 449 652 449 l 338 449 l 338 146 l 241 146 l 241 854 l 518 854 q 688 808 621 854 q 766 658 766 755 q 739 563 766 607 q 668 497 713 519 q 751 331 747 472 q 788 164 756 190 l 788 146 \"\n    },\n    \"~\": {\n        x_min: 0,\n        x_max: 833,\n        ha: 931,\n        o: \"m 833 958 q 778 753 833 831 q 594 665 716 665 q 402 761 502 665 q 240 857 302 857 q 131 795 166 857 q 104 665 104 745 l 0 665 q 54 867 0 789 q 237 958 116 958 q 429 861 331 958 q 594 765 527 765 q 704 827 670 765 q 729 958 729 874 l 833 958 \"\n    },\n    \"Ε\": {\n        x_min: 0,\n        x_max: 736.21875,\n        ha: 778,\n        o: \"m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 \"\n    },\n    \"\\xb3\": {\n        x_min: 0,\n        x_max: 450,\n        ha: 547,\n        o: \"m 450 552 q 379 413 450 464 q 220 366 313 366 q 69 414 130 366 q 0 567 0 470 l 85 567 q 126 470 85 504 q 225 437 168 437 q 320 467 280 437 q 360 552 360 498 q 318 632 360 608 q 213 657 276 657 q 195 657 203 657 q 176 657 181 657 l 176 722 q 279 733 249 722 q 334 815 334 752 q 300 881 334 856 q 220 907 267 907 q 133 875 169 907 q 97 781 97 844 l 15 781 q 78 926 15 875 q 220 972 135 972 q 364 930 303 972 q 426 817 426 888 q 344 697 426 733 q 421 642 392 681 q 450 552 450 603 \"\n    },\n    \"[\": {\n        x_min: 0,\n        x_max: 273.609375,\n        ha: 371,\n        o: \"m 273 -281 l 0 -281 l 0 1013 l 273 1013 l 273 920 l 124 920 l 124 -187 l 273 -187 l 273 -281 \"\n    },\n    L: {\n        x_min: 0,\n        x_max: 645.828125,\n        ha: 696,\n        o: \"m 645 0 l 0 0 l 0 1013 l 140 1013 l 140 126 l 645 126 l 645 0 \"\n    },\n    \"σ\": {\n        x_min: 0,\n        x_max: 803.390625,\n        ha: 894,\n        o: \"m 803 628 l 633 628 q 713 368 713 512 q 618 93 713 204 q 357 -25 518 -25 q 94 91 194 -25 q 0 368 0 201 q 94 644 0 533 q 356 761 194 761 q 481 750 398 761 q 608 739 564 739 l 803 739 l 803 628 m 360 85 q 529 180 467 85 q 584 374 584 262 q 527 566 584 490 q 352 651 463 651 q 187 559 247 651 q 135 368 135 478 q 189 175 135 254 q 360 85 251 85 \"\n    },\n    \"ζ\": {\n        x_min: 0,\n        x_max: 573,\n        ha: 642,\n        o: \"m 573 -40 q 553 -162 573 -97 q 510 -278 543 -193 l 400 -278 q 441 -187 428 -219 q 462 -90 462 -132 q 378 -14 462 -14 q 108 45 197 -14 q 0 290 0 117 q 108 631 0 462 q 353 901 194 767 l 55 901 l 55 1012 l 561 1012 l 561 924 q 261 669 382 831 q 128 301 128 489 q 243 117 128 149 q 458 98 350 108 q 573 -40 573 80 \"\n    },\n    \"θ\": {\n        x_min: 0,\n        x_max: 674,\n        ha: 778,\n        o: \"m 674 496 q 601 160 674 304 q 336 -26 508 -26 q 73 153 165 -26 q 0 485 0 296 q 72 840 0 683 q 343 1045 166 1045 q 605 844 516 1045 q 674 496 674 692 m 546 579 q 498 798 546 691 q 336 935 437 935 q 178 798 237 935 q 126 579 137 701 l 546 579 m 546 475 l 126 475 q 170 233 126 348 q 338 80 230 80 q 504 233 447 80 q 546 475 546 346 \"\n    },\n    \"Ο\": {\n        x_min: 0,\n        x_max: 958,\n        ha: 1054,\n        o: \"m 485 1042 q 834 883 703 1042 q 958 511 958 735 q 834 136 958 287 q 481 -26 701 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 729 q 485 1042 263 1042 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 670 q 480 913 640 913 q 226 785 321 913 q 142 504 142 671 q 226 224 142 339 q 480 98 319 98 \"\n    },\n    \"Γ\": {\n        x_min: 0,\n        x_max: 705.28125,\n        ha: 749,\n        o: \"m 705 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 705 1012 l 705 886 \"\n    },\n    \" \": {\n        x_min: 0,\n        x_max: 0,\n        ha: 375\n    },\n    \"%\": {\n        x_min: -3,\n        x_max: 1089,\n        ha: 1186,\n        o: \"m 845 0 q 663 76 731 0 q 602 244 602 145 q 661 412 602 344 q 845 489 728 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 845 0 962 0 m 844 103 q 945 143 909 103 q 981 243 981 184 q 947 340 981 301 q 844 385 909 385 q 744 342 781 385 q 708 243 708 300 q 741 147 708 186 q 844 103 780 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 \"\n    },\n    P: {\n        x_min: 0,\n        x_max: 726,\n        ha: 806,\n        o: \"m 424 1013 q 640 931 555 1013 q 726 719 726 850 q 637 506 726 587 q 413 426 548 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 379 889 l 140 889 l 140 548 l 372 548 q 522 589 459 548 q 593 720 593 637 q 528 845 593 801 q 379 889 463 889 \"\n    },\n    \"Έ\": {\n        x_min: 0,\n        x_max: 1078.21875,\n        ha: 1118,\n        o: \"m 1078 0 l 342 0 l 342 1013 l 1067 1013 l 1067 889 l 481 889 l 481 585 l 1019 585 l 1019 467 l 481 467 l 481 125 l 1078 125 l 1078 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 \"\n    },\n    \"Ώ\": {\n        x_min: 0.125,\n        x_max: 1136.546875,\n        ha: 1235,\n        o: \"m 1136 0 l 722 0 l 722 123 q 911 309 842 194 q 981 558 981 423 q 893 813 981 710 q 651 923 800 923 q 411 821 501 923 q 321 568 321 720 q 390 316 321 433 q 579 123 459 200 l 579 0 l 166 0 l 166 124 l 384 124 q 235 327 289 210 q 182 572 182 444 q 311 912 182 782 q 651 1042 441 1042 q 989 910 858 1042 q 1120 569 1120 778 q 1066 326 1120 443 q 917 124 1013 210 l 1136 124 l 1136 0 m 277 1040 l 83 800 l 0 800 l 140 1041 l 277 1040 \"\n    },\n    _: {\n        x_min: 0,\n        x_max: 705.5625,\n        ha: 803,\n        o: \"m 705 -334 l 0 -334 l 0 -234 l 705 -234 l 705 -334 \"\n    },\n    \"Ϊ\": {\n        x_min: -110,\n        x_max: 246,\n        ha: 275,\n        o: \"m 246 1046 l 118 1046 l 118 1189 l 246 1189 l 246 1046 m 18 1046 l -110 1046 l -110 1189 l 18 1189 l 18 1046 m 136 0 l 0 0 l 0 1012 l 136 1012 l 136 0 \"\n    },\n    \"+\": {\n        x_min: 23,\n        x_max: 768,\n        ha: 792,\n        o: \"m 768 372 l 444 372 l 444 0 l 347 0 l 347 372 l 23 372 l 23 468 l 347 468 l 347 840 l 444 840 l 444 468 l 768 468 l 768 372 \"\n    },\n    \"\\xbd\": {\n        x_min: 0,\n        x_max: 1050,\n        ha: 1149,\n        o: \"m 1050 0 l 625 0 q 712 178 625 108 q 878 277 722 187 q 967 385 967 328 q 932 456 967 429 q 850 484 897 484 q 759 450 798 484 q 721 352 721 416 l 640 352 q 706 502 640 448 q 851 551 766 551 q 987 509 931 551 q 1050 385 1050 462 q 976 251 1050 301 q 829 179 902 215 q 717 68 740 133 l 1050 68 l 1050 0 m 834 985 l 215 -28 l 130 -28 l 750 984 l 834 985 m 224 422 l 142 422 l 142 811 l 0 811 l 0 867 q 104 889 62 867 q 164 973 157 916 l 224 973 l 224 422 \"\n    },\n    \"Ρ\": {\n        x_min: 0,\n        x_max: 720,\n        ha: 783,\n        o: \"m 424 1013 q 637 933 554 1013 q 720 723 720 853 q 633 508 720 591 q 413 426 546 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 378 889 l 140 889 l 140 548 l 371 548 q 521 589 458 548 q 592 720 592 637 q 527 845 592 801 q 378 889 463 889 \"\n    },\n    \"'\": {\n        x_min: 0,\n        x_max: 139,\n        ha: 236,\n        o: \"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 \"\n    },\n    \"\\xaa\": {\n        x_min: 0,\n        x_max: 350,\n        ha: 397,\n        o: \"m 350 625 q 307 616 328 616 q 266 631 281 616 q 247 673 251 645 q 190 628 225 644 q 116 613 156 613 q 32 641 64 613 q 0 722 0 669 q 72 826 0 800 q 247 866 159 846 l 247 887 q 220 934 247 916 q 162 953 194 953 q 104 934 129 953 q 76 882 80 915 l 16 882 q 60 976 16 941 q 166 1011 104 1011 q 266 979 224 1011 q 308 891 308 948 l 308 706 q 311 679 308 688 q 331 670 315 670 l 350 672 l 350 625 m 247 757 l 247 811 q 136 790 175 798 q 64 726 64 773 q 83 682 64 697 q 132 667 103 667 q 207 690 174 667 q 247 757 247 718 \"\n    },\n    \"΅\": {\n        x_min: 0,\n        x_max: 450,\n        ha: 553,\n        o: \"m 450 800 l 340 800 l 340 925 l 450 925 l 450 800 m 406 1040 l 212 800 l 129 800 l 269 1040 l 406 1040 m 110 800 l 0 800 l 0 925 l 110 925 l 110 800 \"\n    },\n    T: {\n        x_min: 0,\n        x_max: 777,\n        ha: 835,\n        o: \"m 777 894 l 458 894 l 458 0 l 319 0 l 319 894 l 0 894 l 0 1013 l 777 1013 l 777 894 \"\n    },\n    \"Φ\": {\n        x_min: 0,\n        x_max: 915,\n        ha: 997,\n        o: \"m 527 0 l 389 0 l 389 122 q 110 231 220 122 q 0 509 0 340 q 110 785 0 677 q 389 893 220 893 l 389 1013 l 527 1013 l 527 893 q 804 786 693 893 q 915 509 915 679 q 805 231 915 341 q 527 122 696 122 l 527 0 m 527 226 q 712 310 641 226 q 779 507 779 389 q 712 705 779 627 q 527 787 641 787 l 527 226 m 389 226 l 389 787 q 205 698 275 775 q 136 505 136 620 q 206 308 136 391 q 389 226 276 226 \"\n    },\n    \"⁋\": {\n        x_min: 0,\n        x_max: 0,\n        ha: 694\n    },\n    j: {\n        x_min: -77.78125,\n        x_max: 167,\n        ha: 349,\n        o: \"m 167 871 l 42 871 l 42 1013 l 167 1013 l 167 871 m 167 -80 q 121 -231 167 -184 q -26 -278 76 -278 l -77 -278 l -77 -164 l -41 -164 q 26 -143 11 -164 q 42 -65 42 -122 l 42 737 l 167 737 l 167 -80 \"\n    },\n    \"Σ\": {\n        x_min: 0,\n        x_max: 756.953125,\n        ha: 819,\n        o: \"m 756 0 l 0 0 l 0 107 l 395 523 l 22 904 l 22 1013 l 745 1013 l 745 889 l 209 889 l 566 523 l 187 125 l 756 125 l 756 0 \"\n    },\n    \"›\": {\n        x_min: 18.0625,\n        x_max: 774,\n        ha: 792,\n        o: \"m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 \"\n    },\n    \"<\": {\n        x_min: 17.984375,\n        x_max: 773.609375,\n        ha: 792,\n        o: \"m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 \"\n    },\n    \"\\xa3\": {\n        x_min: 0,\n        x_max: 704.484375,\n        ha: 801,\n        o: \"m 704 41 q 623 -10 664 5 q 543 -26 583 -26 q 359 15 501 -26 q 243 36 288 36 q 158 23 197 36 q 73 -21 119 10 l 6 76 q 125 195 90 150 q 175 331 175 262 q 147 443 175 383 l 0 443 l 0 512 l 108 512 q 43 734 43 623 q 120 929 43 854 q 358 1010 204 1010 q 579 936 487 1010 q 678 729 678 857 l 678 684 l 552 684 q 504 838 552 780 q 362 896 457 896 q 216 852 263 896 q 176 747 176 815 q 199 627 176 697 q 248 512 217 574 l 468 512 l 468 443 l 279 443 q 297 356 297 398 q 230 194 297 279 q 153 107 211 170 q 227 133 190 125 q 293 142 264 142 q 410 119 339 142 q 516 96 482 96 q 579 105 550 96 q 648 142 608 115 l 704 41 \"\n    },\n    t: {\n        x_min: 0,\n        x_max: 367,\n        ha: 458,\n        o: \"m 367 0 q 312 -5 339 -2 q 262 -8 284 -8 q 145 28 183 -8 q 108 143 108 64 l 108 638 l 0 638 l 0 738 l 108 738 l 108 944 l 232 944 l 232 738 l 367 738 l 367 638 l 232 638 l 232 185 q 248 121 232 140 q 307 102 264 102 q 345 104 330 102 q 367 107 360 107 l 367 0 \"\n    },\n    \"\\xac\": {\n        x_min: 0,\n        x_max: 706,\n        ha: 803,\n        o: \"m 706 411 l 706 158 l 630 158 l 630 335 l 0 335 l 0 411 l 706 411 \"\n    },\n    \"λ\": {\n        x_min: 0,\n        x_max: 750,\n        ha: 803,\n        o: \"m 750 -7 q 679 -15 716 -15 q 538 59 591 -15 q 466 214 512 97 l 336 551 l 126 0 l 0 0 l 270 705 q 223 837 247 770 q 116 899 190 899 q 90 898 100 899 l 90 1004 q 152 1011 125 1011 q 298 938 244 1011 q 373 783 326 901 l 605 192 q 649 115 629 136 q 716 95 669 95 l 736 95 q 750 97 745 97 l 750 -7 \"\n    },\n    W: {\n        x_min: 0,\n        x_max: 1263.890625,\n        ha: 1351,\n        o: \"m 1263 1013 l 995 0 l 859 0 l 627 837 l 405 0 l 265 0 l 0 1013 l 136 1013 l 342 202 l 556 1013 l 701 1013 l 921 207 l 1133 1012 l 1263 1013 \"\n    },\n    \">\": {\n        x_min: 18.0625,\n        x_max: 774,\n        ha: 792,\n        o: \"m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 \"\n    },\n    v: {\n        x_min: 0,\n        x_max: 675.15625,\n        ha: 761,\n        o: \"m 675 738 l 404 0 l 272 0 l 0 738 l 133 737 l 340 147 l 541 737 l 675 738 \"\n    },\n    \"τ\": {\n        x_min: 0.28125,\n        x_max: 644.5,\n        ha: 703,\n        o: \"m 644 628 l 382 628 l 382 179 q 388 120 382 137 q 436 91 401 91 q 474 94 447 91 q 504 97 501 97 l 504 0 q 454 -9 482 -5 q 401 -14 426 -14 q 278 67 308 -14 q 260 233 260 118 l 260 628 l 0 628 l 0 739 l 644 739 l 644 628 \"\n    },\n    \"ξ\": {\n        x_min: 0,\n        x_max: 624.9375,\n        ha: 699,\n        o: \"m 624 -37 q 608 -153 624 -96 q 563 -278 593 -211 l 454 -278 q 491 -183 486 -200 q 511 -83 511 -126 q 484 -23 511 -44 q 370 1 452 1 q 323 0 354 1 q 283 -1 293 -1 q 84 76 169 -1 q 0 266 0 154 q 56 431 0 358 q 197 538 108 498 q 94 613 134 562 q 54 730 54 665 q 77 823 54 780 q 143 901 101 867 l 27 901 l 27 1012 l 576 1012 l 576 901 l 380 901 q 244 863 303 901 q 178 745 178 820 q 312 600 178 636 q 532 582 380 582 l 532 479 q 276 455 361 479 q 118 281 118 410 q 165 173 118 217 q 274 120 208 133 q 494 101 384 110 q 624 -37 624 76 \"\n    },\n    \"&\": {\n        x_min: -3,\n        x_max: 894.25,\n        ha: 992,\n        o: \"m 894 0 l 725 0 l 624 123 q 471 0 553 40 q 306 -41 390 -41 q 168 -7 231 -41 q 62 92 105 26 q 14 187 31 139 q -3 276 -3 235 q 55 433 -3 358 q 248 581 114 508 q 170 689 196 640 q 137 817 137 751 q 214 985 137 922 q 384 1041 284 1041 q 548 988 483 1041 q 622 824 622 928 q 563 666 622 739 q 431 556 516 608 l 621 326 q 649 407 639 361 q 663 493 653 426 l 781 493 q 703 229 781 352 l 894 0 m 504 818 q 468 908 504 877 q 384 940 433 940 q 293 907 331 940 q 255 818 255 875 q 289 714 255 767 q 363 628 313 678 q 477 729 446 682 q 504 818 504 771 m 556 209 l 314 499 q 179 395 223 449 q 135 283 135 341 q 146 222 135 253 q 183 158 158 192 q 333 80 241 80 q 556 209 448 80 \"\n    },\n    \"Λ\": {\n        x_min: 0,\n        x_max: 862.5,\n        ha: 942,\n        o: \"m 862 0 l 719 0 l 426 847 l 143 0 l 0 0 l 356 1013 l 501 1013 l 862 0 \"\n    },\n    I: {\n        x_min: 41,\n        x_max: 180,\n        ha: 293,\n        o: \"m 180 0 l 41 0 l 41 1013 l 180 1013 l 180 0 \"\n    },\n    G: {\n        x_min: 0,\n        x_max: 921,\n        ha: 1011,\n        o: \"m 921 0 l 832 0 l 801 136 q 655 15 741 58 q 470 -28 568 -28 q 126 133 259 -28 q 0 499 0 284 q 125 881 0 731 q 486 1043 259 1043 q 763 957 647 1043 q 905 709 890 864 l 772 709 q 668 866 747 807 q 486 926 589 926 q 228 795 322 926 q 142 507 142 677 q 228 224 142 342 q 483 94 323 94 q 712 195 625 94 q 796 435 796 291 l 477 435 l 477 549 l 921 549 l 921 0 \"\n    },\n    \"ΰ\": {\n        x_min: 0,\n        x_max: 617,\n        ha: 725,\n        o: \"m 524 800 l 414 800 l 414 925 l 524 925 l 524 800 m 183 800 l 73 800 l 73 925 l 183 925 l 183 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 489 1040 l 300 819 l 216 819 l 351 1040 l 489 1040 \"\n    },\n    \"`\": {\n        x_min: 0,\n        x_max: 138.890625,\n        ha: 236,\n        o: \"m 138 699 l 0 699 l 0 861 q 36 974 0 929 q 138 1041 72 1020 l 138 977 q 82 931 95 969 q 69 839 69 893 l 138 839 l 138 699 \"\n    },\n    \"\\xb7\": {\n        x_min: 0,\n        x_max: 142,\n        ha: 239,\n        o: \"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 \"\n    },\n    \"Υ\": {\n        x_min: 0.328125,\n        x_max: 819.515625,\n        ha: 889,\n        o: \"m 819 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 \"\n    },\n    r: {\n        x_min: 0,\n        x_max: 355.5625,\n        ha: 432,\n        o: \"m 355 621 l 343 621 q 179 569 236 621 q 122 411 122 518 l 122 0 l 0 0 l 0 737 l 117 737 l 117 604 q 204 719 146 686 q 355 753 262 753 l 355 621 \"\n    },\n    x: {\n        x_min: 0,\n        x_max: 675,\n        ha: 764,\n        o: \"m 675 0 l 525 0 l 331 286 l 144 0 l 0 0 l 256 379 l 12 738 l 157 737 l 336 473 l 516 738 l 661 738 l 412 380 l 675 0 \"\n    },\n    \"μ\": {\n        x_min: 0,\n        x_max: 696.609375,\n        ha: 747,\n        o: \"m 696 -4 q 628 -14 657 -14 q 498 97 513 -14 q 422 8 470 41 q 313 -24 374 -24 q 207 3 258 -24 q 120 80 157 31 l 120 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 172 124 246 q 308 82 216 82 q 451 177 402 82 q 492 358 492 254 l 492 738 l 616 738 l 616 214 q 623 136 616 160 q 673 92 636 92 q 696 95 684 92 l 696 -4 \"\n    },\n    h: {\n        x_min: 0,\n        x_max: 615,\n        ha: 724,\n        o: \"m 615 472 l 615 0 l 490 0 l 490 454 q 456 590 490 535 q 338 654 416 654 q 186 588 251 654 q 122 436 122 522 l 122 0 l 0 0 l 0 1013 l 122 1013 l 122 633 q 218 727 149 694 q 362 760 287 760 q 552 676 484 760 q 615 472 615 600 \"\n    },\n    \".\": {\n        x_min: 0,\n        x_max: 142,\n        ha: 239,\n        o: \"m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 \"\n    },\n    \"φ\": {\n        x_min: -2,\n        x_max: 878,\n        ha: 974,\n        o: \"m 496 -279 l 378 -279 l 378 -17 q 101 88 204 -17 q -2 367 -2 194 q 68 626 -2 510 q 283 758 151 758 l 283 646 q 167 537 209 626 q 133 373 133 462 q 192 177 133 254 q 378 93 259 93 l 378 758 q 445 764 426 763 q 476 765 464 765 q 765 659 653 765 q 878 377 878 553 q 771 96 878 209 q 496 -17 665 -17 l 496 -279 m 496 93 l 514 93 q 687 183 623 93 q 746 380 746 265 q 691 569 746 491 q 522 658 629 658 l 496 656 l 496 93 \"\n    },\n    \";\": {\n        x_min: 0,\n        x_max: 142,\n        ha: 239,\n        o: \"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 -12 q 105 -132 142 -82 q 0 -206 68 -182 l 0 -138 q 58 -82 43 -123 q 68 0 68 -56 l 0 0 l 0 151 l 142 151 l 142 -12 \"\n    },\n    f: {\n        x_min: 0,\n        x_max: 378,\n        ha: 472,\n        o: \"m 378 638 l 246 638 l 246 0 l 121 0 l 121 638 l 0 638 l 0 738 l 121 738 q 137 935 121 887 q 290 1028 171 1028 q 320 1027 305 1028 q 378 1021 334 1026 l 378 908 q 323 918 346 918 q 257 870 273 918 q 246 780 246 840 l 246 738 l 378 738 l 378 638 \"\n    },\n    \"“\": {\n        x_min: 1,\n        x_max: 348.21875,\n        ha: 454,\n        o: \"m 140 670 l 1 670 l 1 830 q 37 943 1 897 q 140 1011 74 990 l 140 947 q 82 900 97 940 q 68 810 68 861 l 140 810 l 140 670 m 348 670 l 209 670 l 209 830 q 245 943 209 897 q 348 1011 282 990 l 348 947 q 290 900 305 940 q 276 810 276 861 l 348 810 l 348 670 \"\n    },\n    A: {\n        x_min: 0.03125,\n        x_max: 906.953125,\n        ha: 1008,\n        o: \"m 906 0 l 756 0 l 648 303 l 251 303 l 142 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 610 421 l 452 867 l 293 421 l 610 421 \"\n    },\n    \"‘\": {\n        x_min: 1,\n        x_max: 139.890625,\n        ha: 236,\n        o: \"m 139 670 l 1 670 l 1 830 q 37 943 1 897 q 139 1011 74 990 l 139 947 q 82 900 97 940 q 68 810 68 861 l 139 810 l 139 670 \"\n    },\n    \"ϊ\": {\n        x_min: -70,\n        x_max: 283,\n        ha: 361,\n        o: \"m 283 800 l 173 800 l 173 925 l 283 925 l 283 800 m 40 800 l -70 800 l -70 925 l 40 925 l 40 800 m 283 3 q 232 -10 257 -5 q 181 -15 206 -15 q 84 26 118 -15 q 41 200 41 79 l 41 737 l 166 737 l 167 215 q 171 141 167 157 q 225 101 182 101 q 247 103 238 101 q 283 112 256 104 l 283 3 \"\n    },\n    \"π\": {\n        x_min: -0.21875,\n        x_max: 773.21875,\n        ha: 857,\n        o: \"m 773 -7 l 707 -11 q 575 40 607 -11 q 552 174 552 77 l 552 226 l 552 626 l 222 626 l 222 0 l 97 0 l 97 626 l 0 626 l 0 737 l 773 737 l 773 626 l 676 626 l 676 171 q 695 103 676 117 q 773 90 714 90 l 773 -7 \"\n    },\n    \"ά\": {\n        x_min: 0,\n        x_max: 765.5625,\n        ha: 809,\n        o: \"m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 727 407 760 q 563 637 524 695 l 563 738 l 685 738 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 95 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 m 604 1040 l 415 819 l 332 819 l 466 1040 l 604 1040 \"\n    },\n    O: {\n        x_min: 0,\n        x_max: 958,\n        ha: 1057,\n        o: \"m 485 1041 q 834 882 702 1041 q 958 512 958 734 q 834 136 958 287 q 481 -26 702 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 728 q 485 1041 263 1041 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 669 q 480 912 640 912 q 226 784 321 912 q 142 504 142 670 q 226 224 142 339 q 480 98 319 98 \"\n    },\n    n: {\n        x_min: 0,\n        x_max: 615,\n        ha: 724,\n        o: \"m 615 463 l 615 0 l 490 0 l 490 454 q 453 592 490 537 q 331 656 410 656 q 178 585 240 656 q 117 421 117 514 l 117 0 l 0 0 l 0 738 l 117 738 l 117 630 q 218 728 150 693 q 359 764 286 764 q 552 675 484 764 q 615 463 615 593 \"\n    },\n    l: {\n        x_min: 41,\n        x_max: 166,\n        ha: 279,\n        o: \"m 166 0 l 41 0 l 41 1013 l 166 1013 l 166 0 \"\n    },\n    \"\\xa4\": {\n        x_min: 40.09375,\n        x_max: 728.796875,\n        ha: 825,\n        o: \"m 728 304 l 649 224 l 512 363 q 383 331 458 331 q 256 363 310 331 l 119 224 l 40 304 l 177 441 q 150 553 150 493 q 184 673 150 621 l 40 818 l 119 898 l 267 749 q 321 766 291 759 q 384 773 351 773 q 447 766 417 773 q 501 749 477 759 l 649 898 l 728 818 l 585 675 q 612 618 604 648 q 621 553 621 587 q 591 441 621 491 l 728 304 m 384 682 q 280 643 318 682 q 243 551 243 604 q 279 461 243 499 q 383 423 316 423 q 487 461 449 423 q 525 553 525 500 q 490 641 525 605 q 384 682 451 682 \"\n    },\n    \"κ\": {\n        x_min: 0,\n        x_max: 632.328125,\n        ha: 679,\n        o: \"m 632 0 l 482 0 l 225 384 l 124 288 l 124 0 l 0 0 l 0 738 l 124 738 l 124 446 l 433 738 l 596 738 l 312 466 l 632 0 \"\n    },\n    p: {\n        x_min: 0,\n        x_max: 685,\n        ha: 786,\n        o: \"m 685 364 q 598 96 685 205 q 350 -23 504 -23 q 121 89 205 -23 l 121 -278 l 0 -278 l 0 738 l 121 738 l 121 633 q 220 726 159 691 q 351 761 280 761 q 598 636 504 761 q 685 364 685 522 m 557 371 q 501 560 557 481 q 330 651 437 651 q 162 559 223 651 q 108 366 108 479 q 162 177 108 254 q 333 87 224 87 q 502 178 441 87 q 557 371 557 258 \"\n    },\n    \"‡\": {\n        x_min: 0,\n        x_max: 777,\n        ha: 835,\n        o: \"m 458 238 l 458 0 l 319 0 l 319 238 l 0 238 l 0 360 l 319 360 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 l 777 804 l 777 683 l 458 683 l 458 360 l 777 360 l 777 238 l 458 238 \"\n    },\n    \"ψ\": {\n        x_min: 0,\n        x_max: 808,\n        ha: 907,\n        o: \"m 465 -278 l 341 -278 l 341 -15 q 87 102 180 -15 q 0 378 0 210 l 0 739 l 133 739 l 133 379 q 182 195 133 275 q 341 98 242 98 l 341 922 l 465 922 l 465 98 q 623 195 563 98 q 675 382 675 278 l 675 742 l 808 742 l 808 381 q 720 104 808 213 q 466 -13 627 -13 l 465 -278 \"\n    },\n    \"η\": {\n        x_min: 0.78125,\n        x_max: 697,\n        ha: 810,\n        o: \"m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 720 124 755 q 200 630 193 686 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 \"\n    }\n};\nvar cssFontWeight = \"normal\";\nvar ascender = 1189;\nvar underlinePosition = -100;\nvar cssFontStyle = \"normal\";\nvar boundingBox = {\n    yMin: -334,\n    xMin: -111,\n    yMax: 1189,\n    xMax: 1672\n};\nvar resolution = 1000;\nvar original_font_information = {\n    postscript_name: \"Helvetiker-Regular\",\n    version_string: \"Version 1.00 2004 initial release\",\n    vendor_url: \"http://www.magenta.gr/\",\n    full_font_name: \"Helvetiker\",\n    font_family_name: \"Helvetiker\",\n    copyright: \"Copyright (c) Μagenta ltd, 2004\",\n    description: \"\",\n    trademark: \"\",\n    designer: \"\",\n    designer_url: \"\",\n    unique_font_identifier: \"Μagenta ltd:Helvetiker:22-10-104\",\n    license_url: \"http://www.ellak.gr/fonts/MgOpen/license.html\",\n    license_description: 'Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.\\r\\n\\r\\nPermission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license (\"Fonts\") and associated documentation files (the \"Font Software\"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions: \\r\\n\\r\\nThe above copyright and this permission notice shall be included in all copies of one or more of the Font Software typefaces.\\r\\n\\r\\nThe Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or characters may be added to the Fonts, only if the fonts are renamed to names not containing the word \"MgOpen\", or if the modifications are accepted for inclusion in the Font Software itself by the each appointed Administrator.\\r\\n\\r\\nThis License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the \"MgOpen\" name.\\r\\n\\r\\nThe Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself. \\r\\n\\r\\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL MAGENTA OR PERSONS OR BODIES IN CHARGE OF ADMINISTRATION AND MAINTENANCE OF THE FONT SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.',\n    manufacturer_name: \"Μagenta ltd\",\n    font_sub_family_name: \"Regular\"\n};\nvar descender = -334;\nvar familyName = \"Helvetiker\";\nvar lineHeight = 1522;\nvar underlineThickness = 50;\nvar defaultTypeFace = {\n    glyphs: glyphs,\n    cssFontWeight: cssFontWeight,\n    ascender: ascender,\n    underlinePosition: underlinePosition,\n    cssFontStyle: cssFontStyle,\n    boundingBox: boundingBox,\n    resolution: resolution,\n    original_font_information: original_font_information,\n    descender: descender,\n    familyName: familyName,\n    lineHeight: lineHeight,\n    underlineThickness: underlineThickness\n};\nvar THREE$3 = _objectSpread2(_objectSpread2({}, window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    BoxGeometry: three__WEBPACK_IMPORTED_MODULE_8__.BoxGeometry,\n    CircleGeometry: three__WEBPACK_IMPORTED_MODULE_8__.CircleGeometry,\n    DoubleSide: three__WEBPACK_IMPORTED_MODULE_8__.DoubleSide,\n    Group: three__WEBPACK_IMPORTED_MODULE_8__.Group,\n    Mesh: three__WEBPACK_IMPORTED_MODULE_8__.Mesh,\n    MeshLambertMaterial: three__WEBPACK_IMPORTED_MODULE_8__.MeshLambertMaterial,\n    TextGeometry: three_examples_jsm_geometries_TextGeometry_js__WEBPACK_IMPORTED_MODULE_27__.TextGeometry,\n    Vector3: three__WEBPACK_IMPORTED_MODULE_8__.Vector3\n}), {}, {\n    Font: three_examples_jsm_loaders_FontLoader_js__WEBPACK_IMPORTED_MODULE_28__.Font,\n    TextGeometry: three_examples_jsm_geometries_TextGeometry_js__WEBPACK_IMPORTED_MODULE_27__.TextGeometry\n});\n//\nvar LabelsLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        labelsData: {\n            \"default\": []\n        },\n        labelLat: {\n            \"default\": \"lat\"\n        },\n        labelLng: {\n            \"default\": \"lng\"\n        },\n        labelAltitude: {\n            \"default\": 0\n        },\n        // in units of globe radius\n        labelText: {\n            \"default\": \"text\"\n        },\n        labelSize: {\n            \"default\": 0.5\n        },\n        // text height in deg\n        labelTypeFace: {\n            \"default\": defaultTypeFace,\n            onChange: function onChange(tf, state) {\n                state.font = new THREE$3.Font(tf);\n            }\n        },\n        labelColor: {\n            \"default\": function _default() {\n                return \"lightgrey\";\n            }\n        },\n        labelRotation: {\n            \"default\": 0\n        },\n        // clockwise degrees, relative to the latitute parallel plane\n        labelResolution: {\n            \"default\": 3\n        },\n        // how many segments in the text's curves\n        labelIncludeDot: {\n            \"default\": true\n        },\n        labelDotRadius: {\n            \"default\": 0.1\n        },\n        // in deg\n        labelDotOrientation: {\n            \"default\": function _default() {\n                return \"bottom\";\n            }\n        },\n        // right, top, bottom\n        labelsTransitionDuration: {\n            \"default\": 1000,\n            triggerUpdate: false\n        } // ms\n    },\n    init: function init(threeObj, state, _ref) {\n        var tweenGroup = _ref.tweenGroup;\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.tweenGroup = tweenGroup;\n        var circleGeometry = new THREE$3.CircleGeometry(1, 32);\n        state.dataMapper = new ThreeDigest(threeObj, {\n            objBindAttr: \"__threeObjLabel\"\n        }).onCreateObj(function() {\n            var material = new THREE$3.MeshLambertMaterial();\n            material.side = three__WEBPACK_IMPORTED_MODULE_8__.DoubleSide;\n            var obj = new THREE$3.Group(); // container\n            obj.add(new THREE$3.Mesh(circleGeometry, material)); // dot\n            var textObj = new THREE$3.Mesh(undefined, material);\n            obj.add(textObj); // text\n            // text invisible bounding box (raycaster trap)\n            var bbObj = new THREE$3.Mesh();\n            bbObj.visible = false;\n            textObj.add(bbObj);\n            obj.__globeObjType = \"label\"; // Add object type\n            return obj;\n        });\n    },\n    update: function update(state) {\n        // Data accessors\n        var latAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.labelLat);\n        var lngAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.labelLng);\n        var altitudeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.labelAltitude);\n        var textAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.labelText);\n        var sizeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.labelSize);\n        var rotationAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.labelRotation);\n        var colorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.labelColor);\n        var includeDotAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.labelIncludeDot);\n        var dotRadiusAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.labelDotRadius);\n        var dotOrientationAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.labelDotOrientation);\n        var orientations = new Set([\n            \"right\",\n            \"top\",\n            \"bottom\"\n        ]);\n        var pxPerDeg = 2 * Math.PI * GLOBE_RADIUS / 360;\n        state.dataMapper.onUpdateObj(function(obj, d) {\n            var _obj$children = _slicedToArray(obj.children, 2), dotObj = _obj$children[0], textObj = _obj$children[1];\n            var _textObj$children = _slicedToArray(textObj.children, 1), bbObj = _textObj$children[0];\n            // update color\n            var color = colorAccessor(d);\n            var opacity = colorAlpha(color);\n            textObj.material.color.set(colorStr2Hex(color));\n            textObj.material.transparent = opacity < 1;\n            textObj.material.opacity = opacity;\n            // update dot\n            var includeDot = includeDotAccessor(d);\n            var dotOrient = dotOrientationAccessor(d);\n            !includeDot || !orientations.has(dotOrient) && (dotOrient = \"bottom\");\n            // size dot\n            var dotR = includeDot ? +dotRadiusAccessor(d) * pxPerDeg : 1e-12;\n            dotObj.scale.x = dotObj.scale.y = dotR;\n            // create text geometry\n            var textHeight = +sizeAccessor(d) * pxPerDeg;\n            textObj.geometry && textObj.geometry.dispose();\n            textObj.geometry = new THREE$3.TextGeometry(textAccessor(d), {\n                font: state.font,\n                size: textHeight,\n                depth: 0,\n                height: 0,\n                curveSegments: state.labelResolution\n            });\n            // update text convex hull/bounding box\n            bbObj.geometry && bbObj.geometry.dispose();\n            textObj.geometry.computeBoundingBox();\n            bbObj.geometry = _construct(THREE$3.BoxGeometry, _toConsumableArray(new THREE$3.Vector3().subVectors(textObj.geometry.boundingBox.max, textObj.geometry.boundingBox.min).toArray()));\n            // center text (otherwise anchor is on bottom-left)\n            dotOrient !== \"right\" && textObj.geometry.center();\n            if (includeDot) {\n                // translate text\n                var padding = dotR + textHeight / 2;\n                dotOrient === \"right\" && (textObj.position.x = padding);\n                textObj.position.y = ({\n                    right: -textHeight / 2,\n                    // center vertically\n                    top: padding + textHeight / 2,\n                    bottom: -padding - textHeight / 2\n                })[dotOrient];\n            }\n            // animations\n            var applyPosition = function applyPosition(td) {\n                var _obj$__currentTargetD = obj.__currentTargetD = td, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng, alt = _obj$__currentTargetD.alt, rot = _obj$__currentTargetD.rot, scale = _obj$__currentTargetD.scale;\n                // position center\n                Object.assign(obj.position, polar2Cartesian(lat, lng, alt));\n                // rotate\n                obj.lookAt(state.scene.localToWorld(new THREE$3.Vector3(0, 0, 0))); // face globe (local) center\n                obj.rotateY(Math.PI); // face outwards\n                // rotate clockwise relative to lat parallel\n                obj.rotateZ(-rot * Math.PI / 180);\n                // scale it\n                obj.scale.x = obj.scale.y = obj.scale.z = scale;\n            };\n            var targetD = {\n                lat: +latAccessor(d),\n                lng: +lngAccessor(d),\n                alt: +altitudeAccessor(d),\n                rot: +rotationAccessor(d),\n                scale: 1\n            };\n            var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {\n                scale: 1e-12\n            });\n            if (Object.keys(targetD).some(function(k) {\n                return currentTargetD[k] !== targetD[k];\n            })) {\n                if (!state.labelsTransitionDuration || state.labelsTransitionDuration < 0) {\n                    // set final position\n                    applyPosition(targetD);\n                } else {\n                    // animate\n                    state.tweenGroup.add(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween(currentTargetD).to(targetD, state.labelsTransitionDuration).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Quadratic.InOut).onUpdate(applyPosition).start());\n                }\n            }\n        }).digest(state.labelsData);\n    }\n});\nvar THREE$2 = _objectSpread2(_objectSpread2({}, window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {}), {}, {\n    CSS2DObject: three_examples_jsm_renderers_CSS2DRenderer_js__WEBPACK_IMPORTED_MODULE_29__.CSS2DObject\n});\n//\nvar HtmlElementsLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        htmlElementsData: {\n            \"default\": []\n        },\n        htmlLat: {\n            \"default\": \"lat\"\n        },\n        htmlLng: {\n            \"default\": \"lng\"\n        },\n        htmlAltitude: {\n            \"default\": 0\n        },\n        // in units of globe radius\n        htmlElement: {},\n        htmlTransitionDuration: {\n            \"default\": 1000,\n            triggerUpdate: false\n        },\n        // ms\n        isBehindGlobe: {\n            onChange: function onChange() {\n                this.updateObjVisibility();\n            },\n            triggerUpdate: false\n        }\n    },\n    methods: {\n        updateObjVisibility: function updateObjVisibility(state, obj) {\n            if (!state.dataMapper) return;\n            // default to all if no obj specified\n            var objs = obj ? [\n                obj\n            ] : state.dataMapper.entries().map(function(_ref) {\n                var _ref2 = _slicedToArray(_ref, 2), o = _ref2[1];\n                return o;\n            }).filter(function(d) {\n                return d;\n            });\n            // Hide elements on the far side of the globe\n            objs.forEach(function(obj) {\n                return obj.visible = !state.isBehindGlobe || !state.isBehindGlobe(obj.position);\n            });\n        }\n    },\n    init: function init(threeObj, state, _ref3) {\n        var tweenGroup = _ref3.tweenGroup;\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.tweenGroup = tweenGroup;\n        state.dataMapper = new ThreeDigest(threeObj, {\n            objBindAttr: \"__threeObjHtml\"\n        }).onCreateObj(function(d) {\n            var elem = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.htmlElement)(d);\n            var obj = new THREE$2.CSS2DObject(elem);\n            obj.__globeObjType = \"html\"; // Add object type\n            return obj;\n        });\n    },\n    update: function update(state, changedProps) {\n        var _this = this;\n        // Data accessors\n        var latAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.htmlLat);\n        var lngAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.htmlLng);\n        var altitudeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.htmlAltitude);\n        // objs need to be recreated if this prop has changed\n        changedProps.hasOwnProperty(\"htmlElement\") && state.dataMapper.clear();\n        state.dataMapper.onUpdateObj(function(obj, d) {\n            var applyUpdate = function applyUpdate(td) {\n                var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng;\n                Object.assign(obj.position, polar2Cartesian(lat, lng, alt));\n                _this.updateObjVisibility(obj);\n            };\n            var targetD = {\n                lat: +latAccessor(d),\n                lng: +lngAccessor(d),\n                alt: +altitudeAccessor(d)\n            };\n            if (!state.htmlTransitionDuration || state.htmlTransitionDuration < 0 || !obj.__currentTargetD) {\n                // set final position\n                applyUpdate(targetD);\n            } else {\n                // animate\n                state.tweenGroup.add(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween(obj.__currentTargetD).to(targetD, state.htmlTransitionDuration).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Quadratic.InOut).onUpdate(applyUpdate).start());\n            }\n        }).digest(state.htmlElementsData);\n    }\n});\nvar THREE$1 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    Euler: three__WEBPACK_IMPORTED_MODULE_8__.Euler,\n    Group: three__WEBPACK_IMPORTED_MODULE_8__.Group,\n    Mesh: three__WEBPACK_IMPORTED_MODULE_8__.Mesh,\n    MeshLambertMaterial: three__WEBPACK_IMPORTED_MODULE_8__.MeshLambertMaterial,\n    SphereGeometry: three__WEBPACK_IMPORTED_MODULE_8__.SphereGeometry\n};\n//\nvar ObjectsLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        objectsData: {\n            \"default\": []\n        },\n        objectLat: {\n            \"default\": \"lat\"\n        },\n        objectLng: {\n            \"default\": \"lng\"\n        },\n        objectAltitude: {\n            \"default\": 0.01\n        },\n        // in units of globe radius\n        objectFacesSurface: {\n            \"default\": true\n        },\n        objectRotation: {},\n        objectThreeObject: {\n            \"default\": new THREE$1.Mesh(// default object: yellow sphere\n            new THREE$1.SphereGeometry(1, 16, 8), new THREE$1.MeshLambertMaterial({\n                color: \"#ffffaa\",\n                transparent: true,\n                opacity: 0.7\n            }))\n        }\n    },\n    init: function init(threeObj, state) {\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.dataMapper = new ThreeDigest(threeObj, {\n            objBindAttr: \"__threeObjObject\"\n        }).onCreateObj(function(d) {\n            var obj = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.objectThreeObject)(d);\n            if (state.objectThreeObject === obj) {\n                // clone object if it's a shared object among all points\n                obj = obj.clone();\n            }\n            var g = new THREE$1.Group();\n            g.add(obj);\n            g.__globeObjType = \"object\"; // Add object type\n            return g;\n        });\n    },\n    update: function update(state, changedProps) {\n        // Data accessors\n        var latAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.objectLat);\n        var lngAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.objectLng);\n        var altitudeAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.objectAltitude);\n        var parallelAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.objectFacesSurface);\n        var rotationAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.objectRotation);\n        // objs need to be recreated if this prop has changed\n        changedProps.hasOwnProperty(\"objectThreeObject\") && state.dataMapper.clear();\n        state.dataMapper.onUpdateObj(function(objG, d) {\n            var lat = +latAccessor(d);\n            var lng = +lngAccessor(d);\n            var alt = +altitudeAccessor(d);\n            Object.assign(objG.position, polar2Cartesian(lat, lng, alt));\n            parallelAccessor(d) ? objG.setRotationFromEuler(new three__WEBPACK_IMPORTED_MODULE_8__.Euler(deg2Rad$1(-lat), deg2Rad$1(lng), 0, \"YXZ\")) : objG.rotation.set(0, 0, 0);\n            var obj = objG.children[0];\n            var rot = rotationAccessor(d);\n            rot && obj.setRotationFromEuler(new three__WEBPACK_IMPORTED_MODULE_8__.Euler(deg2Rad$1(rot.x || 0), deg2Rad$1(rot.y || 0), deg2Rad$1(rot.z || 0)));\n        }).digest(state.objectsData);\n    }\n});\n//\nvar CustomLayerKapsule = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: {\n        customLayerData: {\n            \"default\": []\n        },\n        customThreeObject: {},\n        customThreeObjectUpdate: {\n            triggerUpdate: false\n        }\n    },\n    init: function init(threeObj, state) {\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.dataMapper = new ThreeDigest(threeObj, {\n            objBindAttr: \"__threeObjCustom\"\n        }).onCreateObj(function(d) {\n            var obj = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.customThreeObject)(d, GLOBE_RADIUS);\n            if (obj) {\n                if (state.customThreeObject === obj) {\n                    // clone object if it's a shared object among all points\n                    obj = obj.clone();\n                }\n                obj.__globeObjType = \"custom\"; // Add object type\n            }\n            return obj;\n        });\n    },\n    update: function update(state, changedProps) {\n        if (!state.customThreeObjectUpdate) {\n            emptyObject(state.scene);\n        } // Clear the existing objects to create all new, if there's no update method (brute-force)\n        var customObjectUpdateAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.customThreeObjectUpdate);\n        // objs need to be recreated if this prop has changed\n        changedProps.hasOwnProperty(\"customThreeObject\") && state.dataMapper.clear();\n        state.dataMapper.onUpdateObj(function(obj, d) {\n            return customObjectUpdateAccessor(obj, d, GLOBE_RADIUS);\n        }).digest(state.customLayerData);\n    }\n});\nvar THREE = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n : {\n    Camera: three__WEBPACK_IMPORTED_MODULE_8__.Camera,\n    Frustum: three__WEBPACK_IMPORTED_MODULE_8__.Frustum,\n    Group: three__WEBPACK_IMPORTED_MODULE_8__.Group,\n    Matrix4: three__WEBPACK_IMPORTED_MODULE_8__.Matrix4,\n    Vector2: three__WEBPACK_IMPORTED_MODULE_8__.Vector2,\n    Vector3: three__WEBPACK_IMPORTED_MODULE_8__.Vector3\n};\n//\nvar layers = [\n    \"globeLayer\",\n    \"pointsLayer\",\n    \"arcsLayer\",\n    \"hexBinLayer\",\n    \"heatmapsLayer\",\n    \"polygonsLayer\",\n    \"hexedPolygonsLayer\",\n    \"pathsLayer\",\n    \"tilesLayer\",\n    \"particlesLayer\",\n    \"ringsLayer\",\n    \"labelsLayer\",\n    \"htmlElementsLayer\",\n    \"objectsLayer\",\n    \"customLayer\"\n];\n// Expose config from layers\nvar bindGlobeLayer = linkKapsule(\"globeLayer\", GlobeLayerKapsule);\nvar linkedGlobeLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"globeImageUrl\",\n    \"bumpImageUrl\",\n    \"globeTileEngineUrl\",\n    \"globeTileEngineMaxLevel\",\n    \"showGlobe\",\n    \"showGraticules\",\n    \"showAtmosphere\",\n    \"atmosphereColor\",\n    \"atmosphereAltitude\"\n].map(function(p) {\n    return _defineProperty({}, p, bindGlobeLayer.linkProp(p));\n})));\nvar linkedGlobeLayerMethods = Object.assign.apply(Object, _toConsumableArray([\n    \"globeMaterial\"\n].map(function(p) {\n    return _defineProperty({}, p, bindGlobeLayer.linkMethod(p));\n})));\nvar bindPointsLayer = linkKapsule(\"pointsLayer\", PointsLayerKapsule);\nvar linkedPointsLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"pointsData\",\n    \"pointLat\",\n    \"pointLng\",\n    \"pointColor\",\n    \"pointAltitude\",\n    \"pointRadius\",\n    \"pointResolution\",\n    \"pointsMerge\",\n    \"pointsTransitionDuration\"\n].map(function(p) {\n    return _defineProperty({}, p, bindPointsLayer.linkProp(p));\n})));\nvar bindArcsLayer = linkKapsule(\"arcsLayer\", ArcsLayerKapsule);\nvar linkedArcsLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"arcsData\",\n    \"arcStartLat\",\n    \"arcStartLng\",\n    \"arcEndLat\",\n    \"arcEndLng\",\n    \"arcColor\",\n    \"arcAltitude\",\n    \"arcAltitudeAutoScale\",\n    \"arcStroke\",\n    \"arcCurveResolution\",\n    \"arcCircularResolution\",\n    \"arcDashLength\",\n    \"arcDashGap\",\n    \"arcDashInitialGap\",\n    \"arcDashAnimateTime\",\n    \"arcsTransitionDuration\"\n].map(function(p) {\n    return _defineProperty({}, p, bindArcsLayer.linkProp(p));\n})));\nvar bindHexBinLayer = linkKapsule(\"hexBinLayer\", HexBinLayerKapsule);\nvar linkedHexBinLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"hexBinPointsData\",\n    \"hexBinPointLat\",\n    \"hexBinPointLng\",\n    \"hexBinPointWeight\",\n    \"hexBinResolution\",\n    \"hexMargin\",\n    \"hexTopCurvatureResolution\",\n    \"hexTopColor\",\n    \"hexSideColor\",\n    \"hexAltitude\",\n    \"hexBinMerge\",\n    \"hexTransitionDuration\"\n].map(function(p) {\n    return _defineProperty({}, p, bindHexBinLayer.linkProp(p));\n})));\nvar bindHeatmapsLayer = linkKapsule(\"heatmapsLayer\", HeatmapsLayerKapsule);\nvar linkedHeatmapsLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"heatmapsData\",\n    \"heatmapPoints\",\n    \"heatmapPointLat\",\n    \"heatmapPointLng\",\n    \"heatmapPointWeight\",\n    \"heatmapBandwidth\",\n    \"heatmapColorFn\",\n    \"heatmapColorSaturation\",\n    \"heatmapBaseAltitude\",\n    \"heatmapTopAltitude\",\n    \"heatmapsTransitionDuration\"\n].map(function(p) {\n    return _defineProperty({}, p, bindHeatmapsLayer.linkProp(p));\n})));\nvar bindHexedPolygonsLayer = linkKapsule(\"hexedPolygonsLayer\", HexedPolygonsLayerKapsule);\nvar linkedHexedPolygonsLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"hexPolygonsData\",\n    \"hexPolygonGeoJsonGeometry\",\n    \"hexPolygonColor\",\n    \"hexPolygonAltitude\",\n    \"hexPolygonResolution\",\n    \"hexPolygonMargin\",\n    \"hexPolygonUseDots\",\n    \"hexPolygonCurvatureResolution\",\n    \"hexPolygonDotResolution\",\n    \"hexPolygonsTransitionDuration\"\n].map(function(p) {\n    return _defineProperty({}, p, bindHexedPolygonsLayer.linkProp(p));\n})));\nvar bindPolygonsLayer = linkKapsule(\"polygonsLayer\", PolygonsLayerKapsule);\nvar linkedPolygonsLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"polygonsData\",\n    \"polygonGeoJsonGeometry\",\n    \"polygonCapColor\",\n    \"polygonCapMaterial\",\n    \"polygonSideColor\",\n    \"polygonSideMaterial\",\n    \"polygonStrokeColor\",\n    \"polygonAltitude\",\n    \"polygonCapCurvatureResolution\",\n    \"polygonsTransitionDuration\"\n].map(function(p) {\n    return _defineProperty({}, p, bindPolygonsLayer.linkProp(p));\n})));\nvar bindPathsLayer = linkKapsule(\"pathsLayer\", PathsLayerKapsule);\nvar linkedPathsLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"pathsData\",\n    \"pathPoints\",\n    \"pathPointLat\",\n    \"pathPointLng\",\n    \"pathPointAlt\",\n    \"pathResolution\",\n    \"pathColor\",\n    \"pathStroke\",\n    \"pathDashLength\",\n    \"pathDashGap\",\n    \"pathDashInitialGap\",\n    \"pathDashAnimateTime\",\n    \"pathTransitionDuration\"\n].map(function(p) {\n    return _defineProperty({}, p, bindPathsLayer.linkProp(p));\n})));\nvar bindTilesLayer = linkKapsule(\"tilesLayer\", TilesLayerKapsule);\nvar linkedTilesLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"tilesData\",\n    \"tileLat\",\n    \"tileLng\",\n    \"tileAltitude\",\n    \"tileWidth\",\n    \"tileHeight\",\n    \"tileUseGlobeProjection\",\n    \"tileMaterial\",\n    \"tileCurvatureResolution\",\n    \"tilesTransitionDuration\"\n].map(function(p) {\n    return _defineProperty({}, p, bindTilesLayer.linkProp(p));\n})));\nvar bindParticlesLayer = linkKapsule(\"particlesLayer\", ParticlesLayerKapsule);\nvar linkedParticlesLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"particlesData\",\n    \"particlesList\",\n    \"particleLat\",\n    \"particleLng\",\n    \"particleAltitude\",\n    \"particlesSize\",\n    \"particlesSizeAttenuation\",\n    \"particlesColor\",\n    \"particlesTexture\"\n].map(function(p) {\n    return _defineProperty({}, p, bindParticlesLayer.linkProp(p));\n})));\nvar bindRingsLayer = linkKapsule(\"ringsLayer\", RingsLayerKapsule);\nvar linkedRingsLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"ringsData\",\n    \"ringLat\",\n    \"ringLng\",\n    \"ringAltitude\",\n    \"ringColor\",\n    \"ringResolution\",\n    \"ringMaxRadius\",\n    \"ringPropagationSpeed\",\n    \"ringRepeatPeriod\"\n].map(function(p) {\n    return _defineProperty({}, p, bindRingsLayer.linkProp(p));\n})));\nvar bindLabelsLayer = linkKapsule(\"labelsLayer\", LabelsLayerKapsule);\nvar linkedLabelsLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"labelsData\",\n    \"labelLat\",\n    \"labelLng\",\n    \"labelAltitude\",\n    \"labelRotation\",\n    \"labelText\",\n    \"labelSize\",\n    \"labelTypeFace\",\n    \"labelColor\",\n    \"labelResolution\",\n    \"labelIncludeDot\",\n    \"labelDotRadius\",\n    \"labelDotOrientation\",\n    \"labelsTransitionDuration\"\n].map(function(p) {\n    return _defineProperty({}, p, bindLabelsLayer.linkProp(p));\n})));\nvar bindHtmlElementsLayer = linkKapsule(\"htmlElementsLayer\", HtmlElementsLayerKapsule);\nvar linkedHtmlElementsLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"htmlElementsData\",\n    \"htmlLat\",\n    \"htmlLng\",\n    \"htmlAltitude\",\n    \"htmlElement\",\n    \"htmlTransitionDuration\"\n].map(function(p) {\n    return _defineProperty({}, p, bindHtmlElementsLayer.linkProp(p));\n})));\nvar bindObjectsLayer = linkKapsule(\"objectsLayer\", ObjectsLayerKapsule);\nvar linkedObjectsLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"objectsData\",\n    \"objectLat\",\n    \"objectLng\",\n    \"objectAltitude\",\n    \"objectRotation\",\n    \"objectFacesSurface\",\n    \"objectThreeObject\"\n].map(function(p) {\n    return _defineProperty({}, p, bindObjectsLayer.linkProp(p));\n})));\nvar bindCustomLayer = linkKapsule(\"customLayer\", CustomLayerKapsule);\nvar linkedCustomLayerProps = Object.assign.apply(Object, _toConsumableArray([\n    \"customLayerData\",\n    \"customThreeObject\",\n    \"customThreeObjectUpdate\"\n].map(function(p) {\n    return _defineProperty({}, p, bindCustomLayer.linkProp(p));\n})));\n//\nvar Globe = (0,kapsule__WEBPACK_IMPORTED_MODULE_9__[\"default\"])({\n    props: _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({\n        onGlobeReady: {\n            triggerUpdate: false\n        },\n        rendererSize: {\n            \"default\": new THREE.Vector2(window.innerWidth, window.innerHeight),\n            onChange: function onChange(rendererSize, state) {\n                state.pathsLayer.rendererSize(rendererSize);\n            },\n            triggerUpdate: false\n        }\n    }, linkedGlobeLayerProps), linkedPointsLayerProps), linkedArcsLayerProps), linkedHexBinLayerProps), linkedHeatmapsLayerProps), linkedPolygonsLayerProps), linkedHexedPolygonsLayerProps), linkedPathsLayerProps), linkedTilesLayerProps), linkedParticlesLayerProps), linkedRingsLayerProps), linkedLabelsLayerProps), linkedHtmlElementsLayerProps), linkedObjectsLayerProps), linkedCustomLayerProps),\n    methods: _objectSpread2({\n        getGlobeRadius: getGlobeRadius,\n        getCoords: function getCoords(state) {\n            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                args[_key - 1] = arguments[_key];\n            }\n            return polar2Cartesian.apply(undefined, args);\n        },\n        toGeoCoords: function toGeoCoords(state) {\n            for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                args[_key2 - 1] = arguments[_key2];\n            }\n            return cartesian2Polar.apply(undefined, args);\n        },\n        setPointOfView: function setPointOfView(state, camera) {\n            var globalPov = camera instanceof THREE.Camera ? camera.position : camera; // for backwards compatibility\n            var globeRadius = getGlobeRadius();\n            var isBehindGlobe = undefined;\n            if (state.scene && globalPov) {\n                var pov, povDist, povEdgeDist, povEdgeAngle;\n                isBehindGlobe = function isBehindGlobe(pos) {\n                    pov === undefined && (pov = globalPov.clone().applyMatrix4(state.scene.matrixWorld.clone().invert())); // camera position in local space\n                    povDist === undefined && (povDist = pov.length());\n                    // check if it's behind plane of globe's visible area\n                    // maxSurfacePosAngle === undefined && (maxSurfacePosAngle = Math.acos(globeRadius / povDist));\n                    // return pov.angleTo(pos) > maxSurfacePosAngle;\n                    // more sophisticated method that checks also pos altitude\n                    povEdgeDist === undefined && (povEdgeDist = Math.sqrt(Math.pow(povDist, 2) - Math.pow(globeRadius, 2)));\n                    povEdgeAngle === undefined && (povEdgeAngle = Math.acos(povEdgeDist / povDist));\n                    var povPosDist = pov.distanceTo(pos);\n                    if (povPosDist < povEdgeDist) return false; // pos is closer than visible edge of globe\n                    var posDist = pos.length();\n                    var povPosAngle = Math.acos((Math.pow(povDist, 2) + Math.pow(povPosDist, 2) - Math.pow(posDist, 2)) / (2 * povDist * povPosDist)); // triangle solver\n                    return povPosAngle < povEdgeAngle; // pos is within globe's visible area cone\n                };\n            }\n            // pass pov-related checker fns for layers that need it\n            state.layersThatNeedUpdatePov.forEach(function(l) {\n                return l.updatePov(camera);\n            });\n            state.layersThatNeedBehindGlobeChecker.forEach(function(l) {\n                return l.isBehindGlobe(isBehindGlobe);\n            });\n        },\n        pauseAnimation: function pauseAnimation(state) {\n            if (state.animationFrameRequestId !== null) {\n                cancelAnimationFrame(state.animationFrameRequestId);\n                state.animationFrameRequestId = null;\n            }\n            state.pausableLayers.forEach(function(l) {\n                var _l$pauseAnimation;\n                return (_l$pauseAnimation = l.pauseAnimation) === null || _l$pauseAnimation === undefined ? undefined : _l$pauseAnimation.call(l);\n            });\n            return this;\n        },\n        resumeAnimation: function resumeAnimation(state) {\n            if (state.animationFrameRequestId === null) {\n                this._animationCycle();\n            }\n            state.pausableLayers.forEach(function(l) {\n                var _l$resumeAnimation;\n                return (_l$resumeAnimation = l.resumeAnimation) === null || _l$resumeAnimation === undefined ? undefined : _l$resumeAnimation.call(l);\n            });\n            return this;\n        },\n        _animationCycle: function _animationCycle(state) {\n            state.animationFrameRequestId = requestAnimationFrame(this._animationCycle);\n            state.tweenGroup.update(); // run tween updates\n        },\n        _destructor: function _destructor(state) {\n            this.pauseAnimation();\n            state.destructableLayers.forEach(function(l) {\n                return l._destructor();\n            });\n        }\n    }, linkedGlobeLayerMethods),\n    stateInit: function stateInit() {\n        var tweenGroup = new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Group();\n        var initProps = {\n            tweenGroup: tweenGroup\n        };\n        var layers = {\n            globeLayer: GlobeLayerKapsule(initProps),\n            pointsLayer: PointsLayerKapsule(initProps),\n            arcsLayer: ArcsLayerKapsule(initProps),\n            hexBinLayer: HexBinLayerKapsule(initProps),\n            heatmapsLayer: HeatmapsLayerKapsule(initProps),\n            polygonsLayer: PolygonsLayerKapsule(initProps),\n            hexedPolygonsLayer: HexedPolygonsLayerKapsule(initProps),\n            pathsLayer: PathsLayerKapsule(initProps),\n            tilesLayer: TilesLayerKapsule(initProps),\n            particlesLayer: ParticlesLayerKapsule(initProps),\n            ringsLayer: RingsLayerKapsule(initProps),\n            labelsLayer: LabelsLayerKapsule(initProps),\n            htmlElementsLayer: HtmlElementsLayerKapsule(initProps),\n            objectsLayer: ObjectsLayerKapsule(initProps),\n            customLayer: CustomLayerKapsule(initProps)\n        };\n        return _objectSpread2(_objectSpread2({\n            tweenGroup: tweenGroup\n        }, layers), {}, {\n            layersThatNeedUpdatePov: Object.values(layers).filter(function(l) {\n                return l.hasOwnProperty(\"updatePov\");\n            }),\n            layersThatNeedBehindGlobeChecker: Object.values(layers).filter(function(l) {\n                return l.hasOwnProperty(\"isBehindGlobe\");\n            }),\n            destructableLayers: Object.values(layers).filter(function(l) {\n                return l.hasOwnProperty(\"_destructor\");\n            }),\n            pausableLayers: Object.values(layers).filter(function(l) {\n                return l.hasOwnProperty(\"pauseAnimation\");\n            })\n        });\n    },\n    init: function init(threeObj, state, _ref17) {\n        var _ref17$animateIn = _ref17.animateIn, animateIn = _ref17$animateIn === undefined ? true : _ref17$animateIn, _ref17$waitForGlobeRe = _ref17.waitForGlobeReady, waitForGlobeReady = _ref17$waitForGlobeRe === undefined ? true : _ref17$waitForGlobeRe;\n        // Clear the scene\n        emptyObject(threeObj);\n        // Main three object to manipulate\n        state.scene = threeObj;\n        state.scene.visible = false; // hide scene before globe initialization\n        // Add all layers groups\n        layers.forEach(function(layer) {\n            var g = new THREE.Group();\n            state.scene.add(g);\n            state[layer](g);\n        });\n        var initGlobe = function initGlobe() {\n            if (animateIn) {\n                // Animate build-in just once\n                state.scene.scale.set(1e-6, 1e-6, 1e-6);\n                state.tweenGroup.add(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween({\n                    k: 1e-6\n                }).to({\n                    k: 1\n                }, 600).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Quadratic.Out).onUpdate(function(_ref18) {\n                    var k = _ref18.k;\n                    return state.scene.scale.set(k, k, k);\n                }).start());\n                var rotAxis = new THREE.Vector3(0, 1, 0);\n                state.tweenGroup.add(new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Tween({\n                    rot: Math.PI * 2\n                }).to({\n                    rot: 0\n                }, 1200).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__.Easing.Quintic.Out).onUpdate(function(_ref19) {\n                    var rot = _ref19.rot;\n                    return state.scene.setRotationFromAxisAngle(rotAxis, rot);\n                }).start());\n            }\n            state.scene.visible = true;\n            state.onGlobeReady && state.onGlobeReady();\n        };\n        waitForGlobeReady ? state.globeLayer.onReady(initGlobe) : initGlobe();\n        // Kick-off animation cycle\n        this._animationCycle();\n    },\n    update: function update(state) {}\n});\nfunction fromKapsule(kapsule) {\n    var baseClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object;\n    var initKapsuleWithSelf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var Globe = /*#__PURE__*/ function(_baseClass) {\n        function Globe() {\n            var _this;\n            _classCallCheck(this, Globe);\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            _this = _callSuper(this, Globe, [].concat(args));\n            _this.__kapsuleInstance = _construct(kapsule, [].concat(_toConsumableArray(initKapsuleWithSelf ? [\n                _this\n            ] : []), args));\n            return _this;\n        }\n        _inherits(Globe, _baseClass);\n        return _createClass(Globe);\n    }(baseClass); // attach kapsule props/methods to class prototype\n    Object.keys(kapsule()).forEach(function(m) {\n        return Globe.prototype[m] = function() {\n            var _this$__kapsuleInstan;\n            var returnVal = (_this$__kapsuleInstan = this.__kapsuleInstance)[m].apply(_this$__kapsuleInstan, arguments);\n            return returnVal === this.__kapsuleInstance ? this // chain based on this class, not the kapsule obj\n             : returnVal;\n        };\n    });\n    return Globe;\n}\nvar three = window.THREE ? window.THREE : {\n    Group: three__WEBPACK_IMPORTED_MODULE_8__.Group\n}; // Prefer consumption from global THREE, if exists\nvar threeGlobe = fromKapsule(Globe, three.Group, true);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/three-globe/dist/three-globe.mjs\n");

/***/ })

};
;