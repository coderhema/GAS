"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/index-array-by";
exports.ids = ["vendor-chunks/index-array-by"];
exports.modules = {

/***/ "(ssr)/./node_modules/index-array-by/dist/index-array-by.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/index-array-by/dist/index-array-by.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ index)\n/* harmony export */ });\nfunction _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];\n    return n;\n}\nfunction _arrayWithHoles(r) {\n    if (Array.isArray(r)) return r;\n}\nfunction _arrayWithoutHoles(r) {\n    if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _iterableToArray(r) {\n    if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) ;\n            else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _objectWithoutProperties(e, t) {\n    if (null == e) return {};\n    var o, r, i = _objectWithoutPropertiesLoose(e, t);\n    if (Object.getOwnPropertySymbols) {\n        var s = Object.getOwnPropertySymbols(e);\n        for(r = 0; r < s.length; r++)o = s[r], t.includes(o) || ({}).propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n    }\n    return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n    if (null == r) return {};\n    var t = {};\n    for(var n in r)if (({}).hasOwnProperty.call(r, n)) {\n        if (e.includes(n)) continue;\n        t[n] = r[n];\n    }\n    return t;\n}\nfunction _slicedToArray(r, e) {\n    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _toConsumableArray(r) {\n    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r);\n        if (\"object\" != typeof i) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return String(t);\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _unsupportedIterableToArray(r, a) {\n    if (r) {\n        if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n        var t = ({}).toString.call(r).slice(8, -1);\n        return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n}\nvar index = function() {\n    var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var keyAccessors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var multiItem = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var flattenKeys = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var keys = (keyAccessors instanceof Array ? keyAccessors.length ? keyAccessors : [\n        undefined\n    ] : [\n        keyAccessors\n    ]).map(function(key) {\n        return {\n            keyAccessor: key,\n            isProp: !(key instanceof Function)\n        };\n    });\n    var indexedResult = list.reduce(function(res, item) {\n        var iterObj = res;\n        var itemVal = item;\n        keys.forEach(function(_ref, idx) {\n            var keyAccessor = _ref.keyAccessor, isProp = _ref.isProp;\n            var key;\n            if (isProp) {\n                var _itemVal = itemVal, propVal = _itemVal[keyAccessor], rest = _objectWithoutProperties(_itemVal, [\n                    keyAccessor\n                ].map(_toPropertyKey));\n                key = propVal;\n                itemVal = rest;\n            } else {\n                key = keyAccessor(itemVal, idx);\n            }\n            if (idx + 1 < keys.length) {\n                if (!iterObj.hasOwnProperty(key)) {\n                    iterObj[key] = {};\n                }\n                iterObj = iterObj[key];\n            } else {\n                // Leaf key\n                if (multiItem) {\n                    if (!iterObj.hasOwnProperty(key)) {\n                        iterObj[key] = [];\n                    }\n                    iterObj[key].push(itemVal);\n                } else {\n                    iterObj[key] = itemVal;\n                }\n            }\n        });\n        return res;\n    }, {});\n    if (multiItem instanceof Function) {\n        // Reduce leaf multiple values\n        (function reduce(node) {\n            var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n            if (level === keys.length) {\n                Object.keys(node).forEach(function(k) {\n                    return node[k] = multiItem(node[k]);\n                });\n            } else {\n                Object.values(node).forEach(function(child) {\n                    return reduce(child, level + 1);\n                });\n            }\n        })(indexedResult); // IIFE\n    }\n    var result = indexedResult;\n    if (flattenKeys) {\n        // flatten into array\n        result = [];\n        (function flatten(node) {\n            var accKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n            if (accKeys.length === keys.length) {\n                result.push({\n                    keys: accKeys,\n                    vals: node\n                });\n            } else {\n                Object.entries(node).forEach(function(_ref2) {\n                    var _ref3 = _slicedToArray(_ref2, 2), key = _ref3[0], val = _ref3[1];\n                    return flatten(val, [].concat(_toConsumableArray(accKeys), [\n                        key\n                    ]));\n                });\n            }\n        })(indexedResult); //IIFE\n        if (keyAccessors instanceof Array && keyAccessors.length === 0 && result.length === 1) {\n            // clear keys if there's no key accessors (single result)\n            result[0].keys = [];\n        }\n    }\n    return result;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/index-array-by/dist/index-array-by.mjs\n");

/***/ })

};
;