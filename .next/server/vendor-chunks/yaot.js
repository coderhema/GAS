/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/yaot";
exports.ids = ["vendor-chunks/yaot"];
exports.modules = {

/***/ "(ssr)/./node_modules/yaot/index.js":
/*!************************************!*\
  !*** ./node_modules/yaot/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Represents octree data structure\n *\n * https://en.wikipedia.org/wiki/Octree\n */ var Bounds3 = __webpack_require__(/*! ./lib/bounds3.js */ \"(ssr)/./node_modules/yaot/lib/bounds3.js\");\nvar TreeNode = __webpack_require__(/*! ./lib/treeNode.js */ \"(ssr)/./node_modules/yaot/lib/treeNode.js\");\nvar EmptyRegion = new Bounds3();\nvar asyncFor = __webpack_require__(/*! rafor */ \"(ssr)/./node_modules/rafor/index.js\");\nmodule.exports = createTree;\nfunction createTree(options) {\n    options = options || {};\n    var noPoints = [];\n    var root;\n    var originalArray;\n    var api = {\n        /**\n     * Initializes tree asynchronously. Very useful when you have millions\n     * of points and do not want to block rendering thread for too long.\n     *\n     * @param {number[]} points array of points for which we are building the\n     * tree. Flat sequence of (x, y, z) coordinates. Array length should be\n     * multiple of 3.\n     *\n     * @param {Function=} doneCallback called when tree is initialized. The\n     * callback will be called with single argument which represent current\n     * tree.\n     */ initAsync: initAsync,\n        /**\n     * Synchronous version of `initAsync()`. Should only be used for small\n     * trees (less than 50-70k of points).\n     *\n     * @param {number[]} points array of points for which we are building the\n     * tree. Flat sequence of (x, y, z) coordinates. Array length should be\n     * multiple of 3.\n     */ init: init,\n        /**\n     * Gets bounds of the root node. Bounds are represented by center of the\n     * node (x, y, z) and `half` attribute - distance from the center to an\n     * edge of the root node.\n     */ bounds: getBounds,\n        /**\n     * Fires a ray from `rayOrigin` into `rayDirection` and collects all points\n     * that lie in the octants intersected by the ray.\n     *\n     * This method implements An Efficient Parametric Algorithm for Octree Traversal\n     * described in http://wscg.zcu.cz/wscg2000/Papers_2000/X31.pdf\n     *\n     * @param {Vector3} rayOrigin x,y,z coordinates where ray starts\n     * @param {Vector3} rayDirection normalized x,y,z direction where ray shoots.\n     * @param {number+} near minimum distance from the ray origin. 0 by default.\n     * @param {number+} far maximum length of the ray. POSITIVE_INFINITY by default\n     *\n     * @return {Array} of indices in the source array. Each index represnts a start\n     * of the x,y,z triplet of a point, that lies in the intersected octant.\n     */ intersectRay: intersectRay,\n        /**\n     * Once you have collected points from the octants intersected by a ray\n     * (`intersectRay()` method), it may be worth to query points from the surrouning\n     * area.\n     */ intersectSphere: intersectSphere,\n        /**\n     * Gets root node of the tree\n     */ getRoot: getRoot\n    };\n    return api;\n    function getRoot() {\n        return root;\n    }\n    function intersectSphere(cx, cy, cz, r) {\n        if (!root) {\n            // Most likely we are not initialized yet\n            return noPoints;\n        }\n        var indices = [];\n        var r2 = r * r;\n        root.query(indices, originalArray, intersectCheck, preciseCheck);\n        return indices;\n        // http://stackoverflow.com/questions/4578967/cube-sphere-intersection-test\n        function intersectCheck(candidate) {\n            var dist = r2;\n            var half = candidate.half;\n            if (cx < candidate.x - half) dist -= sqr(cx - (candidate.x - half));\n            else if (cx > candidate.x + half) dist -= sqr(cx - (candidate.x + half));\n            if (cy < candidate.y - half) dist -= sqr(cy - (candidate.y - half));\n            else if (cy > candidate.y + half) dist -= sqr(cy - (candidate.y + half));\n            if (cz < candidate.z - half) dist -= sqr(cz - (candidate.z - half));\n            else if (cz > candidate.z + half) dist -= sqr(cz - (candidate.z + half));\n            return dist > 0;\n        }\n        function preciseCheck(x, y, z) {\n            return sqr(x - cx) + sqr(y - cy) + sqr(z - cz) < r2;\n        }\n    }\n    function sqr(x) {\n        return x * x;\n    }\n    function intersectRay(rayOrigin, rayDirection, near, far) {\n        if (!root) {\n            // Most likely we are not initialized yet\n            return noPoints;\n        }\n        if (near === undefined) near = 0;\n        if (far === undefined) far = Number.POSITIVE_INFINITY;\n        // we save as squar, to avoid expensive sqrt() operation\n        near *= near;\n        far *= far;\n        var indices = [];\n        root.query(indices, originalArray, intersectCheck, farEnough);\n        return indices.sort(byDistanceToCamera);\n        function intersectCheck(candidate) {\n            // using http://wscg.zcu.cz/wscg2000/Papers_2000/X31.pdf\n            var half = candidate.half;\n            var t1 = (candidate.x - half - rayOrigin.x) / rayDirection.x, t2 = (candidate.x + half - rayOrigin.x) / rayDirection.x, t3 = (candidate.y + half - rayOrigin.y) / rayDirection.y, t4 = (candidate.y - half - rayOrigin.y) / rayDirection.y, t5 = (candidate.z - half - rayOrigin.z) / rayDirection.z, t6 = (candidate.z + half - rayOrigin.z) / rayDirection.z, tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)), tmin;\n            if (tmax < 0) return false;\n            tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n            return tmin <= tmax && tmin <= far;\n        }\n        function farEnough(x, y, z) {\n            var dist = (x - rayOrigin.x) * (x - rayOrigin.x) + (y - rayOrigin.y) * (y - rayOrigin.y) + (z - rayOrigin.z) * (z - rayOrigin.z);\n            return near <= dist && dist <= far;\n        }\n        function byDistanceToCamera(idx0, idx1) {\n            var x0 = rayOrigin[idx0];\n            var y0 = rayOrigin[idx0 + 1];\n            var z0 = rayOrigin[idx0 + 2];\n            var dist0 = (x0 - rayOrigin.x) * (x0 - rayOrigin.x) + (y0 - rayOrigin.y) * (y0 - rayOrigin.y) + (z0 - rayOrigin.z) * (z0 - rayOrigin.z);\n            var x1 = rayOrigin[idx1];\n            var y1 = rayOrigin[idx1 + 1];\n            var z1 = rayOrigin[idx1 + 2];\n            var dist1 = (x1 - rayOrigin.x) * (x1 - rayOrigin.x) + (y1 - rayOrigin.y) * (y1 - rayOrigin.y) + (z1 - rayOrigin.z) * (z1 - rayOrigin.z);\n            return dist0 - dist1;\n        }\n    }\n    function init(points) {\n        verifyPointsInvariant(points);\n        originalArray = points;\n        root = createRootNode(points);\n        for(var i = 0; i < points.length; i += 3){\n            root.insert(i, originalArray, 0);\n        }\n    }\n    function initAsync(points, doneCallback) {\n        verifyPointsInvariant(points);\n        var tempRoot = createRootNode(points);\n        asyncFor(points, insertToRoot, doneInternal, {\n            step: 3\n        });\n        function insertToRoot(element, i) {\n            tempRoot.insert(i, points, 0);\n        }\n        function doneInternal() {\n            originalArray = points;\n            root = tempRoot;\n            if (typeof doneCallback === \"function\") {\n                doneCallback(api);\n            }\n        }\n    }\n    function verifyPointsInvariant(points) {\n        if (!points) throw new Error(\"Points array is required for quadtree to work\");\n        if (typeof points.length !== \"number\") throw new Error(\"Points should be array-like object\");\n        if (points.length % 3 !== 0) throw new Error(\"Points array should consist of series of x,y,z coordinates and be multiple of 3\");\n    }\n    function getBounds() {\n        if (!root) return EmptyRegion;\n        return root.bounds;\n    }\n    function createRootNode(points) {\n        // Edge case deserves empty region:\n        if (points.length === 0) {\n            var empty = new Bounds3();\n            return new TreeNode(empty);\n        }\n        // Otherwise let's figure out how big should be the root region\n        var minX = Number.POSITIVE_INFINITY;\n        var minY = Number.POSITIVE_INFINITY;\n        var minZ = Number.POSITIVE_INFINITY;\n        var maxX = Number.NEGATIVE_INFINITY;\n        var maxY = Number.NEGATIVE_INFINITY;\n        var maxZ = Number.NEGATIVE_INFINITY;\n        for(var i = 0; i < points.length; i += 3){\n            var x = points[i], y = points[i + 1], z = points[i + 2];\n            if (x < minX) minX = x;\n            if (x > maxX) maxX = x;\n            if (y < minY) minY = y;\n            if (y > maxY) maxY = y;\n            if (z < minZ) minZ = z;\n            if (z > maxZ) maxZ = z;\n        }\n        // Make bounds square:\n        var side = Math.max(Math.max(maxX - minX, maxY - minY), maxZ - minZ);\n        // since we need to have both sides inside the area, let's artificially\n        // grow the root region:\n        side += 2;\n        minX -= 1;\n        minY -= 1;\n        minZ -= 1;\n        var half = side / 2;\n        var bounds = new Bounds3(minX + half, minY + half, minZ + half, half);\n        return new TreeNode(bounds);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/yaot/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/yaot/lib/bounds3.js":
/*!******************************************!*\
  !*** ./node_modules/yaot/lib/bounds3.js ***!
  \******************************************/
/***/ ((module) => {

eval("module.exports = Bounds3;\nfunction Bounds3(x, y, z, half) {\n    this.x = typeof x === \"number\" ? x : 0;\n    this.y = typeof y === \"number\" ? y : 0;\n    this.z = typeof z === \"number\" ? z : 0;\n    this.half = typeof half === \"number\" ? half : 0;\n}\nBounds3.prototype.contains = function contains(x, y, z) {\n    var half = this.half;\n    return this.x - half <= x && x < this.x + half && this.y - half <= y && y < this.y + half && this.z - half <= z && z < this.z + half;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL3lhb3QvbGliL2JvdW5kczMuanM/NDI3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IEJvdW5kczM7XG5cbmZ1bmN0aW9uIEJvdW5kczMoeCwgeSwgeiwgaGFsZikge1xuICB0aGlzLnggPSB0eXBlb2YgeCA9PT0gJ251bWJlcicgPyB4IDogMDtcbiAgdGhpcy55ID0gdHlwZW9mIHkgPT09ICdudW1iZXInID8geSA6IDA7XG4gIHRoaXMueiA9IHR5cGVvZiB6ID09PSAnbnVtYmVyJyA/IHogOiAwO1xuICB0aGlzLmhhbGYgPSB0eXBlb2YgaGFsZiA9PT0gJ251bWJlcicgPyBoYWxmIDogMDtcbn1cblxuQm91bmRzMy5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiBjb250YWlucyh4LCB5LCB6KSB7XG4gIHZhciBoYWxmID0gdGhpcy5oYWxmO1xuICByZXR1cm4gdGhpcy54IC0gaGFsZiA8PSB4ICYmIHggPCB0aGlzLnggKyBoYWxmICYmXG4gICAgdGhpcy55IC0gaGFsZiA8PSB5ICYmIHkgPCB0aGlzLnkgKyBoYWxmICYmXG4gICAgdGhpcy56IC0gaGFsZiA8PSB6ICYmIHogPCB0aGlzLnogKyBoYWxmO1xufTtcblxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJCb3VuZHMzIiwieCIsInkiLCJ6IiwiaGFsZiIsInByb3RvdHlwZSIsImNvbnRhaW5zIl0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixTQUFTQSxRQUFRQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxJQUFJO0lBQzVCLElBQUksQ0FBQ0gsQ0FBQyxHQUFHLE9BQU9BLE1BQU0sV0FBV0EsSUFBSTtJQUNyQyxJQUFJLENBQUNDLENBQUMsR0FBRyxPQUFPQSxNQUFNLFdBQVdBLElBQUk7SUFDckMsSUFBSSxDQUFDQyxDQUFDLEdBQUcsT0FBT0EsTUFBTSxXQUFXQSxJQUFJO0lBQ3JDLElBQUksQ0FBQ0MsSUFBSSxHQUFHLE9BQU9BLFNBQVMsV0FBV0EsT0FBTztBQUNoRDtBQUVBSixRQUFRSyxTQUFTLENBQUNDLFFBQVEsR0FBRyxTQUFTQSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztJQUNwRCxJQUFJQyxPQUFPLElBQUksQ0FBQ0EsSUFBSTtJQUNwQixPQUFPLElBQUksQ0FBQ0gsQ0FBQyxHQUFHRyxRQUFRSCxLQUFLQSxJQUFJLElBQUksQ0FBQ0EsQ0FBQyxHQUFHRyxRQUN4QyxJQUFJLENBQUNGLENBQUMsR0FBR0UsUUFBUUYsS0FBS0EsSUFBSSxJQUFJLENBQUNBLENBQUMsR0FBR0UsUUFDbkMsSUFBSSxDQUFDRCxDQUFDLEdBQUdDLFFBQVFELEtBQUtBLElBQUksSUFBSSxDQUFDQSxDQUFDLEdBQUdDO0FBQ3ZDIiwiZmlsZSI6Iihzc3IpLy4vbm9kZV9tb2R1bGVzL3lhb3QvbGliL2JvdW5kczMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/yaot/lib/bounds3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/yaot/lib/treeNode.js":
/*!*******************************************!*\
  !*** ./node_modules/yaot/lib/treeNode.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Bounds3 = __webpack_require__(/*! ./bounds3.js */ \"(ssr)/./node_modules/yaot/lib/bounds3.js\");\nvar MAX_ITEMS = 4;\nmodule.exports = TreeNode;\nfunction TreeNode(bounds) {\n    this.bounds = bounds;\n    this.q0 = null;\n    this.q1 = null;\n    this.q2 = null;\n    this.q3 = null;\n    this.q4 = null;\n    this.q5 = null;\n    this.q6 = null;\n    this.q7 = null;\n    this.items = null;\n}\nTreeNode.prototype.subdivide = function subdivide() {\n    var bounds = this.bounds;\n    var quarter = bounds.half / 2;\n    this.q0 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y - quarter, bounds.z - quarter, quarter));\n    this.q1 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y - quarter, bounds.z - quarter, quarter));\n    this.q2 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y + quarter, bounds.z - quarter, quarter));\n    this.q3 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y + quarter, bounds.z - quarter, quarter));\n    this.q4 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y - quarter, bounds.z + quarter, quarter));\n    this.q5 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y - quarter, bounds.z + quarter, quarter));\n    this.q6 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y + quarter, bounds.z + quarter, quarter));\n    this.q7 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y + quarter, bounds.z + quarter, quarter));\n};\nTreeNode.prototype.insert = function insert(idx, array, depth) {\n    var isLeaf = this.q0 === null;\n    if (isLeaf) {\n        // TODO: this memory could be recycled to avoid GC\n        if (this.items === null) {\n            this.items = [\n                idx\n            ];\n        } else {\n            this.items.push(idx);\n        }\n        if (this.items.length >= MAX_ITEMS && depth < 16) {\n            this.subdivide();\n            for(var i = 0; i < this.items.length; ++i){\n                this.insert(this.items[i], array, depth + 1);\n            }\n            this.items = null;\n        }\n    } else {\n        var x = array[idx], y = array[idx + 1], z = array[idx + 2];\n        var bounds = this.bounds;\n        var quadIdx = 0; // assume NW\n        if (x > bounds.x) {\n            quadIdx += 1; // nope, we are in E part\n        }\n        if (y > bounds.y) {\n            quadIdx += 2; // Somewhere south.\n        }\n        if (z > bounds.z) {\n            quadIdx += 4; // Somewhere far\n        }\n        var child = getChild(this, quadIdx);\n        child.insert(idx, array, depth + 1);\n    }\n};\nTreeNode.prototype.query = function queryBounds(results, sourceArray, intersects, preciseCheck) {\n    if (!intersects(this.bounds)) return;\n    var items = this.items;\n    var needsCheck = typeof preciseCheck === \"function\";\n    if (items) {\n        for(var i = 0; i < items.length; ++i){\n            var idx = items[i];\n            if (needsCheck) {\n                if (preciseCheck(sourceArray[idx], sourceArray[idx + 1], sourceArray[idx + 2])) {\n                    results.push(idx);\n                }\n            } else {\n                results.push(idx);\n            }\n        }\n    }\n    if (!this.q0) return;\n    this.q0.query(results, sourceArray, intersects, preciseCheck);\n    this.q1.query(results, sourceArray, intersects, preciseCheck);\n    this.q2.query(results, sourceArray, intersects, preciseCheck);\n    this.q3.query(results, sourceArray, intersects, preciseCheck);\n    this.q4.query(results, sourceArray, intersects, preciseCheck);\n    this.q5.query(results, sourceArray, intersects, preciseCheck);\n    this.q6.query(results, sourceArray, intersects, preciseCheck);\n    this.q7.query(results, sourceArray, intersects, preciseCheck);\n};\nfunction getChild(node, idx) {\n    if (idx === 0) return node.q0;\n    if (idx === 1) return node.q1;\n    if (idx === 2) return node.q2;\n    if (idx === 3) return node.q3;\n    if (idx === 4) return node.q4;\n    if (idx === 5) return node.q5;\n    if (idx === 6) return node.q6;\n    if (idx === 7) return node.q7;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/yaot/lib/treeNode.js\n");

/***/ })

};
;