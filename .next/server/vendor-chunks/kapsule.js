"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/kapsule";
exports.ids = ["vendor-chunks/kapsule"];
exports.modules = {

/***/ "(ssr)/./node_modules/kapsule/dist/kapsule.mjs":
/*!***********************************************!*\
  !*** ./node_modules/kapsule/dist/kapsule.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ index)\n/* harmony export */ });\n/* harmony import */ var lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash-es/debounce.js */ \"(ssr)/./node_modules/lodash-es/debounce.js\");\n\nfunction _arrayLikeToArray(r, a) {\n    (null == a || a > r.length) && (a = r.length);\n    for(var e = 0, n = Array(a); e < a; e++)n[e] = r[e];\n    return n;\n}\nfunction _arrayWithHoles(r) {\n    if (Array.isArray(r)) return r;\n}\nfunction _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _createClass(e, r, t) {\n    return Object.defineProperty(e, \"prototype\", {\n        writable: !1\n    }), e;\n}\nfunction _iterableToArrayLimit(r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n        var e, n, i, u, a = [], f = !0, o = !1;\n        try {\n            if (i = (t = t.call(r)).next, 0 === l) ;\n            else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n        } catch (r) {\n            o = !0, n = r;\n        } finally{\n            try {\n                if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n            } finally{\n                if (o) throw n;\n            }\n        }\n        return a;\n    }\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(r, e) {\n    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _unsupportedIterableToArray(r, a) {\n    if (r) {\n        if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n        var t = ({}).toString.call(r).slice(8, -1);\n        return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n    }\n}\nvar Prop = /*#__PURE__*/ _createClass(function Prop(name, _ref) {\n    var _ref$default = _ref[\"default\"], defaultVal = _ref$default === void 0 ? null : _ref$default, _ref$triggerUpdate = _ref.triggerUpdate, triggerUpdate = _ref$triggerUpdate === void 0 ? true : _ref$triggerUpdate, _ref$onChange = _ref.onChange, onChange = _ref$onChange === void 0 ? function(newVal, state) {} : _ref$onChange;\n    _classCallCheck(this, Prop);\n    this.name = name;\n    this.defaultVal = defaultVal;\n    this.triggerUpdate = triggerUpdate;\n    this.onChange = onChange;\n});\nfunction index(_ref2) {\n    var _ref2$stateInit = _ref2.stateInit, stateInit = _ref2$stateInit === void 0 ? function() {\n        return {};\n    } : _ref2$stateInit, _ref2$props = _ref2.props, rawProps = _ref2$props === void 0 ? {} : _ref2$props, _ref2$methods = _ref2.methods, methods = _ref2$methods === void 0 ? {} : _ref2$methods, _ref2$aliases = _ref2.aliases, aliases = _ref2$aliases === void 0 ? {} : _ref2$aliases, _ref2$init = _ref2.init, initFn = _ref2$init === void 0 ? function() {} : _ref2$init, _ref2$update = _ref2.update, updateFn = _ref2$update === void 0 ? function() {} : _ref2$update;\n    // Parse props into Prop instances\n    var props = Object.keys(rawProps).map(function(propName) {\n        return new Prop(propName, rawProps[propName]);\n    });\n    return function KapsuleComp() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        var classMode = !!(this instanceof KapsuleComp ? this.constructor : void 0);\n        var nodeElement = classMode ? args.shift() : undefined;\n        var _args$ = args[0], options = _args$ === void 0 ? {} : _args$;\n        // Holds component state\n        var state = Object.assign({}, stateInit instanceof Function ? stateInit(options) : stateInit, // Support plain objects for backwards compatibility\n        {\n            initialised: false\n        });\n        // keeps track of which props triggered an update\n        var changedProps = {};\n        // Component constructor\n        function comp(nodeElement) {\n            initStatic(nodeElement, options);\n            digest();\n            return comp;\n        }\n        var initStatic = function initStatic(nodeElement, options) {\n            initFn.call(comp, nodeElement, state, options);\n            state.initialised = true;\n        };\n        var digest = (0,lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(function() {\n            if (!state.initialised) {\n                return;\n            }\n            updateFn.call(comp, state, changedProps);\n            changedProps = {};\n        }, 1);\n        // Getter/setter methods\n        props.forEach(function(prop) {\n            comp[prop.name] = getSetProp(prop);\n            function getSetProp(_ref3) {\n                var prop = _ref3.name, _ref3$triggerUpdate = _ref3.triggerUpdate, redigest = _ref3$triggerUpdate === void 0 ? false : _ref3$triggerUpdate, _ref3$onChange = _ref3.onChange, onChange = _ref3$onChange === void 0 ? function(newVal, state) {} : _ref3$onChange, _ref3$defaultVal = _ref3.defaultVal, defaultVal = _ref3$defaultVal === void 0 ? null : _ref3$defaultVal;\n                return function(_) {\n                    var curVal = state[prop];\n                    if (!arguments.length) {\n                        return curVal;\n                    } // Getter mode\n                    var val = _ === undefined ? defaultVal : _; // pick default if value passed is undefined\n                    state[prop] = val;\n                    onChange.call(comp, val, state, curVal);\n                    // track changed props\n                    !changedProps.hasOwnProperty(prop) && (changedProps[prop] = curVal);\n                    if (redigest) {\n                        digest();\n                    }\n                    return comp;\n                };\n            }\n        });\n        // Other methods\n        Object.keys(methods).forEach(function(methodName) {\n            comp[methodName] = function() {\n                var _methods$methodName;\n                for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                    args[_key2] = arguments[_key2];\n                }\n                return (_methods$methodName = methods[methodName]).call.apply(_methods$methodName, [\n                    comp,\n                    state\n                ].concat(args));\n            };\n        });\n        // Link aliases\n        Object.entries(aliases).forEach(function(_ref4) {\n            var _ref5 = _slicedToArray(_ref4, 2), alias = _ref5[0], target = _ref5[1];\n            return comp[alias] = comp[target];\n        });\n        // Reset all component props to their default value\n        comp.resetProps = function() {\n            props.forEach(function(prop) {\n                comp[prop.name](prop.defaultVal);\n            });\n            return comp;\n        };\n        //\n        comp.resetProps(); // Apply all prop defaults\n        state._rerender = digest; // Expose digest method\n        classMode && nodeElement && comp(nodeElement);\n        return comp;\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/kapsule/dist/kapsule.mjs\n");

/***/ })

};
;