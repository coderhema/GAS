"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/d3-geo-voronoi";
exports.ids = ["vendor-chunks/d3-geo-voronoi"];
exports.modules = {

/***/ "(ssr)/./node_modules/d3-geo-voronoi/src/cartesian.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-geo-voronoi/src/cartesian.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cartesian: () => (/* binding */ cartesian),\n/* harmony export */   cartesianAdd: () => (/* binding */ cartesianAdd),\n/* harmony export */   cartesianAddInPlace: () => (/* binding */ cartesianAddInPlace),\n/* harmony export */   cartesianCross: () => (/* binding */ cartesianCross),\n/* harmony export */   cartesianDot: () => (/* binding */ cartesianDot),\n/* harmony export */   cartesianNormalize: () => (/* binding */ cartesianNormalize),\n/* harmony export */   cartesianNormalizeInPlace: () => (/* binding */ cartesianNormalizeInPlace),\n/* harmony export */   cartesianScale: () => (/* binding */ cartesianScale),\n/* harmony export */   spherical: () => (/* binding */ spherical)\n/* harmony export */ });\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ \"(ssr)/./node_modules/d3-geo-voronoi/src/math.js\");\n\nfunction spherical(cartesian) {\n    return [\n        (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.atan2)(cartesian[1], cartesian[0]),\n        (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.asin)(cartesian[2])\n    ];\n}\nfunction cartesian(spherical) {\n    const lambda = spherical[0], phi = spherical[1], cosPhi = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.cos)(phi);\n    return [\n        cosPhi * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.cos)(lambda),\n        cosPhi * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(lambda),\n        (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(phi)\n    ];\n}\nfunction cartesianDot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\nfunction cartesianCross(a, b) {\n    return [\n        a[1] * b[2] - a[2] * b[1],\n        a[2] * b[0] - a[0] * b[2],\n        a[0] * b[1] - a[1] * b[0]\n    ];\n}\n// TODO return a\nfunction cartesianAddInPlace(a, b) {\n    a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\nfunction cartesianAdd(a, b) {\n    return [\n        a[0] + b[0],\n        a[1] + b[1],\n        a[2] + b[2]\n    ];\n}\nfunction cartesianScale(vector, k) {\n    return [\n        vector[0] * k,\n        vector[1] * k,\n        vector[2] * k\n    ];\n}\n// TODO return d\nfunction cartesianNormalizeInPlace(d) {\n    var l = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sqrt)(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    d[0] /= l, d[1] /= l, d[2] /= l;\n}\nfunction cartesianNormalize(d) {\n    var l = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sqrt)(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n    return [\n        d[0] / l,\n        d[1] / l,\n        d[2] / l\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZDMtZ2VvLXZvcm9ub2kvc3JjL2NhcnRlc2lhbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXdEO0FBRWpELFNBQVNLLFVBQVVDLFNBQVM7SUFDakMsT0FBTztRQUFDTCwrQ0FBS0EsQ0FBQ0ssU0FBUyxDQUFDLEVBQUUsRUFBRUEsU0FBUyxDQUFDLEVBQUU7UUFBR04sOENBQUlBLENBQUNNLFNBQVMsQ0FBQyxFQUFFO0tBQUU7QUFDaEU7QUFFTyxTQUFTQSxVQUFVRCxTQUFTO0lBQ2pDLE1BQU1FLFNBQVNGLFNBQVMsQ0FBQyxFQUFFLEVBQ3pCRyxNQUFNSCxTQUFTLENBQUMsRUFBRSxFQUNsQkksU0FBU1AsNkNBQUdBLENBQUNNO0lBQ2YsT0FBTztRQUFDQyxTQUFTUCw2Q0FBR0EsQ0FBQ0s7UUFBU0UsU0FBU04sNkNBQUdBLENBQUNJO1FBQVNKLDZDQUFHQSxDQUFDSztLQUFLO0FBQy9EO0FBRU8sU0FBU0UsYUFBYUMsQ0FBQyxFQUFFQyxDQUFDO0lBQy9CLE9BQU9ELENBQUMsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFLEdBQUdELENBQUMsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFLEdBQUdELENBQUMsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFO0FBQ2hEO0FBRU8sU0FBU0MsZUFBZUYsQ0FBQyxFQUFFQyxDQUFDO0lBQ2pDLE9BQU87UUFDTEQsQ0FBQyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUUsR0FBR0QsQ0FBQyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUU7UUFDekJELENBQUMsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFLEdBQUdELENBQUMsQ0FBQyxFQUFFLEdBQUdDLENBQUMsQ0FBQyxFQUFFO1FBQ3pCRCxDQUFDLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRSxHQUFHRCxDQUFDLENBQUMsRUFBRSxHQUFHQyxDQUFDLENBQUMsRUFBRTtLQUMxQjtBQUNIO0FBRUEsZ0JBQWdCO0FBQ1QsU0FBU0Usb0JBQW9CSCxDQUFDLEVBQUVDLENBQUM7SUFDckNELENBQUMsQ0FBQyxFQUFFLElBQUlDLENBQUMsQ0FBQyxFQUFFLEVBQUlELENBQUMsQ0FBQyxFQUFFLElBQUlDLENBQUMsQ0FBQyxFQUFFLEVBQUlELENBQUMsQ0FBQyxFQUFFLElBQUlDLENBQUMsQ0FBQyxFQUFFO0FBQy9DO0FBRU8sU0FBU0csYUFBYUosQ0FBQyxFQUFFQyxDQUFDO0lBQy9CLE9BQU87UUFBQ0QsQ0FBQyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUU7UUFBRUQsQ0FBQyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUU7UUFBRUQsQ0FBQyxDQUFDLEVBQUUsR0FBR0MsQ0FBQyxDQUFDLEVBQUU7S0FBQztBQUNoRDtBQUVPLFNBQVNJLGVBQWVDLE1BQU0sRUFBRUMsQ0FBQztJQUN0QyxPQUFPO1FBQUNELE1BQU0sQ0FBQyxFQUFFLEdBQUdDO1FBQUdELE1BQU0sQ0FBQyxFQUFFLEdBQUdDO1FBQUdELE1BQU0sQ0FBQyxFQUFFLEdBQUdDO0tBQUU7QUFDdEQ7QUFFQSxnQkFBZ0I7QUFDVCxTQUFTQywwQkFBMEJDLENBQUM7SUFDekMsSUFBSUMsSUFBSWpCLDhDQUFJQSxDQUFDZ0IsQ0FBQyxDQUFDLEVBQUUsR0FBR0EsQ0FBQyxDQUFDLEVBQUUsR0FBR0EsQ0FBQyxDQUFDLEVBQUUsR0FBR0EsQ0FBQyxDQUFDLEVBQUUsR0FBR0EsQ0FBQyxDQUFDLEVBQUUsR0FBR0EsQ0FBQyxDQUFDLEVBQUU7SUFDbkRBLENBQUMsQ0FBQyxFQUFFLElBQUlDLEdBQUtELENBQUMsQ0FBQyxFQUFFLElBQUlDLEdBQUtELENBQUMsQ0FBQyxFQUFFLElBQUlDO0FBQ3JDO0FBRU8sU0FBU0MsbUJBQW1CRixDQUFDO0lBQ2xDLElBQUlDLElBQUlqQiw4Q0FBSUEsQ0FBQ2dCLENBQUMsQ0FBQyxFQUFFLEdBQUdBLENBQUMsQ0FBQyxFQUFFLEdBQUdBLENBQUMsQ0FBQyxFQUFFLEdBQUdBLENBQUMsQ0FBQyxFQUFFLEdBQUdBLENBQUMsQ0FBQyxFQUFFLEdBQUdBLENBQUMsQ0FBQyxFQUFFO0lBQ3BELE9BQU87UUFBQ0EsQ0FBQyxDQUFDLEVBQUUsR0FBR0M7UUFBR0QsQ0FBQyxDQUFDLEVBQUUsR0FBR0M7UUFBR0QsQ0FBQyxDQUFDLEVBQUUsR0FBR0M7S0FBRTtBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZDMtZ2VvLXZvcm9ub2kvc3JjL2NhcnRlc2lhbi5qcz9lOWFjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzaW4sIGF0YW4yLCBjb3MsIHNpbiwgc3FydCB9IGZyb20gXCIuL21hdGguanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNwaGVyaWNhbChjYXJ0ZXNpYW4pIHtcbiAgcmV0dXJuIFthdGFuMihjYXJ0ZXNpYW5bMV0sIGNhcnRlc2lhblswXSksIGFzaW4oY2FydGVzaWFuWzJdKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW4oc3BoZXJpY2FsKSB7XG4gIGNvbnN0IGxhbWJkYSA9IHNwaGVyaWNhbFswXSxcbiAgICBwaGkgPSBzcGhlcmljYWxbMV0sXG4gICAgY29zUGhpID0gY29zKHBoaSk7XG4gIHJldHVybiBbY29zUGhpICogY29zKGxhbWJkYSksIGNvc1BoaSAqIHNpbihsYW1iZGEpLCBzaW4ocGhpKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5Eb3QoYSwgYikge1xuICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuQ3Jvc3MoYSwgYikge1xuICByZXR1cm4gW1xuICAgIGFbMV0gKiBiWzJdIC0gYVsyXSAqIGJbMV0sXG4gICAgYVsyXSAqIGJbMF0gLSBhWzBdICogYlsyXSxcbiAgICBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdLFxuICBdO1xufVxuXG4vLyBUT0RPIHJldHVybiBhXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuQWRkSW5QbGFjZShhLCBiKSB7XG4gIChhWzBdICs9IGJbMF0pLCAoYVsxXSArPSBiWzFdKSwgKGFbMl0gKz0gYlsyXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5BZGQoYSwgYikge1xuICByZXR1cm4gW2FbMF0gKyBiWzBdLCBhWzFdICsgYlsxXSwgYVsyXSArIGJbMl1dO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuU2NhbGUodmVjdG9yLCBrKSB7XG4gIHJldHVybiBbdmVjdG9yWzBdICogaywgdmVjdG9yWzFdICogaywgdmVjdG9yWzJdICoga107XG59XG5cbi8vIFRPRE8gcmV0dXJuIGRcbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGQpIHtcbiAgdmFyIGwgPSBzcXJ0KGRbMF0gKiBkWzBdICsgZFsxXSAqIGRbMV0gKyBkWzJdICogZFsyXSk7XG4gIChkWzBdIC89IGwpLCAoZFsxXSAvPSBsKSwgKGRbMl0gLz0gbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5Ob3JtYWxpemUoZCkge1xuICB2YXIgbCA9IHNxcnQoZFswXSAqIGRbMF0gKyBkWzFdICogZFsxXSArIGRbMl0gKiBkWzJdKTtcbiAgcmV0dXJuIFtkWzBdIC8gbCwgZFsxXSAvIGwsIGRbMl0gLyBsXTtcbn1cbiJdLCJuYW1lcyI6WyJhc2luIiwiYXRhbjIiLCJjb3MiLCJzaW4iLCJzcXJ0Iiwic3BoZXJpY2FsIiwiY2FydGVzaWFuIiwibGFtYmRhIiwicGhpIiwiY29zUGhpIiwiY2FydGVzaWFuRG90IiwiYSIsImIiLCJjYXJ0ZXNpYW5Dcm9zcyIsImNhcnRlc2lhbkFkZEluUGxhY2UiLCJjYXJ0ZXNpYW5BZGQiLCJjYXJ0ZXNpYW5TY2FsZSIsInZlY3RvciIsImsiLCJjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlIiwiZCIsImwiLCJjYXJ0ZXNpYW5Ob3JtYWxpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/d3-geo-voronoi/src/cartesian.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/d3-geo-voronoi/src/delaunay.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-geo-voronoi/src/delaunay.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   excess: () => (/* binding */ excess),\n/* harmony export */   geoDelaunay: () => (/* binding */ geoDelaunay)\n/* harmony export */ });\n/* harmony import */ var d3_delaunay__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! d3-delaunay */ \"(ssr)/./node_modules/d3-delaunay/src/delaunay.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-geo */ \"(ssr)/./node_modules/d3-geo/src/rotation.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-geo */ \"(ssr)/./node_modules/d3-geo/src/projection/stereographic.js\");\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-array */ \"(ssr)/./node_modules/d3-array/src/extent.js\");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ \"(ssr)/./node_modules/d3-geo-voronoi/src/math.js\");\n/* harmony import */ var _cartesian_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cartesian.js */ \"(ssr)/./node_modules/d3-geo-voronoi/src/cartesian.js\");\n\n\n\n\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n    return [\n        (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.atan2)(cartesian[1], cartesian[0]) * _math_js__WEBPACK_IMPORTED_MODULE_0__.degrees,\n        (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.asin)((0,_math_js__WEBPACK_IMPORTED_MODULE_0__.max)(-1, (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.min)(1, cartesian[2]))) * _math_js__WEBPACK_IMPORTED_MODULE_0__.degrees\n    ];\n}\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n    const lambda = coordinates[0] * _math_js__WEBPACK_IMPORTED_MODULE_0__.radians, phi = coordinates[1] * _math_js__WEBPACK_IMPORTED_MODULE_0__.radians, cosphi = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.cos)(phi);\n    return [\n        cosphi * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.cos)(lambda),\n        cosphi * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(lambda),\n        (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(phi)\n    ];\n}\n// Spherical excess of a triangle (in spherical coordinates)\nfunction excess(triangle) {\n    triangle = triangle.map((p)=>cartesian(p));\n    return (0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianDot)(triangle[0], (0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianCross)(triangle[2], triangle[1]));\n}\nfunction geoDelaunay(points) {\n    const delaunay = geo_delaunay_from(points), triangles = geo_triangles(delaunay), edges = geo_edges(triangles, points), neighbors = geo_neighbors(triangles, points.length), find = geo_find(neighbors, points), // Voronoi ; could take a center function as an argument\n    circumcenters = geo_circumcenters(triangles, points), { polygons, centers } = geo_polygons(circumcenters, triangles, points), mesh = geo_mesh(polygons), hull = geo_hull(triangles, points), // Urquhart ; returns a function that takes a distance array as argument.\n    urquhart = geo_urquhart(edges, triangles);\n    return {\n        delaunay,\n        edges,\n        triangles,\n        centers,\n        neighbors,\n        polygons,\n        mesh,\n        hull,\n        urquhart,\n        find\n    };\n}\nfunction geo_find(neighbors, points) {\n    function distance2(a, b) {\n        let x = a[0] - b[0], y = a[1] - b[1], z = a[2] - b[2];\n        return x * x + y * y + z * z;\n    }\n    return function find(x, y, next) {\n        if (next === undefined) next = 0;\n        let cell, dist, found = next;\n        const xyz = cartesian([\n            x,\n            y\n        ]);\n        do {\n            cell = next;\n            next = null;\n            dist = distance2(xyz, cartesian(points[cell]));\n            neighbors[cell].forEach((i)=>{\n                let ndist = distance2(xyz, cartesian(points[i]));\n                if (ndist < dist) {\n                    dist = ndist;\n                    next = i;\n                    found = i;\n                    return;\n                }\n            });\n        }while (next !== null);\n        return found;\n    };\n}\nfunction geo_delaunay_from(points) {\n    if (points.length < 2) return {};\n    // find a valid point to send to infinity\n    let pivot = 0;\n    while(isNaN(points[pivot][0] + points[pivot][1]) && pivot++ < points.length);\n    const r = (0,d3_geo__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(points[pivot]), projection = (0,d3_geo__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().translate([\n        0,\n        0\n    ]).scale(1).rotate(r.invert([\n        180,\n        0\n    ]));\n    points = points.map(projection);\n    const zeros = [];\n    let max2 = 1;\n    for(let i = 0, n = points.length; i < n; i++){\n        let m = points[i][0] ** 2 + points[i][1] ** 2;\n        if (!isFinite(m) || m > 1e32) zeros.push(i);\n        else if (m > max2) max2 = m;\n    }\n    const FAR = 1e6 * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sqrt)(max2);\n    zeros.forEach((i)=>points[i] = [\n            FAR,\n            0\n        ]);\n    // Add infinite horizon points\n    points.push([\n        0,\n        FAR\n    ]);\n    points.push([\n        -FAR,\n        0\n    ]);\n    points.push([\n        0,\n        -FAR\n    ]);\n    const delaunay = d3_delaunay__WEBPACK_IMPORTED_MODULE_4__[\"default\"].from(points);\n    delaunay.projection = projection;\n    // clean up the triangulation\n    const { triangles, halfedges, inedges } = delaunay;\n    const degenerate = [];\n    for(let i = 0, l = halfedges.length; i < l; i++){\n        if (halfedges[i] < 0) {\n            const j = i % 3 == 2 ? i - 2 : i + 1;\n            const k = i % 3 == 0 ? i + 2 : i - 1;\n            const a = halfedges[j];\n            const b = halfedges[k];\n            halfedges[a] = b;\n            halfedges[b] = a;\n            halfedges[j] = halfedges[k] = -1;\n            triangles[i] = triangles[j] = triangles[k] = pivot;\n            inedges[triangles[a]] = a % 3 == 0 ? a + 2 : a - 1;\n            inedges[triangles[b]] = b % 3 == 0 ? b + 2 : b - 1;\n            degenerate.push(Math.min(i, j, k));\n            i += 2 - i % 3;\n        } else if (triangles[i] > points.length - 3 - 1) {\n            triangles[i] = pivot;\n        }\n    }\n    // there should always be 4 degenerate triangles\n    // console.warn(degenerate);\n    return delaunay;\n}\nfunction geo_edges(triangles, points) {\n    const _index = new Set();\n    if (points.length === 2) return [\n        [\n            0,\n            1\n        ]\n    ];\n    triangles.forEach((tri)=>{\n        if (tri[0] === tri[1]) return;\n        if (excess(tri.map((i)=>points[i])) < 0) return;\n        for(let i = 0, j; i < 3; i++){\n            j = (i + 1) % 3;\n            _index.add((0,d3_array__WEBPACK_IMPORTED_MODULE_5__[\"default\"])([\n                tri[i],\n                tri[j]\n            ]).join(\"-\"));\n        }\n    });\n    return Array.from(_index, (d)=>d.split(\"-\").map(Number));\n}\nfunction geo_triangles(delaunay) {\n    const { triangles } = delaunay;\n    if (!triangles) return [];\n    const geo_triangles = [];\n    for(let i = 0, n = triangles.length / 3; i < n; i++){\n        const a = triangles[3 * i], b = triangles[3 * i + 1], c = triangles[3 * i + 2];\n        if (a !== b && b !== c) {\n            geo_triangles.push([\n                a,\n                c,\n                b\n            ]);\n        }\n    }\n    return geo_triangles;\n}\nfunction geo_circumcenters(triangles, points) {\n    // if (!use_centroids) {\n    return triangles.map((tri)=>{\n        const c = tri.map((i)=>points[i]).map(cartesian), V = (0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianAdd)((0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianAdd)((0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianCross)(c[1], c[0]), (0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianCross)(c[2], c[1])), (0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianCross)(c[0], c[2]));\n        return spherical((0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianNormalize)(V));\n    });\n/*} else {\n    return triangles.map(tri => {\n      return d3.geoCentroid({\n        type: \"MultiPoint\",\n        coordinates: tri.map(i => points[i])\n      });\n    });\n  }*/ }\nfunction geo_neighbors(triangles, npoints) {\n    const neighbors = [];\n    triangles.forEach((tri)=>{\n        for(let j = 0; j < 3; j++){\n            const a = tri[j], b = tri[(j + 1) % 3];\n            neighbors[a] = neighbors[a] || [];\n            neighbors[a].push(b);\n        }\n    });\n    // degenerate cases\n    if (triangles.length === 0) {\n        if (npoints === 2) neighbors[0] = [\n            1\n        ], neighbors[1] = [\n            0\n        ];\n        else if (npoints === 1) neighbors[0] = [];\n    }\n    return neighbors;\n}\nfunction geo_polygons(circumcenters, triangles, points) {\n    const polygons = [];\n    const centers = circumcenters.slice();\n    if (triangles.length === 0) {\n        if (points.length < 2) return {\n            polygons,\n            centers\n        };\n        if (points.length === 2) {\n            // two hemispheres\n            const a = cartesian(points[0]), b = cartesian(points[1]), m = (0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianNormalize)((0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianAdd)(a, b)), d = (0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianNormalize)((0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianCross)(a, b)), c = (0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianCross)(m, d);\n            const poly = [\n                m,\n                (0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianCross)(m, c),\n                (0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianCross)((0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianCross)(m, c), c),\n                (0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianCross)((0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianCross)((0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianCross)(m, c), c), c)\n            ].map(spherical).map(supplement);\n            return polygons.push(poly), polygons.push(poly.slice().reverse()), {\n                polygons,\n                centers\n            };\n        }\n    }\n    triangles.forEach((tri, t)=>{\n        for(let j = 0; j < 3; j++){\n            const a = tri[j], b = tri[(j + 1) % 3], c = tri[(j + 2) % 3];\n            polygons[a] = polygons[a] || [];\n            polygons[a].push([\n                b,\n                c,\n                t,\n                [\n                    a,\n                    b,\n                    c\n                ]\n            ]);\n        }\n    });\n    // reorder each polygon\n    const reordered = polygons.map((poly)=>{\n        const p = [\n            poly[0][2]\n        ]; // t\n        let k = poly[0][1]; // k = c\n        for(let i = 1; i < poly.length; i++){\n            // look for b = k\n            for(let j = 0; j < poly.length; j++){\n                if (poly[j][0] == k) {\n                    k = poly[j][1];\n                    p.push(poly[j][2]);\n                    break;\n                }\n            }\n        }\n        if (p.length > 2) {\n            return p;\n        } else if (p.length == 2) {\n            const R0 = o_midpoint(points[poly[0][3][0]], points[poly[0][3][1]], centers[p[0]]), R1 = o_midpoint(points[poly[0][3][2]], points[poly[0][3][0]], centers[p[0]]);\n            const i0 = supplement(R0), i1 = supplement(R1);\n            return [\n                p[0],\n                i1,\n                p[1],\n                i0\n            ];\n        }\n    });\n    function supplement(point) {\n        let f = -1;\n        centers.slice(triangles.length, Infinity).forEach((p, i)=>{\n            if (p[0] === point[0] && p[1] === point[1]) f = i + triangles.length;\n        });\n        if (f < 0) f = centers.length, centers.push(point);\n        return f;\n    }\n    return {\n        polygons: reordered,\n        centers\n    };\n}\nfunction o_midpoint(a, b, c) {\n    a = cartesian(a);\n    b = cartesian(b);\n    c = cartesian(c);\n    const s = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sign)((0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianDot)((0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianCross)(b, a), c));\n    return spherical((0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianNormalize)((0,_cartesian_js__WEBPACK_IMPORTED_MODULE_1__.cartesianAdd)(a, b)).map((d)=>s * d));\n}\nfunction geo_mesh(polygons) {\n    const mesh = [];\n    polygons.forEach((poly)=>{\n        if (!poly) return;\n        let p = poly[poly.length - 1];\n        for (let q of poly){\n            if (q > p) mesh.push([\n                p,\n                q\n            ]);\n            p = q;\n        }\n    });\n    return mesh;\n}\nfunction geo_urquhart(edges, triangles) {\n    return function(distances) {\n        const _lengths = new Map(), _urquhart = new Map();\n        edges.forEach((edge, i)=>{\n            const u = edge.join(\"-\");\n            _lengths.set(u, distances[i]);\n            _urquhart.set(u, true);\n        });\n        triangles.forEach((tri)=>{\n            let l = 0, remove = -1;\n            for(let j = 0; j < 3; j++){\n                let u = (0,d3_array__WEBPACK_IMPORTED_MODULE_5__[\"default\"])([\n                    tri[j],\n                    tri[(j + 1) % 3]\n                ]).join(\"-\");\n                if (_lengths.get(u) > l) {\n                    l = _lengths.get(u);\n                    remove = u;\n                }\n            }\n            _urquhart.set(remove, false);\n        });\n        return edges.map((edge)=>_urquhart.get(edge.join(\"-\")));\n    };\n}\nfunction geo_hull(triangles, points) {\n    const _hull = new Set(), hull = [];\n    triangles.map((tri)=>{\n        if (excess(tri.map((i)=>points[i > points.length ? 0 : i])) > 1e-12) return;\n        for(let i = 0; i < 3; i++){\n            let e = [\n                tri[i],\n                tri[(i + 1) % 3]\n            ], code = `${e[0]}-${e[1]}`;\n            if (_hull.has(code)) _hull.delete(code);\n            else _hull.add(`${e[1]}-${e[0]}`);\n        }\n    });\n    const _index = new Map();\n    let start;\n    _hull.forEach((e)=>{\n        e = e.split(\"-\").map(Number);\n        _index.set(e[0], e[1]);\n        start = e[0];\n    });\n    if (start === undefined) return hull;\n    let next = start;\n    do {\n        hull.push(next);\n        let n = _index.get(next);\n        _index.set(next, -1);\n        next = n;\n    }while (next > -1 && next !== start);\n    return hull;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZDMtZ2VvLXZvcm9ub2kvc3JjL2RlbGF1bmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXVDO0FBQ2dCO0FBQ3JCO0FBWWY7QUFNSztBQUV4Qiw0REFBNEQ7QUFDNUQsU0FBU3FCLFVBQVVDLFNBQVM7SUFDMUIsT0FBTztRQUNMakIsK0NBQUtBLENBQUNpQixTQUFTLENBQUMsRUFBRSxFQUFFQSxTQUFTLENBQUMsRUFBRSxJQUFJZiw2Q0FBT0E7UUFDM0NILDhDQUFJQSxDQUFDSSw2Q0FBR0EsQ0FBQyxDQUFDLEdBQUdDLDZDQUFHQSxDQUFDLEdBQUdhLFNBQVMsQ0FBQyxFQUFFLE1BQU1mLDZDQUFPQTtLQUM5QztBQUNIO0FBRUEsNERBQTREO0FBQzVELFNBQVNlLFVBQVVDLFdBQVc7SUFDNUIsTUFBTUMsU0FBU0QsV0FBVyxDQUFDLEVBQUUsR0FBR2IsNkNBQU9BLEVBQ3JDZSxNQUFNRixXQUFXLENBQUMsRUFBRSxHQUFHYiw2Q0FBT0EsRUFDOUJnQixTQUFTcEIsNkNBQUdBLENBQUNtQjtJQUNmLE9BQU87UUFBQ0MsU0FBU3BCLDZDQUFHQSxDQUFDa0I7UUFBU0UsU0FBU2QsNkNBQUdBLENBQUNZO1FBQVNaLDZDQUFHQSxDQUFDYTtLQUFLO0FBQy9EO0FBRUEsNERBQTREO0FBQ3JELFNBQVNFLE9BQU9DLFFBQVE7SUFDN0JBLFdBQVdBLFNBQVNDLEdBQUcsQ0FBQyxDQUFDQyxJQUFNUixVQUFVUTtJQUN6QyxPQUFPWCwyREFBR0EsQ0FBQ1MsUUFBUSxDQUFDLEVBQUUsRUFBRVgsNkRBQUtBLENBQUNXLFFBQVEsQ0FBQyxFQUFFLEVBQUVBLFFBQVEsQ0FBQyxFQUFFO0FBQ3hEO0FBRU8sU0FBU0csWUFBWUMsTUFBTTtJQUNoQyxNQUFNQyxXQUFXQyxrQkFBa0JGLFNBQ2pDRyxZQUFZQyxjQUFjSCxXQUMxQkksUUFBUUMsVUFBVUgsV0FBV0gsU0FDN0JPLFlBQVlDLGNBQWNMLFdBQVdILE9BQU9TLE1BQU0sR0FD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RUFBRSxLQUFLLE9BQzlEO1FBQ0YsSUFBSyxJQUFJQSxJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBSztZQUMxQixJQUFJK0QsSUFBSTtnQkFBQ3BDLEdBQUcsQ0FBQzNCLEVBQUU7Z0JBQUUyQixHQUFHLENBQUMsQ0FBQzNCLElBQUksS0FBSyxFQUFFO2FBQUMsRUFDaENnRSxPQUFPLENBQUMsRUFBRUQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUVBLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxQixJQUFJRCxNQUFNRyxHQUFHLENBQUNELE9BQU9GLE1BQU1JLE1BQU0sQ0FBQ0Y7aUJBQzdCRixNQUFNbEMsR0FBRyxDQUFDLENBQUMsRUFBRW1DLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFQSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbEM7SUFDRjtJQUVBLE1BQU10QyxTQUFTLElBQUk4QjtJQUNuQixJQUFJWTtJQUNKTCxNQUFNL0QsT0FBTyxDQUFDLENBQUNnRTtRQUNiQSxJQUFJQSxFQUFFL0IsS0FBSyxDQUFDLEtBQUt2RSxHQUFHLENBQUN3RTtRQUNyQlIsT0FBT2tDLEdBQUcsQ0FBQ0ksQ0FBQyxDQUFDLEVBQUUsRUFBRUEsQ0FBQyxDQUFDLEVBQUU7UUFDckJJLFFBQVFKLENBQUMsQ0FBQyxFQUFFO0lBQ2Q7SUFFQSxJQUFJSSxVQUFVekUsV0FBVyxPQUFPWDtJQUVoQyxJQUFJVSxPQUFPMEU7SUFDWCxHQUFHO1FBQ0RwRixLQUFLZ0MsSUFBSSxDQUFDdEI7UUFDVixJQUFJbUIsSUFBSWEsT0FBT29DLEdBQUcsQ0FBQ3BFO1FBQ25CZ0MsT0FBT2tDLEdBQUcsQ0FBQ2xFLE1BQU0sQ0FBQztRQUNsQkEsT0FBT21CO0lBQ1QsUUFBU25CLE9BQU8sQ0FBQyxLQUFLQSxTQUFTMEUsT0FBTztJQUV0QyxPQUFPcEY7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9ub2RlX21vZHVsZXMvZDMtZ2VvLXZvcm9ub2kvc3JjL2RlbGF1bmF5LmpzP2FmYzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVsYXVuYXkgfSBmcm9tIFwiZDMtZGVsYXVuYXlcIjtcbmltcG9ydCB7IGdlb1JvdGF0aW9uLCBnZW9TdGVyZW9ncmFwaGljIH0gZnJvbSBcImQzLWdlb1wiO1xuaW1wb3J0IHsgZXh0ZW50IH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge1xuICBhc2luLFxuICBhdGFuMixcbiAgY29zLFxuICBkZWdyZWVzLFxuICBtYXgsXG4gIG1pbixcbiAgcmFkaWFucyxcbiAgc2lnbixcbiAgc2luLFxuICBzcXJ0LFxufSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5pbXBvcnQge1xuICBjYXJ0ZXNpYW5Ob3JtYWxpemUgYXMgbm9ybWFsaXplLFxuICBjYXJ0ZXNpYW5Dcm9zcyBhcyBjcm9zcyxcbiAgY2FydGVzaWFuRG90IGFzIGRvdCxcbiAgY2FydGVzaWFuQWRkLFxufSBmcm9tIFwiLi9jYXJ0ZXNpYW4uanNcIjtcblxuLy8gQ29udmVydHMgM0QgQ2FydGVzaWFuIHRvIHNwaGVyaWNhbCBjb29yZGluYXRlcyAoZGVncmVlcykuXG5mdW5jdGlvbiBzcGhlcmljYWwoY2FydGVzaWFuKSB7XG4gIHJldHVybiBbXG4gICAgYXRhbjIoY2FydGVzaWFuWzFdLCBjYXJ0ZXNpYW5bMF0pICogZGVncmVlcyxcbiAgICBhc2luKG1heCgtMSwgbWluKDEsIGNhcnRlc2lhblsyXSkpKSAqIGRlZ3JlZXMsXG4gIF07XG59XG5cbi8vIENvbnZlcnRzIHNwaGVyaWNhbCBjb29yZGluYXRlcyAoZGVncmVlcykgdG8gM0QgQ2FydGVzaWFuLlxuZnVuY3Rpb24gY2FydGVzaWFuKGNvb3JkaW5hdGVzKSB7XG4gIGNvbnN0IGxhbWJkYSA9IGNvb3JkaW5hdGVzWzBdICogcmFkaWFucyxcbiAgICBwaGkgPSBjb29yZGluYXRlc1sxXSAqIHJhZGlhbnMsXG4gICAgY29zcGhpID0gY29zKHBoaSk7XG4gIHJldHVybiBbY29zcGhpICogY29zKGxhbWJkYSksIGNvc3BoaSAqIHNpbihsYW1iZGEpLCBzaW4ocGhpKV07XG59XG5cbi8vIFNwaGVyaWNhbCBleGNlc3Mgb2YgYSB0cmlhbmdsZSAoaW4gc3BoZXJpY2FsIGNvb3JkaW5hdGVzKVxuZXhwb3J0IGZ1bmN0aW9uIGV4Y2Vzcyh0cmlhbmdsZSkge1xuICB0cmlhbmdsZSA9IHRyaWFuZ2xlLm1hcCgocCkgPT4gY2FydGVzaWFuKHApKTtcbiAgcmV0dXJuIGRvdCh0cmlhbmdsZVswXSwgY3Jvc3ModHJpYW5nbGVbMl0sIHRyaWFuZ2xlWzFdKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW9EZWxhdW5heShwb2ludHMpIHtcbiAgY29uc3QgZGVsYXVuYXkgPSBnZW9fZGVsYXVuYXlfZnJvbShwb2ludHMpLFxuICAgIHRyaWFuZ2xlcyA9IGdlb190cmlhbmdsZXMoZGVsYXVuYXkpLFxuICAgIGVkZ2VzID0gZ2VvX2VkZ2VzKHRyaWFuZ2xlcywgcG9pbnRzKSxcbiAgICBuZWlnaGJvcnMgPSBnZW9fbmVpZ2hib3JzKHRyaWFuZ2xlcywgcG9pbnRzLmxlbmd0aCksXG4gICAgZmluZCA9IGdlb19maW5kKG5laWdoYm9ycywgcG9pbnRzKSxcbiAgICAvLyBWb3Jvbm9pIDsgY291bGQgdGFrZSBhIGNlbnRlciBmdW5jdGlvbiBhcyBhbiBhcmd1bWVudFxuICAgIGNpcmN1bWNlbnRlcnMgPSBnZW9fY2lyY3VtY2VudGVycyh0cmlhbmdsZXMsIHBvaW50cyksXG4gICAgeyBwb2x5Z29ucywgY2VudGVycyB9ID0gZ2VvX3BvbHlnb25zKGNpcmN1bWNlbnRlcnMsIHRyaWFuZ2xlcywgcG9pbnRzKSxcbiAgICBtZXNoID0gZ2VvX21lc2gocG9seWdvbnMpLFxuICAgIGh1bGwgPSBnZW9faHVsbCh0cmlhbmdsZXMsIHBvaW50cyksXG4gICAgLy8gVXJxdWhhcnQgOyByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIGRpc3RhbmNlIGFycmF5IGFzIGFyZ3VtZW50LlxuICAgIHVycXVoYXJ0ID0gZ2VvX3VycXVoYXJ0KGVkZ2VzLCB0cmlhbmdsZXMpO1xuICByZXR1cm4ge1xuICAgIGRlbGF1bmF5LFxuICAgIGVkZ2VzLFxuICAgIHRyaWFuZ2xlcyxcbiAgICBjZW50ZXJzLFxuICAgIG5laWdoYm9ycyxcbiAgICBwb2x5Z29ucyxcbiAgICBtZXNoLFxuICAgIGh1bGwsXG4gICAgdXJxdWhhcnQsXG4gICAgZmluZCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2VvX2ZpbmQobmVpZ2hib3JzLCBwb2ludHMpIHtcbiAgZnVuY3Rpb24gZGlzdGFuY2UyKGEsIGIpIHtcbiAgICBsZXQgeCA9IGFbMF0gLSBiWzBdLFxuICAgICAgeSA9IGFbMV0gLSBiWzFdLFxuICAgICAgeiA9IGFbMl0gLSBiWzJdO1xuICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gZmluZCh4LCB5LCBuZXh0KSB7XG4gICAgaWYgKG5leHQgPT09IHVuZGVmaW5lZCkgbmV4dCA9IDA7XG4gICAgbGV0IGNlbGwsXG4gICAgICBkaXN0LFxuICAgICAgZm91bmQgPSBuZXh0O1xuICAgIGNvbnN0IHh5eiA9IGNhcnRlc2lhbihbeCwgeV0pO1xuICAgIGRvIHtcbiAgICAgIGNlbGwgPSBuZXh0O1xuICAgICAgbmV4dCA9IG51bGw7XG4gICAgICBkaXN0ID0gZGlzdGFuY2UyKHh5eiwgY2FydGVzaWFuKHBvaW50c1tjZWxsXSkpO1xuICAgICAgbmVpZ2hib3JzW2NlbGxdLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgbGV0IG5kaXN0ID0gZGlzdGFuY2UyKHh5eiwgY2FydGVzaWFuKHBvaW50c1tpXSkpO1xuICAgICAgICBpZiAobmRpc3QgPCBkaXN0KSB7XG4gICAgICAgICAgZGlzdCA9IG5kaXN0O1xuICAgICAgICAgIG5leHQgPSBpO1xuICAgICAgICAgIGZvdW5kID0gaTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gd2hpbGUgKG5leHQgIT09IG51bGwpO1xuXG4gICAgcmV0dXJuIGZvdW5kO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZW9fZGVsYXVuYXlfZnJvbShwb2ludHMpIHtcbiAgaWYgKHBvaW50cy5sZW5ndGggPCAyKSByZXR1cm4ge307XG5cbiAgLy8gZmluZCBhIHZhbGlkIHBvaW50IHRvIHNlbmQgdG8gaW5maW5pdHlcbiAgbGV0IHBpdm90ID0gMDtcbiAgd2hpbGUgKGlzTmFOKHBvaW50c1twaXZvdF1bMF0gKyBwb2ludHNbcGl2b3RdWzFdKSAmJiBwaXZvdCsrIDwgcG9pbnRzLmxlbmd0aCk7XG5cbiAgY29uc3QgciA9IGdlb1JvdGF0aW9uKHBvaW50c1twaXZvdF0pLFxuICAgIHByb2plY3Rpb24gPSBnZW9TdGVyZW9ncmFwaGljKClcbiAgICAgIC50cmFuc2xhdGUoWzAsIDBdKVxuICAgICAgLnNjYWxlKDEpXG4gICAgICAucm90YXRlKHIuaW52ZXJ0KFsxODAsIDBdKSk7XG4gIHBvaW50cyA9IHBvaW50cy5tYXAocHJvamVjdGlvbik7XG5cbiAgY29uc3QgemVyb3MgPSBbXTtcbiAgbGV0IG1heDIgPSAxO1xuICBmb3IgKGxldCBpID0gMCwgbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICBsZXQgbSA9IHBvaW50c1tpXVswXSAqKiAyICsgcG9pbnRzW2ldWzFdICoqIDI7XG4gICAgaWYgKCFpc0Zpbml0ZShtKSB8fCBtID4gMWUzMikgemVyb3MucHVzaChpKTtcbiAgICBlbHNlIGlmIChtID4gbWF4MikgbWF4MiA9IG07XG4gIH1cblxuICBjb25zdCBGQVIgPSAxZTYgKiBzcXJ0KG1heDIpO1xuXG4gIHplcm9zLmZvckVhY2goKGkpID0+IChwb2ludHNbaV0gPSBbRkFSLCAwXSkpO1xuXG4gIC8vIEFkZCBpbmZpbml0ZSBob3Jpem9uIHBvaW50c1xuICBwb2ludHMucHVzaChbMCwgRkFSXSk7XG4gIHBvaW50cy5wdXNoKFstRkFSLCAwXSk7XG4gIHBvaW50cy5wdXNoKFswLCAtRkFSXSk7XG5cbiAgY29uc3QgZGVsYXVuYXkgPSBEZWxhdW5heS5mcm9tKHBvaW50cyk7XG5cbiAgZGVsYXVuYXkucHJvamVjdGlvbiA9IHByb2plY3Rpb247XG5cbiAgLy8gY2xlYW4gdXAgdGhlIHRyaWFuZ3VsYXRpb25cbiAgY29uc3QgeyB0cmlhbmdsZXMsIGhhbGZlZGdlcywgaW5lZGdlcyB9ID0gZGVsYXVuYXk7XG4gIGNvbnN0IGRlZ2VuZXJhdGUgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBoYWxmZWRnZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGhhbGZlZGdlc1tpXSA8IDApIHtcbiAgICAgIGNvbnN0IGogPSBpICUgMyA9PSAyID8gaSAtIDIgOiBpICsgMTtcbiAgICAgIGNvbnN0IGsgPSBpICUgMyA9PSAwID8gaSArIDIgOiBpIC0gMTtcbiAgICAgIGNvbnN0IGEgPSBoYWxmZWRnZXNbal07XG4gICAgICBjb25zdCBiID0gaGFsZmVkZ2VzW2tdO1xuICAgICAgaGFsZmVkZ2VzW2FdID0gYjtcbiAgICAgIGhhbGZlZGdlc1tiXSA9IGE7XG4gICAgICBoYWxmZWRnZXNbal0gPSBoYWxmZWRnZXNba10gPSAtMTtcbiAgICAgIHRyaWFuZ2xlc1tpXSA9IHRyaWFuZ2xlc1tqXSA9IHRyaWFuZ2xlc1trXSA9IHBpdm90O1xuICAgICAgaW5lZGdlc1t0cmlhbmdsZXNbYV1dID0gYSAlIDMgPT0gMCA/IGEgKyAyIDogYSAtIDE7XG4gICAgICBpbmVkZ2VzW3RyaWFuZ2xlc1tiXV0gPSBiICUgMyA9PSAwID8gYiArIDIgOiBiIC0gMTtcbiAgICAgIGRlZ2VuZXJhdGUucHVzaChNYXRoLm1pbihpLCBqLCBrKSk7XG4gICAgICBpICs9IDIgLSAoaSAlIDMpO1xuICAgIH0gZWxzZSBpZiAodHJpYW5nbGVzW2ldID4gcG9pbnRzLmxlbmd0aCAtIDMgLSAxKSB7XG4gICAgICB0cmlhbmdsZXNbaV0gPSBwaXZvdDtcbiAgICB9XG4gIH1cblxuICAvLyB0aGVyZSBzaG91bGQgYWx3YXlzIGJlIDQgZGVnZW5lcmF0ZSB0cmlhbmdsZXNcbiAgLy8gY29uc29sZS53YXJuKGRlZ2VuZXJhdGUpO1xuICByZXR1cm4gZGVsYXVuYXk7XG59XG5cbmZ1bmN0aW9uIGdlb19lZGdlcyh0cmlhbmdsZXMsIHBvaW50cykge1xuICBjb25zdCBfaW5kZXggPSBuZXcgU2V0KCk7XG4gIGlmIChwb2ludHMubGVuZ3RoID09PSAyKSByZXR1cm4gW1swLCAxXV07XG4gIHRyaWFuZ2xlcy5mb3JFYWNoKCh0cmkpID0+IHtcbiAgICBpZiAodHJpWzBdID09PSB0cmlbMV0pIHJldHVybjtcbiAgICBpZiAoZXhjZXNzKHRyaS5tYXAoKGkpID0+IHBvaW50c1tpXSkpIDwgMCkgcmV0dXJuO1xuICAgIGZvciAobGV0IGkgPSAwLCBqOyBpIDwgMzsgaSsrKSB7XG4gICAgICBqID0gKGkgKyAxKSAlIDM7XG4gICAgICBfaW5kZXguYWRkKGV4dGVudChbdHJpW2ldLCB0cmlbal1dKS5qb2luKFwiLVwiKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIEFycmF5LmZyb20oX2luZGV4LCAoZCkgPT4gZC5zcGxpdChcIi1cIikubWFwKE51bWJlcikpO1xufVxuXG5mdW5jdGlvbiBnZW9fdHJpYW5nbGVzKGRlbGF1bmF5KSB7XG4gIGNvbnN0IHsgdHJpYW5nbGVzIH0gPSBkZWxhdW5heTtcbiAgaWYgKCF0cmlhbmdsZXMpIHJldHVybiBbXTtcblxuICBjb25zdCBnZW9fdHJpYW5nbGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwLCBuID0gdHJpYW5nbGVzLmxlbmd0aCAvIDM7IGkgPCBuOyBpKyspIHtcbiAgICBjb25zdCBhID0gdHJpYW5nbGVzWzMgKiBpXSxcbiAgICAgIGIgPSB0cmlhbmdsZXNbMyAqIGkgKyAxXSxcbiAgICAgIGMgPSB0cmlhbmdsZXNbMyAqIGkgKyAyXTtcbiAgICBpZiAoYSAhPT0gYiAmJiBiICE9PSBjKSB7XG4gICAgICBnZW9fdHJpYW5nbGVzLnB1c2goW2EsIGMsIGJdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGdlb190cmlhbmdsZXM7XG59XG5cbmZ1bmN0aW9uIGdlb19jaXJjdW1jZW50ZXJzKHRyaWFuZ2xlcywgcG9pbnRzKSB7XG4gIC8vIGlmICghdXNlX2NlbnRyb2lkcykge1xuICByZXR1cm4gdHJpYW5nbGVzLm1hcCgodHJpKSA9PiB7XG4gICAgY29uc3QgYyA9IHRyaS5tYXAoKGkpID0+IHBvaW50c1tpXSkubWFwKGNhcnRlc2lhbiksXG4gICAgICBWID0gY2FydGVzaWFuQWRkKFxuICAgICAgICBjYXJ0ZXNpYW5BZGQoY3Jvc3MoY1sxXSwgY1swXSksIGNyb3NzKGNbMl0sIGNbMV0pKSxcbiAgICAgICAgY3Jvc3MoY1swXSwgY1syXSlcbiAgICAgICk7XG4gICAgcmV0dXJuIHNwaGVyaWNhbChub3JtYWxpemUoVikpO1xuICB9KTtcbiAgLyp9IGVsc2Uge1xuICAgIHJldHVybiB0cmlhbmdsZXMubWFwKHRyaSA9PiB7XG4gICAgICByZXR1cm4gZDMuZ2VvQ2VudHJvaWQoe1xuICAgICAgICB0eXBlOiBcIk11bHRpUG9pbnRcIixcbiAgICAgICAgY29vcmRpbmF0ZXM6IHRyaS5tYXAoaSA9PiBwb2ludHNbaV0pXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSovXG59XG5cbmZ1bmN0aW9uIGdlb19uZWlnaGJvcnModHJpYW5nbGVzLCBucG9pbnRzKSB7XG4gIGNvbnN0IG5laWdoYm9ycyA9IFtdO1xuICB0cmlhbmdsZXMuZm9yRWFjaCgodHJpKSA9PiB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCAzOyBqKyspIHtcbiAgICAgIGNvbnN0IGEgPSB0cmlbal0sXG4gICAgICAgIGIgPSB0cmlbKGogKyAxKSAlIDNdO1xuICAgICAgbmVpZ2hib3JzW2FdID0gbmVpZ2hib3JzW2FdIHx8IFtdO1xuICAgICAgbmVpZ2hib3JzW2FdLnB1c2goYik7XG4gICAgfVxuICB9KTtcblxuICAvLyBkZWdlbmVyYXRlIGNhc2VzXG4gIGlmICh0cmlhbmdsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKG5wb2ludHMgPT09IDIpIChuZWlnaGJvcnNbMF0gPSBbMV0pLCAobmVpZ2hib3JzWzFdID0gWzBdKTtcbiAgICBlbHNlIGlmIChucG9pbnRzID09PSAxKSBuZWlnaGJvcnNbMF0gPSBbXTtcbiAgfVxuXG4gIHJldHVybiBuZWlnaGJvcnM7XG59XG5cbmZ1bmN0aW9uIGdlb19wb2x5Z29ucyhjaXJjdW1jZW50ZXJzLCB0cmlhbmdsZXMsIHBvaW50cykge1xuICBjb25zdCBwb2x5Z29ucyA9IFtdO1xuXG4gIGNvbnN0IGNlbnRlcnMgPSBjaXJjdW1jZW50ZXJzLnNsaWNlKCk7XG5cbiAgaWYgKHRyaWFuZ2xlcy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAocG9pbnRzLmxlbmd0aCA8IDIpIHJldHVybiB7IHBvbHlnb25zLCBjZW50ZXJzIH07XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIC8vIHR3byBoZW1pc3BoZXJlc1xuICAgICAgY29uc3QgYSA9IGNhcnRlc2lhbihwb2ludHNbMF0pLFxuICAgICAgICBiID0gY2FydGVzaWFuKHBvaW50c1sxXSksXG4gICAgICAgIG0gPSBub3JtYWxpemUoY2FydGVzaWFuQWRkKGEsIGIpKSxcbiAgICAgICAgZCA9IG5vcm1hbGl6ZShjcm9zcyhhLCBiKSksXG4gICAgICAgIGMgPSBjcm9zcyhtLCBkKTtcbiAgICAgIGNvbnN0IHBvbHkgPSBbXG4gICAgICAgIG0sXG4gICAgICAgIGNyb3NzKG0sIGMpLFxuICAgICAgICBjcm9zcyhjcm9zcyhtLCBjKSwgYyksXG4gICAgICAgIGNyb3NzKGNyb3NzKGNyb3NzKG0sIGMpLCBjKSwgYyksXG4gICAgICBdXG4gICAgICAgIC5tYXAoc3BoZXJpY2FsKVxuICAgICAgICAubWFwKHN1cHBsZW1lbnQpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9seWdvbnMucHVzaChwb2x5KSxcbiAgICAgICAgcG9seWdvbnMucHVzaChwb2x5LnNsaWNlKCkucmV2ZXJzZSgpKSxcbiAgICAgICAgeyBwb2x5Z29ucywgY2VudGVycyB9XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHRyaWFuZ2xlcy5mb3JFYWNoKCh0cmksIHQpID0+IHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDM7IGorKykge1xuICAgICAgY29uc3QgYSA9IHRyaVtqXSxcbiAgICAgICAgYiA9IHRyaVsoaiArIDEpICUgM10sXG4gICAgICAgIGMgPSB0cmlbKGogKyAyKSAlIDNdO1xuICAgICAgcG9seWdvbnNbYV0gPSBwb2x5Z29uc1thXSB8fCBbXTtcbiAgICAgIHBvbHlnb25zW2FdLnB1c2goW2IsIGMsIHQsIFthLCBiLCBjXV0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcmVvcmRlciBlYWNoIHBvbHlnb25cbiAgY29uc3QgcmVvcmRlcmVkID0gcG9seWdvbnMubWFwKChwb2x5KSA9PiB7XG4gICAgY29uc3QgcCA9IFtwb2x5WzBdWzJdXTsgLy8gdFxuICAgIGxldCBrID0gcG9seVswXVsxXTsgLy8gayA9IGNcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHBvbHkubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIGxvb2sgZm9yIGIgPSBrXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBvbHkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHBvbHlbal1bMF0gPT0gaykge1xuICAgICAgICAgIGsgPSBwb2x5W2pdWzFdO1xuICAgICAgICAgIHAucHVzaChwb2x5W2pdWzJdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwLmxlbmd0aCA+IDIpIHtcbiAgICAgIHJldHVybiBwO1xuICAgIH0gZWxzZSBpZiAocC5sZW5ndGggPT0gMikge1xuICAgICAgY29uc3QgUjAgPSBvX21pZHBvaW50KFxuICAgICAgICAgIHBvaW50c1twb2x5WzBdWzNdWzBdXSxcbiAgICAgICAgICBwb2ludHNbcG9seVswXVszXVsxXV0sXG4gICAgICAgICAgY2VudGVyc1twWzBdXVxuICAgICAgICApLFxuICAgICAgICBSMSA9IG9fbWlkcG9pbnQoXG4gICAgICAgICAgcG9pbnRzW3BvbHlbMF1bM11bMl1dLFxuICAgICAgICAgIHBvaW50c1twb2x5WzBdWzNdWzBdXSxcbiAgICAgICAgICBjZW50ZXJzW3BbMF1dXG4gICAgICAgICk7XG4gICAgICBjb25zdCBpMCA9IHN1cHBsZW1lbnQoUjApLFxuICAgICAgICBpMSA9IHN1cHBsZW1lbnQoUjEpO1xuICAgICAgcmV0dXJuIFtwWzBdLCBpMSwgcFsxXSwgaTBdO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gc3VwcGxlbWVudChwb2ludCkge1xuICAgIGxldCBmID0gLTE7XG4gICAgY2VudGVycy5zbGljZSh0cmlhbmdsZXMubGVuZ3RoLCBJbmZpbml0eSkuZm9yRWFjaCgocCwgaSkgPT4ge1xuICAgICAgaWYgKHBbMF0gPT09IHBvaW50WzBdICYmIHBbMV0gPT09IHBvaW50WzFdKSBmID0gaSArIHRyaWFuZ2xlcy5sZW5ndGg7XG4gICAgfSk7XG4gICAgaWYgKGYgPCAwKSAoZiA9IGNlbnRlcnMubGVuZ3RoKSwgY2VudGVycy5wdXNoKHBvaW50KTtcbiAgICByZXR1cm4gZjtcbiAgfVxuXG4gIHJldHVybiB7IHBvbHlnb25zOiByZW9yZGVyZWQsIGNlbnRlcnMgfTtcbn1cblxuZnVuY3Rpb24gb19taWRwb2ludChhLCBiLCBjKSB7XG4gIGEgPSBjYXJ0ZXNpYW4oYSk7XG4gIGIgPSBjYXJ0ZXNpYW4oYik7XG4gIGMgPSBjYXJ0ZXNpYW4oYyk7XG4gIGNvbnN0IHMgPSBzaWduKGRvdChjcm9zcyhiLCBhKSwgYykpO1xuICByZXR1cm4gc3BoZXJpY2FsKG5vcm1hbGl6ZShjYXJ0ZXNpYW5BZGQoYSwgYikpLm1hcCgoZCkgPT4gcyAqIGQpKTtcbn1cblxuZnVuY3Rpb24gZ2VvX21lc2gocG9seWdvbnMpIHtcbiAgY29uc3QgbWVzaCA9IFtdO1xuICBwb2x5Z29ucy5mb3JFYWNoKChwb2x5KSA9PiB7XG4gICAgaWYgKCFwb2x5KSByZXR1cm47XG4gICAgbGV0IHAgPSBwb2x5W3BvbHkubGVuZ3RoIC0gMV07XG4gICAgZm9yIChsZXQgcSBvZiBwb2x5KSB7XG4gICAgICBpZiAocSA+IHApIG1lc2gucHVzaChbcCwgcV0pO1xuICAgICAgcCA9IHE7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG1lc2g7XG59XG5cbmZ1bmN0aW9uIGdlb191cnF1aGFydChlZGdlcywgdHJpYW5nbGVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlzdGFuY2VzKSB7XG4gICAgY29uc3QgX2xlbmd0aHMgPSBuZXcgTWFwKCksXG4gICAgICBfdXJxdWhhcnQgPSBuZXcgTWFwKCk7XG4gICAgZWRnZXMuZm9yRWFjaCgoZWRnZSwgaSkgPT4ge1xuICAgICAgY29uc3QgdSA9IGVkZ2Uuam9pbihcIi1cIik7XG4gICAgICBfbGVuZ3Rocy5zZXQodSwgZGlzdGFuY2VzW2ldKTtcbiAgICAgIF91cnF1aGFydC5zZXQodSwgdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICB0cmlhbmdsZXMuZm9yRWFjaCgodHJpKSA9PiB7XG4gICAgICBsZXQgbCA9IDAsXG4gICAgICAgIHJlbW92ZSA9IC0xO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAzOyBqKyspIHtcbiAgICAgICAgbGV0IHUgPSBleHRlbnQoW3RyaVtqXSwgdHJpWyhqICsgMSkgJSAzXV0pLmpvaW4oXCItXCIpO1xuICAgICAgICBpZiAoX2xlbmd0aHMuZ2V0KHUpID4gbCkge1xuICAgICAgICAgIGwgPSBfbGVuZ3Rocy5nZXQodSk7XG4gICAgICAgICAgcmVtb3ZlID0gdTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX3VycXVoYXJ0LnNldChyZW1vdmUsIGZhbHNlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBlZGdlcy5tYXAoKGVkZ2UpID0+IF91cnF1aGFydC5nZXQoZWRnZS5qb2luKFwiLVwiKSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZW9faHVsbCh0cmlhbmdsZXMsIHBvaW50cykge1xuICBjb25zdCBfaHVsbCA9IG5ldyBTZXQoKSxcbiAgICBodWxsID0gW107XG4gIHRyaWFuZ2xlcy5tYXAoKHRyaSkgPT4ge1xuICAgIGlmIChleGNlc3ModHJpLm1hcCgoaSkgPT4gcG9pbnRzW2kgPiBwb2ludHMubGVuZ3RoID8gMCA6IGldKSkgPiAxZS0xMilcbiAgICAgIHJldHVybjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgbGV0IGUgPSBbdHJpW2ldLCB0cmlbKGkgKyAxKSAlIDNdXSxcbiAgICAgICAgY29kZSA9IGAke2VbMF19LSR7ZVsxXX1gO1xuICAgICAgaWYgKF9odWxsLmhhcyhjb2RlKSkgX2h1bGwuZGVsZXRlKGNvZGUpO1xuICAgICAgZWxzZSBfaHVsbC5hZGQoYCR7ZVsxXX0tJHtlWzBdfWApO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgX2luZGV4ID0gbmV3IE1hcCgpO1xuICBsZXQgc3RhcnQ7XG4gIF9odWxsLmZvckVhY2goKGUpID0+IHtcbiAgICBlID0gZS5zcGxpdChcIi1cIikubWFwKE51bWJlcik7XG4gICAgX2luZGV4LnNldChlWzBdLCBlWzFdKTtcbiAgICBzdGFydCA9IGVbMF07XG4gIH0pO1xuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gaHVsbDtcblxuICBsZXQgbmV4dCA9IHN0YXJ0O1xuICBkbyB7XG4gICAgaHVsbC5wdXNoKG5leHQpO1xuICAgIGxldCBuID0gX2luZGV4LmdldChuZXh0KTtcbiAgICBfaW5kZXguc2V0KG5leHQsIC0xKTtcbiAgICBuZXh0ID0gbjtcbiAgfSB3aGlsZSAobmV4dCA+IC0xICYmIG5leHQgIT09IHN0YXJ0KTtcblxuICByZXR1cm4gaHVsbDtcbn1cbiJdLCJuYW1lcyI6WyJEZWxhdW5heSIsImdlb1JvdGF0aW9uIiwiZ2VvU3RlcmVvZ3JhcGhpYyIsImV4dGVudCIsImFzaW4iLCJhdGFuMiIsImNvcyIsImRlZ3JlZXMiLCJtYXgiLCJtaW4iLCJyYWRpYW5zIiwic2lnbiIsInNpbiIsInNxcnQiLCJjYXJ0ZXNpYW5Ob3JtYWxpemUiLCJub3JtYWxpemUiLCJjYXJ0ZXNpYW5Dcm9zcyIsImNyb3NzIiwiY2FydGVzaWFuRG90IiwiZG90IiwiY2FydGVzaWFuQWRkIiwic3BoZXJpY2FsIiwiY2FydGVzaWFuIiwiY29vcmRpbmF0ZXMiLCJsYW1iZGEiLCJwaGkiLCJjb3NwaGkiLCJleGNlc3MiLCJ0cmlhbmdsZSIsIm1hcCIsInAiLCJnZW9EZWxhdW5heSIsInBvaW50cyIsImRlbGF1bmF5IiwiZ2VvX2RlbGF1bmF5X2Zyb20iLCJ0cmlhbmdsZXMiLCJnZW9fdHJpYW5nbGVzIiwiZWRnZXMiLCJnZW9fZWRnZXMiLCJuZWlnaGJvcnMiLCJnZW9fbmVpZ2hib3JzIiwibGVuZ3RoIiwiZmluZCIsImdlb19maW5kIiwiY2lyY3VtY2VudGVycyIsImdlb19jaXJjdW1jZW50ZXJzIiwicG9seWdvbnMiLCJjZW50ZXJzIiwiZ2VvX3BvbHlnb25zIiwibWVzaCIsImdlb19tZXNoIiwiaHVsbCIsImdlb19odWxsIiwidXJxdWhhcnQiLCJnZW9fdXJxdWhhcnQiLCJkaXN0YW5jZTIiLCJhIiwiYiIsIngiLCJ5IiwieiIsIm5leHQiLCJ1bmRlZmluZWQiLCJjZWxsIiwiZGlzdCIsImZvdW5kIiwieHl6IiwiZm9yRWFjaCIsImkiLCJuZGlzdCIsInBpdm90IiwiaXNOYU4iLCJyIiwicHJvamVjdGlvbiIsInRyYW5zbGF0ZSIsInNjYWxlIiwicm90YXRlIiwiaW52ZXJ0IiwiemVyb3MiLCJtYXgyIiwibiIsIm0iLCJpc0Zpbml0ZSIsInB1c2giLCJGQVIiLCJmcm9tIiwiaGFsZmVkZ2VzIiwiaW5lZGdlcyIsImRlZ2VuZXJhdGUiLCJsIiwiaiIsImsiLCJNYXRoIiwiX2luZGV4IiwiU2V0IiwidHJpIiwiYWRkIiwiam9pbiIsIkFycmF5IiwiZCIsInNwbGl0IiwiTnVtYmVyIiwiYyIsIlYiLCJucG9pbnRzIiwic2xpY2UiLCJwb2x5Iiwic3VwcGxlbWVudCIsInJldmVyc2UiLCJ0IiwicmVvcmRlcmVkIiwiUjAiLCJvX21pZHBvaW50IiwiUjEiLCJpMCIsImkxIiwicG9pbnQiLCJmIiwiSW5maW5pdHkiLCJzIiwicSIsImRpc3RhbmNlcyIsIl9sZW5ndGhzIiwiTWFwIiwiX3VycXVoYXJ0IiwiZWRnZSIsInUiLCJzZXQiLCJyZW1vdmUiLCJnZXQiLCJfaHVsbCIsImUiLCJjb2RlIiwiaGFzIiwiZGVsZXRlIiwic3RhcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/d3-geo-voronoi/src/delaunay.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/d3-geo-voronoi/src/math.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-geo-voronoi/src/math.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   abs: () => (/* binding */ abs),\n/* harmony export */   acos: () => (/* binding */ acos),\n/* harmony export */   asin: () => (/* binding */ asin),\n/* harmony export */   atan: () => (/* binding */ atan),\n/* harmony export */   atan2: () => (/* binding */ atan2),\n/* harmony export */   ceil: () => (/* binding */ ceil),\n/* harmony export */   cos: () => (/* binding */ cos),\n/* harmony export */   degrees: () => (/* binding */ degrees),\n/* harmony export */   epsilon: () => (/* binding */ epsilon),\n/* harmony export */   epsilon2: () => (/* binding */ epsilon2),\n/* harmony export */   exp: () => (/* binding */ exp),\n/* harmony export */   floor: () => (/* binding */ floor),\n/* harmony export */   halfPi: () => (/* binding */ halfPi),\n/* harmony export */   haversin: () => (/* binding */ haversin),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   pi: () => (/* binding */ pi),\n/* harmony export */   pow: () => (/* binding */ pow),\n/* harmony export */   quarterPi: () => (/* binding */ quarterPi),\n/* harmony export */   radians: () => (/* binding */ radians),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   sin: () => (/* binding */ sin),\n/* harmony export */   sqrt: () => (/* binding */ sqrt),\n/* harmony export */   tan: () => (/* binding */ tan),\n/* harmony export */   tau: () => (/* binding */ tau)\n/* harmony export */ });\nconst epsilon = 1e-6;\nconst epsilon2 = 1e-12;\nconst pi = Math.PI;\nconst halfPi = pi / 2;\nconst quarterPi = pi / 4;\nconst tau = pi * 2;\nconst degrees = 180 / pi;\nconst radians = pi / 180;\nconst abs = Math.abs;\nconst atan = Math.atan;\nconst atan2 = Math.atan2;\nconst cos = Math.cos;\nconst ceil = Math.ceil;\nconst exp = Math.exp;\nconst floor = Math.floor;\nconst log = Math.log;\nconst max = Math.max;\nconst min = Math.min;\nconst pow = Math.pow;\nconst sin = Math.sin;\nconst sign = Math.sign || function(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n};\nconst sqrt = Math.sqrt;\nconst tan = Math.tan;\nfunction acos(x) {\n    return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\nfunction asin(x) {\n    return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\nfunction haversin(x) {\n    return (x = sin(x / 2)) * x;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZDMtZ2VvLXZvcm9ub2kvc3JjL21hdGguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBTyxNQUFNQSxVQUFVLEtBQUs7QUFDckIsTUFBTUMsV0FBVyxNQUFNO0FBQ3ZCLE1BQU1DLEtBQUtDLEtBQUtDLEVBQUUsQ0FBQztBQUNuQixNQUFNQyxTQUFTSCxLQUFLLEVBQUU7QUFDdEIsTUFBTUksWUFBWUosS0FBSyxFQUFFO0FBQ3pCLE1BQU1LLE1BQU1MLEtBQUssRUFBRTtBQUVuQixNQUFNTSxVQUFVLE1BQU1OLEdBQUc7QUFDekIsTUFBTU8sVUFBVVAsS0FBSyxJQUFJO0FBRXpCLE1BQU1RLE1BQU1QLEtBQUtPLEdBQUcsQ0FBQztBQUNyQixNQUFNQyxPQUFPUixLQUFLUSxJQUFJLENBQUM7QUFDdkIsTUFBTUMsUUFBUVQsS0FBS1MsS0FBSyxDQUFDO0FBQ3pCLE1BQU1DLE1BQU1WLEtBQUtVLEdBQUcsQ0FBQztBQUNyQixNQUFNQyxPQUFPWCxLQUFLVyxJQUFJLENBQUM7QUFDdkIsTUFBTUMsTUFBTVosS0FBS1ksR0FBRyxDQUFDO0FBQ3JCLE1BQU1DLFFBQVFiLEtBQUthLEtBQUssQ0FBQztBQUN6QixNQUFNQyxNQUFNZCxLQUFLYyxHQUFHLENBQUM7QUFDckIsTUFBTUMsTUFBTWYsS0FBS2UsR0FBRyxDQUFDO0FBQ3JCLE1BQU1DLE1BQU1oQixLQUFLZ0IsR0FBRyxDQUFDO0FBQ3JCLE1BQU1DLE1BQU1qQixLQUFLaUIsR0FBRyxDQUFDO0FBQ3JCLE1BQU1DLE1BQU1sQixLQUFLa0IsR0FBRyxDQUFDO0FBQ3JCLE1BQU1DLE9BQ1huQixLQUFLbUIsSUFBSSxJQUNULFNBQVVDLENBQUM7SUFDVCxPQUFPQSxJQUFJLElBQUksSUFBSUEsSUFBSSxJQUFJLENBQUMsSUFBSTtBQUNsQyxFQUFFO0FBQ0csTUFBTUMsT0FBT3JCLEtBQUtxQixJQUFJLENBQUM7QUFDdkIsTUFBTUMsTUFBTXRCLEtBQUtzQixHQUFHLENBQUM7QUFFckIsU0FBU0MsS0FBS0gsQ0FBQztJQUNwQixPQUFPQSxJQUFJLElBQUksSUFBSUEsSUFBSSxDQUFDLElBQUlyQixLQUFLQyxLQUFLdUIsSUFBSSxDQUFDSDtBQUM3QztBQUVPLFNBQVNJLEtBQUtKLENBQUM7SUFDcEIsT0FBT0EsSUFBSSxJQUFJbEIsU0FBU2tCLElBQUksQ0FBQyxJQUFJLENBQUNsQixTQUFTRixLQUFLd0IsSUFBSSxDQUFDSjtBQUN2RDtBQUVPLFNBQVNLLFNBQVNMLENBQUM7SUFDeEIsT0FBTyxDQUFDQSxJQUFJRixJQUFJRSxJQUFJLEVBQUMsSUFBS0E7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2QzLWdlby12b3Jvbm9pL3NyYy9tYXRoLmpzPzQzYTciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGVwc2lsb24gPSAxZS02O1xuZXhwb3J0IGNvbnN0IGVwc2lsb24yID0gMWUtMTI7XG5leHBvcnQgY29uc3QgcGkgPSBNYXRoLlBJO1xuZXhwb3J0IGNvbnN0IGhhbGZQaSA9IHBpIC8gMjtcbmV4cG9ydCBjb25zdCBxdWFydGVyUGkgPSBwaSAvIDQ7XG5leHBvcnQgY29uc3QgdGF1ID0gcGkgKiAyO1xuXG5leHBvcnQgY29uc3QgZGVncmVlcyA9IDE4MCAvIHBpO1xuZXhwb3J0IGNvbnN0IHJhZGlhbnMgPSBwaSAvIDE4MDtcblxuZXhwb3J0IGNvbnN0IGFicyA9IE1hdGguYWJzO1xuZXhwb3J0IGNvbnN0IGF0YW4gPSBNYXRoLmF0YW47XG5leHBvcnQgY29uc3QgYXRhbjIgPSBNYXRoLmF0YW4yO1xuZXhwb3J0IGNvbnN0IGNvcyA9IE1hdGguY29zO1xuZXhwb3J0IGNvbnN0IGNlaWwgPSBNYXRoLmNlaWw7XG5leHBvcnQgY29uc3QgZXhwID0gTWF0aC5leHA7XG5leHBvcnQgY29uc3QgZmxvb3IgPSBNYXRoLmZsb29yO1xuZXhwb3J0IGNvbnN0IGxvZyA9IE1hdGgubG9nO1xuZXhwb3J0IGNvbnN0IG1heCA9IE1hdGgubWF4O1xuZXhwb3J0IGNvbnN0IG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IGNvbnN0IHBvdyA9IE1hdGgucG93O1xuZXhwb3J0IGNvbnN0IHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IGNvbnN0IHNpZ24gPVxuICBNYXRoLnNpZ24gfHxcbiAgZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4geCA+IDAgPyAxIDogeCA8IDAgPyAtMSA6IDA7XG4gIH07XG5leHBvcnQgY29uc3Qgc3FydCA9IE1hdGguc3FydDtcbmV4cG9ydCBjb25zdCB0YW4gPSBNYXRoLnRhbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjb3MoeCkge1xuICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkgOiBNYXRoLmFjb3MoeCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc2luKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gaGFsZlBpIDogeCA8IC0xID8gLWhhbGZQaSA6IE1hdGguYXNpbih4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhdmVyc2luKHgpIHtcbiAgcmV0dXJuICh4ID0gc2luKHggLyAyKSkgKiB4O1xufVxuIl0sIm5hbWVzIjpbImVwc2lsb24iLCJlcHNpbG9uMiIsInBpIiwiTWF0aCIsIlBJIiwiaGFsZlBpIiwicXVhcnRlclBpIiwidGF1IiwiZGVncmVlcyIsInJhZGlhbnMiLCJhYnMiLCJhdGFuIiwiYXRhbjIiLCJjb3MiLCJjZWlsIiwiZXhwIiwiZmxvb3IiLCJsb2ciLCJtYXgiLCJtaW4iLCJwb3ciLCJzaW4iLCJzaWduIiwieCIsInNxcnQiLCJ0YW4iLCJhY29zIiwiYXNpbiIsImhhdmVyc2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/d3-geo-voronoi/src/math.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/d3-geo-voronoi/src/voronoi.js":
/*!****************************************************!*\
  !*** ./node_modules/d3-geo-voronoi/src/voronoi.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   geoVoronoi: () => (/* binding */ geoVoronoi)\n/* harmony export */ });\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-geo */ \"(ssr)/./node_modules/d3-geo/src/centroid.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-geo */ \"(ssr)/./node_modules/d3-geo/src/distance.js\");\n/* harmony import */ var _delaunay_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./delaunay.js */ \"(ssr)/./node_modules/d3-geo-voronoi/src/delaunay.js\");\n\n\nfunction geoVoronoi(data) {\n    const v = function(data) {\n        v.delaunay = null;\n        v._data = data;\n        if (typeof v._data === \"object\" && v._data.type === \"FeatureCollection\") {\n            v._data = v._data.features;\n        }\n        if (typeof v._data === \"object\") {\n            const temp = v._data.map((d)=>[\n                    v._vx(d),\n                    v._vy(d),\n                    d\n                ]).filter((d)=>isFinite(d[0] + d[1]));\n            v.points = temp.map((d)=>[\n                    d[0],\n                    d[1]\n                ]);\n            v.valid = temp.map((d)=>d[2]);\n            v.delaunay = (0,_delaunay_js__WEBPACK_IMPORTED_MODULE_0__.geoDelaunay)(v.points);\n        }\n        return v;\n    };\n    v._vx = function(d) {\n        if (typeof d == \"object\" && \"type\" in d) {\n            return (0,d3_geo__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(d)[0];\n        }\n        if (0 in d) return d[0];\n    };\n    v._vy = function(d) {\n        if (typeof d == \"object\" && \"type\" in d) {\n            return (0,d3_geo__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(d)[1];\n        }\n        if (1 in d) return d[1];\n    };\n    v.x = function(f) {\n        if (!f) return v._vx;\n        v._vx = f;\n        return v;\n    };\n    v.y = function(f) {\n        if (!f) return v._vy;\n        v._vy = f;\n        return v;\n    };\n    v.polygons = function(data) {\n        if (data !== undefined) {\n            v(data);\n        }\n        if (!v.delaunay) return false;\n        const coll = {\n            type: \"FeatureCollection\",\n            features: []\n        };\n        if (v.valid.length === 0) return coll;\n        v.delaunay.polygons.forEach((poly, i)=>coll.features.push({\n                type: \"Feature\",\n                geometry: !poly ? null : {\n                    type: \"Polygon\",\n                    coordinates: [\n                        [\n                            ...poly,\n                            poly[0]\n                        ].map((i)=>v.delaunay.centers[i])\n                    ]\n                },\n                properties: {\n                    site: v.valid[i],\n                    sitecoordinates: v.points[i],\n                    neighbours: v.delaunay.neighbors[i]\n                }\n            }));\n        if (v.valid.length === 1) coll.features.push({\n            type: \"Feature\",\n            geometry: {\n                type: \"Sphere\"\n            },\n            properties: {\n                site: v.valid[0],\n                sitecoordinates: v.points[0],\n                neighbours: []\n            }\n        });\n        return coll;\n    };\n    v.triangles = function(data) {\n        if (data !== undefined) {\n            v(data);\n        }\n        if (!v.delaunay) return false;\n        return {\n            type: \"FeatureCollection\",\n            features: v.delaunay.triangles.map((tri, index)=>{\n                tri = tri.map((i)=>v.points[i]);\n                tri.center = v.delaunay.centers[index];\n                return tri;\n            }).filter((tri)=>(0,_delaunay_js__WEBPACK_IMPORTED_MODULE_0__.excess)(tri) > 0).map((tri)=>({\n                    type: \"Feature\",\n                    properties: {\n                        circumcenter: tri.center\n                    },\n                    geometry: {\n                        type: \"Polygon\",\n                        coordinates: [\n                            [\n                                ...tri,\n                                tri[0]\n                            ]\n                        ]\n                    }\n                }))\n        };\n    };\n    v.links = function(data) {\n        if (data !== undefined) {\n            v(data);\n        }\n        if (!v.delaunay) return false;\n        const _distances = v.delaunay.edges.map((e)=>(0,d3_geo__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(v.points[e[0]], v.points[e[1]])), _urquart = v.delaunay.urquhart(_distances);\n        return {\n            type: \"FeatureCollection\",\n            features: v.delaunay.edges.map((e, i)=>({\n                    type: \"Feature\",\n                    properties: {\n                        source: v.valid[e[0]],\n                        target: v.valid[e[1]],\n                        length: _distances[i],\n                        urquhart: !!_urquart[i]\n                    },\n                    geometry: {\n                        type: \"LineString\",\n                        coordinates: [\n                            v.points[e[0]],\n                            v.points[e[1]]\n                        ]\n                    }\n                }))\n        };\n    };\n    v.mesh = function(data) {\n        if (data !== undefined) {\n            v(data);\n        }\n        if (!v.delaunay) return false;\n        return {\n            type: \"MultiLineString\",\n            coordinates: v.delaunay.edges.map((e)=>[\n                    v.points[e[0]],\n                    v.points[e[1]]\n                ])\n        };\n    };\n    v.cellMesh = function(data) {\n        if (data !== undefined) {\n            v(data);\n        }\n        if (!v.delaunay) return false;\n        const { centers, polygons } = v.delaunay;\n        const coordinates = [];\n        for (const p of polygons){\n            if (!p) continue;\n            for(let n = p.length, p0 = p[n - 1], p1 = p[0], i = 0; i < n; p0 = p1, p1 = p[++i]){\n                if (p1 > p0) {\n                    coordinates.push([\n                        centers[p0],\n                        centers[p1]\n                    ]);\n                }\n            }\n        }\n        return {\n            type: \"MultiLineString\",\n            coordinates\n        };\n    };\n    v._found = undefined;\n    v.find = function(x, y, radius) {\n        v._found = v.delaunay.find(x, y, v._found);\n        if (!radius || (0,d3_geo__WEBPACK_IMPORTED_MODULE_2__[\"default\"])([\n            x,\n            y\n        ], v.points[v._found]) < radius) return v._found;\n    };\n    v.hull = function(data) {\n        if (data !== undefined) {\n            v(data);\n        }\n        const hull = v.delaunay.hull, points = v.points;\n        return hull.length === 0 ? null : {\n            type: \"Polygon\",\n            coordinates: [\n                [\n                    ...hull.map((i)=>points[i]),\n                    points[hull[0]]\n                ]\n            ]\n        };\n    };\n    return data ? v(data) : v;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/d3-geo-voronoi/src/voronoi.js\n");

/***/ })

};
;