"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@turf";
exports.ids = ["vendor-chunks/@turf"];
exports.modules = {

/***/ "(ssr)/./node_modules/@turf/boolean-point-in-polygon/dist/esm/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@turf/boolean-point-in-polygon/dist/esm/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   booleanPointInPolygon: () => (/* binding */ booleanPointInPolygon),\n/* harmony export */   \"default\": () => (/* binding */ turf_boolean_point_in_polygon_default)\n/* harmony export */ });\n/* harmony import */ var point_in_polygon_hao__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! point-in-polygon-hao */ \"(ssr)/./node_modules/point-in-polygon-hao/dist/esm/index.js\");\n/* harmony import */ var _turf_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @turf/invariant */ \"(ssr)/./node_modules/@turf/invariant/dist/esm/index.js\");\n// index.ts\n\n\nfunction booleanPointInPolygon(point, polygon, options = {}) {\n    if (!point) {\n        throw new Error(\"point is required\");\n    }\n    if (!polygon) {\n        throw new Error(\"polygon is required\");\n    }\n    const pt = (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_1__.getCoord)(point);\n    const geom = (0,_turf_invariant__WEBPACK_IMPORTED_MODULE_1__.getGeom)(polygon);\n    const type = geom.type;\n    const bbox = polygon.bbox;\n    let polys = geom.coordinates;\n    if (bbox && inBBox(pt, bbox) === false) {\n        return false;\n    }\n    if (type === \"Polygon\") {\n        polys = [\n            polys\n        ];\n    }\n    let result = false;\n    for(var i = 0; i < polys.length; ++i){\n        const polyResult = (0,point_in_polygon_hao__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(pt, polys[i]);\n        if (polyResult === 0) return options.ignoreBoundary ? false : true;\n        else if (polyResult) result = true;\n    }\n    return result;\n}\nfunction inBBox(pt, bbox) {\n    return bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1];\n}\nvar turf_boolean_point_in_polygon_default = booleanPointInPolygon;\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHR1cmYvYm9vbGVhbi1wb2ludC1pbi1wb2x5Z29uL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxXQUFXO0FBQzRCO0FBQ2E7QUFDcEQsU0FBU0csc0JBQXNCQyxLQUFLLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxDQUFDLENBQUM7SUFDekQsSUFBSSxDQUFDRixPQUFPO1FBQ1YsTUFBTSxJQUFJRyxNQUFNO0lBQ2xCO0lBQ0EsSUFBSSxDQUFDRixTQUFTO1FBQ1osTUFBTSxJQUFJRSxNQUFNO0lBQ2xCO0lBQ0EsTUFBTUMsS0FBS1AseURBQVFBLENBQUNHO0lBQ3BCLE1BQU1LLE9BQU9QLHdEQUFPQSxDQUFDRztJQUNyQixNQUFNSyxPQUFPRCxLQUFLQyxJQUFJO0lBQ3RCLE1BQU1DLE9BQU9OLFFBQVFNLElBQUk7SUFDekIsSUFBSUMsUUFBUUgsS0FBS0ksV0FBVztJQUM1QixJQUFJRixRQUFRRyxPQUFPTixJQUFJRyxVQUFVLE9BQU87UUFDdEMsT0FBTztJQUNUO0lBQ0EsSUFBSUQsU0FBUyxXQUFXO1FBQ3RCRSxRQUFRO1lBQUNBO1NBQU07SUFDakI7SUFDQSxJQUFJRyxTQUFTO0lBQ2IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlKLE1BQU1LLE1BQU0sRUFBRSxFQUFFRCxFQUFHO1FBQ3JDLE1BQU1FLGFBQWFsQixnRUFBR0EsQ0FBQ1EsSUFBSUksS0FBSyxDQUFDSSxFQUFFO1FBQ25DLElBQUlFLGVBQWUsR0FBRyxPQUFPWixRQUFRYSxjQUFjLEdBQUcsUUFBUTthQUN6RCxJQUFJRCxZQUFZSCxTQUFTO0lBQ2hDO0lBQ0EsT0FBT0E7QUFDVDtBQUNBLFNBQVNELE9BQU9OLEVBQUUsRUFBRUcsSUFBSTtJQUN0QixPQUFPQSxJQUFJLENBQUMsRUFBRSxJQUFJSCxFQUFFLENBQUMsRUFBRSxJQUFJRyxJQUFJLENBQUMsRUFBRSxJQUFJSCxFQUFFLENBQUMsRUFBRSxJQUFJRyxJQUFJLENBQUMsRUFBRSxJQUFJSCxFQUFFLENBQUMsRUFBRSxJQUFJRyxJQUFJLENBQUMsRUFBRSxJQUFJSCxFQUFFLENBQUMsRUFBRTtBQUNyRjtBQUNBLElBQUlZLHdDQUF3Q2pCO0FBSTFDLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AdHVyZi9ib29sZWFuLXBvaW50LWluLXBvbHlnb24vZGlzdC9lc20vaW5kZXguanM/OTA3NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbmRleC50c1xuaW1wb3J0IHBpcCBmcm9tIFwicG9pbnQtaW4tcG9seWdvbi1oYW9cIjtcbmltcG9ydCB7IGdldENvb3JkLCBnZXRHZW9tIH0gZnJvbSBcIkB0dXJmL2ludmFyaWFudFwiO1xuZnVuY3Rpb24gYm9vbGVhblBvaW50SW5Qb2x5Z29uKHBvaW50LCBwb2x5Z29uLCBvcHRpb25zID0ge30pIHtcbiAgaWYgKCFwb2ludCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInBvaW50IGlzIHJlcXVpcmVkXCIpO1xuICB9XG4gIGlmICghcG9seWdvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcInBvbHlnb24gaXMgcmVxdWlyZWRcIik7XG4gIH1cbiAgY29uc3QgcHQgPSBnZXRDb29yZChwb2ludCk7XG4gIGNvbnN0IGdlb20gPSBnZXRHZW9tKHBvbHlnb24pO1xuICBjb25zdCB0eXBlID0gZ2VvbS50eXBlO1xuICBjb25zdCBiYm94ID0gcG9seWdvbi5iYm94O1xuICBsZXQgcG9seXMgPSBnZW9tLmNvb3JkaW5hdGVzO1xuICBpZiAoYmJveCAmJiBpbkJCb3gocHQsIGJib3gpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZSA9PT0gXCJQb2x5Z29uXCIpIHtcbiAgICBwb2x5cyA9IFtwb2x5c107XG4gIH1cbiAgbGV0IHJlc3VsdCA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvbHlzLmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgcG9seVJlc3VsdCA9IHBpcChwdCwgcG9seXNbaV0pO1xuICAgIGlmIChwb2x5UmVzdWx0ID09PSAwKSByZXR1cm4gb3B0aW9ucy5pZ25vcmVCb3VuZGFyeSA/IGZhbHNlIDogdHJ1ZTtcbiAgICBlbHNlIGlmIChwb2x5UmVzdWx0KSByZXN1bHQgPSB0cnVlO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBpbkJCb3gocHQsIGJib3gpIHtcbiAgcmV0dXJuIGJib3hbMF0gPD0gcHRbMF0gJiYgYmJveFsxXSA8PSBwdFsxXSAmJiBiYm94WzJdID49IHB0WzBdICYmIGJib3hbM10gPj0gcHRbMV07XG59XG52YXIgdHVyZl9ib29sZWFuX3BvaW50X2luX3BvbHlnb25fZGVmYXVsdCA9IGJvb2xlYW5Qb2ludEluUG9seWdvbjtcbmV4cG9ydCB7XG4gIGJvb2xlYW5Qb2ludEluUG9seWdvbixcbiAgdHVyZl9ib29sZWFuX3BvaW50X2luX3BvbHlnb25fZGVmYXVsdCBhcyBkZWZhdWx0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbInBpcCIsImdldENvb3JkIiwiZ2V0R2VvbSIsImJvb2xlYW5Qb2ludEluUG9seWdvbiIsInBvaW50IiwicG9seWdvbiIsIm9wdGlvbnMiLCJFcnJvciIsInB0IiwiZ2VvbSIsInR5cGUiLCJiYm94IiwicG9seXMiLCJjb29yZGluYXRlcyIsImluQkJveCIsInJlc3VsdCIsImkiLCJsZW5ndGgiLCJwb2x5UmVzdWx0IiwiaWdub3JlQm91bmRhcnkiLCJ0dXJmX2Jvb2xlYW5fcG9pbnRfaW5fcG9seWdvbl9kZWZhdWx0IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turf/boolean-point-in-polygon/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turf/helpers/dist/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@turf/helpers/dist/esm/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   areaFactors: () => (/* binding */ areaFactors),\n/* harmony export */   azimuthToBearing: () => (/* binding */ azimuthToBearing),\n/* harmony export */   bearingToAzimuth: () => (/* binding */ bearingToAzimuth),\n/* harmony export */   convertArea: () => (/* binding */ convertArea),\n/* harmony export */   convertLength: () => (/* binding */ convertLength),\n/* harmony export */   degreesToRadians: () => (/* binding */ degreesToRadians),\n/* harmony export */   earthRadius: () => (/* binding */ earthRadius),\n/* harmony export */   factors: () => (/* binding */ factors),\n/* harmony export */   feature: () => (/* binding */ feature),\n/* harmony export */   featureCollection: () => (/* binding */ featureCollection),\n/* harmony export */   geometry: () => (/* binding */ geometry),\n/* harmony export */   geometryCollection: () => (/* binding */ geometryCollection),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   lengthToDegrees: () => (/* binding */ lengthToDegrees),\n/* harmony export */   lengthToRadians: () => (/* binding */ lengthToRadians),\n/* harmony export */   lineString: () => (/* binding */ lineString),\n/* harmony export */   lineStrings: () => (/* binding */ lineStrings),\n/* harmony export */   multiLineString: () => (/* binding */ multiLineString),\n/* harmony export */   multiPoint: () => (/* binding */ multiPoint),\n/* harmony export */   multiPolygon: () => (/* binding */ multiPolygon),\n/* harmony export */   point: () => (/* binding */ point),\n/* harmony export */   points: () => (/* binding */ points),\n/* harmony export */   polygon: () => (/* binding */ polygon),\n/* harmony export */   polygons: () => (/* binding */ polygons),\n/* harmony export */   radiansToDegrees: () => (/* binding */ radiansToDegrees),\n/* harmony export */   radiansToLength: () => (/* binding */ radiansToLength),\n/* harmony export */   round: () => (/* binding */ round),\n/* harmony export */   validateBBox: () => (/* binding */ validateBBox),\n/* harmony export */   validateId: () => (/* binding */ validateId)\n/* harmony export */ });\n// index.ts\nvar earthRadius = 63710088e-1;\nvar factors = {\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    degrees: 360 / (2 * Math.PI),\n    feet: earthRadius * 3.28084,\n    inches: earthRadius * 39.37,\n    kilometers: earthRadius / 1e3,\n    kilometres: earthRadius / 1e3,\n    meters: earthRadius,\n    metres: earthRadius,\n    miles: earthRadius / 1609.344,\n    millimeters: earthRadius * 1e3,\n    millimetres: earthRadius * 1e3,\n    nauticalmiles: earthRadius / 1852,\n    radians: 1,\n    yards: earthRadius * 1.0936\n};\nvar areaFactors = {\n    acres: 247105e-9,\n    centimeters: 1e4,\n    centimetres: 1e4,\n    feet: 10.763910417,\n    hectares: 1e-4,\n    inches: 1550.003100006,\n    kilometers: 1e-6,\n    kilometres: 1e-6,\n    meters: 1,\n    metres: 1,\n    miles: 386e-9,\n    nauticalmiles: 29155334959812285e-23,\n    millimeters: 1e6,\n    millimetres: 1e6,\n    yards: 1.195990046\n};\nfunction feature(geom, properties, options = {}) {\n    const feat = {\n        type: \"Feature\"\n    };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nfunction geometry(type, coordinates, _options = {}) {\n    switch(type){\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\nfunction point(coordinates, properties, options = {}) {\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    const geom = {\n        type: \"Point\",\n        coordinates\n    };\n    return feature(geom, properties, options);\n}\nfunction points(coordinates, properties, options = {}) {\n    return featureCollection(coordinates.map((coords)=>{\n        return point(coords, properties);\n    }), options);\n}\nfunction polygon(coordinates, properties, options = {}) {\n    for (const ring of coordinates){\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        if (ring[ring.length - 1].length !== ring[0].length) {\n            throw new Error(\"First and last Position are not equivalent.\");\n        }\n        for(let j = 0; j < ring[ring.length - 1].length; j++){\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    const geom = {\n        type: \"Polygon\",\n        coordinates\n    };\n    return feature(geom, properties, options);\n}\nfunction polygons(coordinates, properties, options = {}) {\n    return featureCollection(coordinates.map((coords)=>{\n        return polygon(coords, properties);\n    }), options);\n}\nfunction lineString(coordinates, properties, options = {}) {\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    const geom = {\n        type: \"LineString\",\n        coordinates\n    };\n    return feature(geom, properties, options);\n}\nfunction lineStrings(coordinates, properties, options = {}) {\n    return featureCollection(coordinates.map((coords)=>{\n        return lineString(coords, properties);\n    }), options);\n}\nfunction featureCollection(features, options = {}) {\n    const fc = {\n        type: \"FeatureCollection\"\n    };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nfunction multiLineString(coordinates, properties, options = {}) {\n    const geom = {\n        type: \"MultiLineString\",\n        coordinates\n    };\n    return feature(geom, properties, options);\n}\nfunction multiPoint(coordinates, properties, options = {}) {\n    const geom = {\n        type: \"MultiPoint\",\n        coordinates\n    };\n    return feature(geom, properties, options);\n}\nfunction multiPolygon(coordinates, properties, options = {}) {\n    const geom = {\n        type: \"MultiPolygon\",\n        coordinates\n    };\n    return feature(geom, properties, options);\n}\nfunction geometryCollection(geometries, properties, options = {}) {\n    const geom = {\n        type: \"GeometryCollection\",\n        geometries\n    };\n    return feature(geom, properties, options);\n}\nfunction round(num, precision = 0) {\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    const multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nfunction radiansToLength(radians, units = \"kilometers\") {\n    const factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nfunction lengthToRadians(distance, units = \"kilometers\") {\n    const factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nfunction bearingToAzimuth(bearing) {\n    let angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nfunction azimuthToBearing(angle) {\n    angle = angle % 360;\n    if (angle > 180) {\n        return angle - 360;\n    } else if (angle < -180) {\n        return angle + 360;\n    }\n    return angle;\n}\nfunction radiansToDegrees(radians) {\n    const normalisedRadians = radians % (2 * Math.PI);\n    return normalisedRadians * 180 / Math.PI;\n}\nfunction degreesToRadians(degrees) {\n    const normalisedDegrees = degrees % 360;\n    return normalisedDegrees * Math.PI / 180;\n}\nfunction convertLength(length, originalUnit = \"kilometers\", finalUnit = \"kilometers\") {\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nfunction convertArea(area, originalUnit = \"meters\", finalUnit = \"kilometers\") {\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    const startFactor = areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    const finalFactor = areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return area / startFactor * finalFactor;\n}\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nfunction isObject(input) {\n    return input !== null && typeof input === \"object\" && !Array.isArray(input);\n}\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach((num)=>{\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\n        \"string\",\n        \"number\"\n    ].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turf/helpers/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@turf/invariant/dist/esm/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@turf/invariant/dist/esm/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   collectionOf: () => (/* binding */ collectionOf),\n/* harmony export */   containsNumber: () => (/* binding */ containsNumber),\n/* harmony export */   featureOf: () => (/* binding */ featureOf),\n/* harmony export */   geojsonType: () => (/* binding */ geojsonType),\n/* harmony export */   getCoord: () => (/* binding */ getCoord),\n/* harmony export */   getCoords: () => (/* binding */ getCoords),\n/* harmony export */   getGeom: () => (/* binding */ getGeom),\n/* harmony export */   getType: () => (/* binding */ getType)\n/* harmony export */ });\n/* harmony import */ var _turf_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @turf/helpers */ \"(ssr)/./node_modules/@turf/helpers/dist/esm/index.js\");\n// index.ts\n\nfunction getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" && coord.geometry !== null && coord.geometry.type === \"Point\") {\n            return [\n                ...coord.geometry.coordinates\n            ];\n        }\n        if (coord.type === \"Point\") {\n            return [\n                ...coord.coordinates\n            ];\n        }\n    }\n    if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {\n        return [\n            ...coord\n        ];\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\nfunction getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    } else {\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\nfunction containsNumber(coordinates) {\n    if (coordinates.length > 1 && (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.isNumber)(coordinates[0]) && (0,_turf_helpers__WEBPACK_IMPORTED_MODULE_0__.isNumber)(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\nfunction geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" + name + \": must be a \" + type + \", given \" + value.type);\n    }\n}\nfunction featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" + name + \": must be a \" + type + \", given \" + feature.geometry.type);\n    }\n}\nfunction collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (const feature of featureCollection.features){\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" + name + \": must be a \" + type + \", given \" + feature.geometry.type);\n        }\n    }\n}\nfunction getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\nfunction getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@turf/invariant/dist/esm/index.js\n");

/***/ })

};
;